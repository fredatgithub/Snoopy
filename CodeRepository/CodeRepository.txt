v1

[Sql]
[start]
ALTER PROCEDURE [dbo].[InfoPrComplement]
	-- Add the parameters for the stored procedure here
	@node nchar (10),
	@resultat nvarchar (100) =null  output
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	SET NOCOUNT ON;
	
	begin transaction
		----Verifier la valeur du titre
		begin Try
			Declare @Valeurtitre int;
			
			set @Valeurtitre =  (select PAR_CATEGORIE.CAT_MONTANT  
								from CSR_DOSSIER,PAR_CATEGORIE  
								where CSR_DOSSIER.CAT_CODE = PAR_CATEGORIE.CAT_CODE 
								and CSR_DOSSIER.DOS_NODE = @node);
								
			Declare @Montantverser int;
			
			set @Montantverser = (Select SUM (dbo.CSR_COMPLEMENT.CMP_MTVERSE)  
								 From dbo.CSR_COMPLEMENT WHERE dbo .CSR_COMPLEMENT.DOS_ID =(SELECT dbo.CSR_DOSSIER.DOS_ID 
																			FROM dbo.CSR_DOSSIER 
																			WHERE DOS_NODE =@node ));
			if (@Montantverser='0')
			begin
				set @resultat = 'Demande inexistante';
			end
			else if (@Montantverser = @Valeurtitre )
			begin
				-----------resultat "Paiement complet"
				set @resultat = 'Paiement complet';				
			end
			else if (@Montantverser < @Valeurtitre )
			begin
				SELECT dbo.CSR_DOSSIER.DOS_NOM +' '+  ISNULL ( dbo .CSR_DOSSIER.DOS_PRENOM, ' ') as Nom, 
						CSR_DOSSIER.PID_CODE +' - '+PAR_PIDENT.PID_LIB  AS Poste , CSR_DOSSIER.TIT_CODE +' - '+ PAR_TITRE.TIT_LIB AS Titre ,
						CSR_DOSSIER.CAT_CODE, dbo.PAR_CATEGORIE.CAT_MONTANT,
						(Select SUM (dbo.CSR_COMPLEMENT.CMP_MTVERSE)  
						 From dbo.CSR_COMPLEMENT WHERE dbo .CSR_COMPLEMENT.DOS_ID =(SELECT dbo.CSR_DOSSIER.DOS_ID 
																					FROM dbo.CSR_DOSSIER 
																					WHERE DOS_NODE =@node ))  as MontantVerse  	
				FROM dbo.CSR_DOSSIER ,dbo.PAR_CATEGORIE ,dbo.PAR_PIDENT, PAR_TITRE  
				WHERE dbo .CSR_DOSSIER.DOS_ID =(SELECT dbo.CSR_DOSSIER.DOS_ID 
												FROM dbo.CSR_DOSSIER WHERE DOS_NODE =@node )
				AND CSR_DOSSIER.CAT_CODE = PAR_CATEGORIE .CAT_CODE 
				AND CSR_DOSSIER.PID_CODE = PAR_PIDENT.PID_CODE   
				AND CSR_DOSSIER.TIT_CODE = PAR_TITRE.TIT_CODE; 	
				
				--set @resultat ='Paiement Partiel';		
			end
			
			commit transaction 
			return @resultat 
		end try
		begin catch
					---------------SELECT ERROR_PROCEDURE() AS ErrorProcedure ,ERROR_LINE() AS ErrorLine,ERROR_MESSAGE() AS ErrorMessage;

				IF @@TRANCOUNT > 0	ROLLBACK TRANSACTION;
		end catch

END
[end]
[Csharp]
[start]
		#region Char

		/// <summary>
		/// Char and style
		/// </summary>
		struct Char
		{
				public char c;
				public StyleIndex style;

				public Char(char c)
				{
						this.c = c;
						style = StyleIndex.None;
				}
		}
		#endregion

[end]

[Csharp]
[start]
public static SqlDataReader  ExecuteStoredProcedureRetouneReader(string storedProcedureName, params SqlParameter[] sqlParameters)
				{
						SqlDataReader MonReader;
						try
						{
								InitConnexionMobile();
								m_commande.CommandText = storedProcedureName;
								m_commande.Parameters.AddRange(sqlParameters);
							 MonReader=  m_commande.ExecuteReader ();
						}
						catch (Exception e)
						{
								// todo: log4Net
								MessageBox.Show(e.Message);
							 //return false;
								throw e;

						}
						return MonReader;
				}
				
[end]

[Php]
[start]
<?php
		// la fonction strtolower renvoie en minuscules la chaîne de caractères passée en paramètre
		$lang = strtolower($_POST['lang']);
		if ($lang === 'fr')
				echo 'Vous parlez français !';
		elseif ($lang === 'en')
				echo 'You speak English!';
		else
				echo 'Je ne vois pas quelle est votre langue !';
?>

[end]

[Vba]
[start]
Sub Macro1()
'
' Macro1 Macro
'

'
		Columns("A:A").Select
		Selection.ClearContents
		Columns("C:C").Select
		Selection.ClearContents
		Columns("B:B").Select
		Selection.Cut Destination:=Columns("A:A")
		Columns("D:D").Select
		Selection.Cut Destination:=Columns("C:C")
		Columns("C:C").Select
End Sub

[end]

[Vbnet]
[start]
Public Class FormMain
	Dim chronoStarted As Boolean = False
	Dim tempsDepart As New Date
	Dim tempsFin As New Date
	Private Sub FormMainLoad(ByVal sender As System.Object, ByVal e As EventArgs) Handles MyBase.Load
		chronoStarted = False
		TimerChrono.Enabled = True
		TimerChrono.Interval = 1
		LabelCompteur.Text = "00:00:00:0000000"
		tempsDepart = Now
		tempsFin = Now
	End Sub
	Private Sub ButtonStartClick(ByVal sender As Object, ByVal e As EventArgs) Handles ButtonStart.Click
		If chronoStarted Then
			chronoStarted = False
			ButtonStart.Text = "Start"
			ButtonReset.Enabled = True
		Else
			chronoStarted = True
			ButtonStart.Text = "Stop"
			tempsDepart = Now
			ButtonReset.Enabled = False
		End If
	End Sub
	Private Sub TimerChronoTick(ByVal sender As Object, ByVal e As EventArgs) Handles TimerChrono.Tick
		If chronoStarted Then
			tempsFin = Now
			LabelCompteur.Text = (tempsFin - tempsDepart).ToString
			LabelCompteur.Refresh()
		End If
	End Sub
	Private Sub ButtonResetClick(ByVal sender As System.Object, ByVal e As EventArgs) Handles ButtonReset.Click
		LabelCompteur.Text = "00:00:00:0000000"
	End Sub
	Private Sub QuitterToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles QuitterToolStripMenuItem.Click
		Application.Exit()
	End Sub
	Private Sub NouveauToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles NouveauToolStripMenuItem.Click
		LabelCompteur.Text = "00:00:00:0000000"
	End Sub
	Private Sub ÀproposdeToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles ÀproposdeToolStripMenuItem.Click
		AboutBox1.Show()
	End Sub
	Private Sub SourceToolStripMenuItemClick(ByVal sender As Object, ByVal e As EventArgs) Handles SourceToolStripMenuItem.Click
		DialogViewSource.Show()
	End Sub
End Class


[end]

[Vbnet]
[start]
string a = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)

[end]

[Vbnet]
[start]
Public Class frmMainForm
		''' <summary>
		''' Create some simple data to demo checkbobox column code
		''' </summary>
		''' <param name="sender"></param>
		''' <param name="e"></param>
		''' <remarks></remarks>
		Private Sub Form3_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
				Dim Table As New DataTable With {.TableName = "TestData"}
				Table.Columns.AddRange(New DataColumn() {New DataColumn("Checked", System.Type.GetType("System.Boolean")), New DataColumn("Name", System.Type.GetType("System.String"))})
				Table.Rows.Add(New Object() {True, "Form1"})
				Table.Rows.Add(New Object() {False, "Form2"})
				Table.Rows.Add(New Object() {False, "Form3"})
				Table.Rows.Add(New Object() {True, "Form4"})
				Table.Rows.Add(New Object() {False, "Form5"})
				GridView.DataSource = Table
		End Sub
		''' <summary>
		''' Shows how to get count of checked or unchecked checkbox column count along with
		''' how to get column data back for checked items.
		''' </summary>
		''' <param name="sender"></param>
		''' <param name="e"></param>
		''' <remarks></remarks>
		Private Sub cmdGetCheckedCount_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdGetCheckedCount.Click
				Console.WriteLine("BEGIN")
				Console.WriteLine("      Checked [{0}] unchecked [{1}]", GridView.CheckCount(0, True), GridView.CheckCount(0, False))

				Dim Result = _
				(From Rows In GridView.Rows.Cast(Of DataGridViewRow)() Where CBool(Rows.Cells("Checked").Value) = True _
				 Select FormName = Rows.Cells("Name").Value).ToList

				If Result.Count > 0 Then
						Console.WriteLine("      Checked items")
						For Each Item In Result
								Console.WriteLine("      {0}", Item)
						Next
				Else
						Console.WriteLine("      No items checked")
				End If
				Console.WriteLine("END")
		End Sub
		Private Sub cmdExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdExit.Click
				Close()
		End Sub
End Class

Module Extensions
		<Runtime.CompilerServices.Extension()> _
		Public Function CheckCount(ByVal GridView As DataGridView, ByVal ColumnIndex As Integer, ByVal Checked As Boolean) As Integer
				Return (From Rows In GridView.Rows.Cast(Of DataGridViewRow)() Where CBool(Rows.Cells(ColumnIndex).Value) = Checked).Count
		End Function
End Module
[end]

[Html]
[start]
<a href="http://www.w3schools.com/">Visit W3Schools</a> 
[end]

[Css]
[start]
table
{
		border-collapse:collapse;
}
table,th, td
{
		border: 1px solid black;
}

[end]

[Js]
[start]
<!DOCTYPE html>
<html>

<head>
<script type="text/javascript">
function myFunction()
{
document.getElementById("demo").innerHTML="My First JavaScript Function";
}
</script>
</head>

<body>

<h1>My Web Page</h1>

<p id="demo">A Paragraph</p>

<button type="button" onclick="myFunction()">Try it</button>

</body>
</html> 

[end]

[Python]
[start]
friends = ['john', 'pat', 'gary', 'michael']
for i, name in enumerate(friends):
		print "iteration {iteration} is {name}".format(iteration=i, name=name)
		
[end]

[Ruby]
[start]
def test(a=1,b=2,*c)
	puts "#{a},#{b}"
	c.each{|x| print " #{x}, "}  # We will learn about "each" very soon.  I promise.
end
test 3, 6, 9, 12, 15, 18

[end]

[Powershell]
[start]
Get-Service | Get-Member
ipconfig | findstr "Address"
# ceci est un commentaire

[end]

[Cpp]
[start]
#include <iostream>

int main( int argc, char **argv )
{
		std::cout << "Hello World" << std::endl;
		return 0;
}

[end]

[Java]
[start]
/*
						Calculate Circle Area using Java Example
						This Calculate Circle Area using Java Example shows how to calculate
						area of circle using it's radius.
		*/
		 
		import java.io.BufferedReader;
		import java.io.IOException;
		import java.io.InputStreamReader;
		 
		public class CalculateCircleAreaExample {
		 
						public static void main(String[] args) {
									 
										int radius = 0;
										System.out.println("Please enter radius of a circle");
									 
										try
										{
														//get the radius from console
														BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
														radius = Integer.parseInt(br.readLine());
										}
										//if invalid value was entered
										catch(NumberFormatException ne)
										{
														System.out.println("Invalid radius value" + ne);
														System.exit(0);
										}
										catch(IOException ioe)
										{
														System.out.println("IO Error :" + ioe);
														System.exit(0);
										}
									 
										/*
										 * Area of a circle is
										 * pi * r * r
										 * where r is a radius of a circle.
										 */
									 
										//NOTE : use Math.PI constant to get value of pi
										double area = Math.PI * radius * radius;
									 
										System.out.println("Area of a circle is " + area);
						}
		}
		 
		/*
		Output of Calculate Circle Area using Java Example would be
		Please enter radius of a circle
		19
		Area of a circle is 1134.1149479459152
		*/

[end]

[Delphi]
[start]
procedure TForm1.Timer1Timer(Sender: TObject);
begin
	Timer1.Interval := 100;
	if ActiveControl <> nil then
		ActiveControl.Left := ActiveControl.Left + 1;
end;

[end]

[Vbs]
[start]
<html>
<body>

<script type="text/vbscript">
document.write("This is my first VBScript!")
</script>

</body>
</html> 

[end]

[Vbs]
[start]
Dim X
X = 13
If X = 12 Then
		MsgBox "How about that, X is 12."
Else
		MsgBox "Wow, X is not 12."
End If

[end]

[Java]
[start]
/*
						Java boolean Example
						This Java Example shows how to declare and use Java primitive boolean variable
						inside a java class.
		*/
		 
		public class JavaBooleanExample {
		 
						public static void main(String[] args) {
									 
										/*
										 * boolean is simple Java type which can have only of two values; true or false.
										 * All rational expressions retrun this type of value.
										 *
										 * Declare boolean varibale as below
										 *
										 * boolean <variable name> = <default value>;
										 *
										 * here assigning default value is optional.
										 */
		 
										boolean b1 = true;
										boolean b2 = false;
										boolean b3 = (10 > 2)? true:false;
									 
										System.out.println("Value of boolean variable b1 is :" + b1);
										System.out.println("Value of boolean variable b2 is :" + b2);
										System.out.println("Value of boolean variable b3 is :" + b3);            
						}
		}
		 
		/*
		Output would be
		Value of boolean variable b1 is :true
		Value of boolean variable b2 is :false
		Value of boolean variable b3 is :true
		*/

[end]

[Cpp]
[start]
int main ()
{
	 const int responseSize = 100;
	 int frequency[ 10 ] = { 0 },
			 response[ responseSize ] = 
					{ 6, 7, 8, 9, 8, 7, 8, 9, 8, 9,
						7, 8, 9, 5, 9, 8, 7, 8, 7, 8,
						6, 7, 8, 9, 3, 9, 8, 7, 8, 7,
						7, 8, 9, 8, 9, 8, 9, 7, 8, 9,
						6, 7, 8, 7, 8, 7, 9, 8, 9, 2,
						7, 8, 9, 8, 9, 8, 9, 7, 5, 3,
						5, 6, 7, 2, 5, 3, 9, 4, 6, 4,
						7, 8, 9, 6, 8, 7, 8, 9, 7, 8,
						7, 4, 4, 2, 5, 3, 8, 7, 5, 6,
						4, 5, 6, 1, 6, 7, 7, 7, 7, 7 };

	 mean( response, responseSize );
	 median( response, responseSize );
	 mode( frequency, response, responseSize );


		 pause ();
		 return 0;
}

[end]

[Js]
[start]
////////////////////////////////////////////////////////////////////////////////////////
// Big Integer Library v. 5.4
// Created 2000, last modified 2009
// Leemon Baird
// www.leemon.com
//
// Version history:
// v 5.4  3 Oct 2009
//   - added "var i" to greaterShift() so i is not global. (Thanks to PŽter Szab— for finding that bug)
//
// v 5.3  21 Sep 2009
//   - added randProbPrime(k) for probable primes
//   - unrolled loop in mont_ (slightly faster)
//   - millerRabin now takes a bigInt parameter rather than an int
//
// v 5.2  15 Sep 2009
//   - fixed capitalization in call to int2bigInt in randBigInt
//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)
//
// v 5.1  8 Oct 2007 
//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters
//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_
//   - fixed a bug found by Rob Visser (see comment with his name below)
//   - improved comments
//
// This file is public domain.   You can use it for any purpose without restriction.
// I do not guarantee that it is correct, so use it at your own risk.  If you use 
// it for something interesting, I'd appreciate hearing about it.  If you find 
// any bugs or make any improvements, I'd appreciate hearing about those too.
// It would also be nice if my name and URL were left in the comments.  But none 
// of that is required.
//
// This code defines a bigInt library for arbitrary-precision integers.
// A bigInt is an array of integers storing the value in chunks of bpe bits, 
// little endian (buff[0] is the least significant word).
// Negative bigInts are stored two's complement.  Almost all the functions treat
// bigInts as nonnegative.  The few that view them as two's complement say so
// in their comments.  Some functions assume their parameters have at least one 
// leading zero element. Functions with an underscore at the end of the name put
// their answer into one of the arrays passed in, and have unpredictable behavior 
// in case of overflow, so the caller must make sure the arrays are big enough to 
// hold the answer.  But the average user should never have to call any of the 
// underscored functions.  Each important underscored function has a wrapper function 
// of the same name without the underscore that takes care of the details for you.  
// For each underscored function where a parameter is modified, that same variable 
// must not be used as another argument too.  So, you cannot square x by doing 
// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).
// Or simply use the multMod(x,x,n) function without the underscore, where
// such issues never arise, because non-underscored functions never change
// their parameters; they always allocate new memory for the answer that is returned.
//
// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.
// For most functions, if it needs a BigInt as a local variable it will actually use
// a global, and will only allocate to it only when it's not the right size.  This ensures
// that when a function is called repeatedly with same-sized parameters, it only allocates
// memory on the first call.
//
// Note that for cryptographic purposes, the calls to Math.random() must 
// be replaced with calls to a better pseudorandom number generator.
//
// In the following, "bigInt" means a bigInt with at least one leading zero element,
// and "integer" means a nonnegative integer less than radix.  In some cases, integer 
// can be negative.  Negative bigInts are 2s complement.
// 
// The following functions do not modify their inputs.
// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.
// Those returning a boolean will return the integer 0 (false) or 1 (true).
// Those returning boolean or int will not allocate memory except possibly on the first 
// time they're called with a given parameter size.
// 
// bigInt  add(x,y)               //return (x+y) for bigInts x and y.  
// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.
// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95
// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros
// bigInt  dup(x)                 //return a copy of bigInt x
// boolean equals(x,y)            //is the bigInt x equal to the bigint y?
// boolean equalsInt(x,y)         //is bigint x equal to integer y?
// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed
// Array   findPrimes(n)          //return array of all primes less than integer n
// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).
// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)
// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?
// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements
// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null
// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse
// boolean isZero(x)              //is the bigInt x equal to zero?
// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)
// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)
// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.
// int     modInt(x,n)            //return x mod n for bigInt x and integer n.
// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.
// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.
// boolean negative(x)            //is bigInt x negative?
// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.
// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.
// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.
// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).
// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements
// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement
// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements
//
//
// The following functions each have a non-underscored version, which most users should call instead.
// These functions each write to a single parameter, and the caller is responsible for ensuring the array 
// passed in is large enough to hold the result. 
//
// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer
// void    add_(x,y)             //do x=x+y for bigInts x and y
// void    copy_(x,y)            //do x=y on bigInts x and y
// void    copyInt_(x,n)         //do x=n on bigInt x and integer n
// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).
// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist
// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).
// void    mult_(x,y)            //do x=x*y for bigInts x and y.
// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.
// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.
// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.
// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.
// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.
//
// The following functions do NOT have a non-underscored version. 
// They each write a bigInt result to one or more parameters.  The caller is responsible for
// ensuring the arrays passed in are large enough to hold the results. 
//
// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))
// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.
// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r
// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).
// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y
// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).
// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.
// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b
// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys
// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)
// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.
// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).
// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n
// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.
//
// The following functions are based on algorithms from the _Handbook of Applied Cryptography_
//    powMod_()           = algorithm 14.94, Montgomery exponentiation
//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_
//    GCD_()              = algorothm 14.57, Lehmer's algorithm
//    mont_()             = algorithm 14.36, Montgomery multiplication
//    divide_()           = algorithm 14.20  Multiple-precision division
//    squareMod_()        = algorithm 14.16  Multiple-precision squaring
//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm
//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm
//
// Profiling shows:
//     randTruePrime_() spends:
//         10% of its time in calls to powMod_()
//         85% of its time in calls to millerRabin()
//     millerRabin() spends:
//         99% of its time in calls to powMod_()   (always with a base of 2)
//     powMod_() spends:
//         94% of its time in calls to mont_()  (almost always with x==y)
//
// This suggests there are several ways to speed up this library slightly:
//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)
//         -- this should especially focus on being fast when raising 2 to a power mod n
//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test
//     - tune the parameters in randTruePrime_(), including c, m, and recLimit
//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking
//       within the loop when all the parameters are the same length.
//
// There are several ideas that look like they wouldn't help much at all:
//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)
//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)
//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square
//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that
//       method would be slower.  This is unfortunate because the code currently spends almost all of its time
//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring
//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded
//       sentences that seem to imply it's faster to do a non-modular square followed by a single
//       Montgomery reduction, but that's obviously wrong.
////////////////////////////////////////////////////////////////////////////////////////

//globals
bpe=0;         //bits stored per array element
mask=0;        //AND this with an array element to chop it down to bpe bits
radix=mask+1;  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.

//the digits for converting to different bases
digitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\'\"+-';

//initialize the global variables
for (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform
bpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt
mask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits
radix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask
one=int2bigInt(1,1,1);     //constant used in powMod_()

//the following global variables are scratchpad memory to 
//reduce dynamic memory allocation in the inner loop
t=new Array(0);
ss=t;       //used in mult_()
s0=t;       //used in multMod_(), squareMod_() 
s1=t;       //used in powMod_(), multMod_(), squareMod_() 
s2=t;       //used in powMod_(), multMod_()
s3=t;       //used in powMod_()
s4=t; s5=t; //used in mod_()
s6=t;       //used in bigInt2str()
s7=t;       //used in powMod_()
T=t;        //used in GCD_()
sa=t;       //used in mont_()
mr_x1=t; mr_r=t; mr_a=t;                                      //used in millerRabin()
eg_v=t; eg_u=t; eg_A=t; eg_B=t; eg_C=t; eg_D=t;               //used in eGCD_(), inverseMod_()
md_q1=t; md_q2=t; md_q3=t; md_r=t; md_r1=t; md_r2=t; md_tt=t; //used in mod_()

primes=t; pows=t; s_i=t; s_i2=t; s_R=t; s_rm=t; s_q=t; s_n1=t; 
	s_a=t; s_r2=t; s_n=t; s_b=t; s_d=t; s_x1=t; s_x2=t, s_aa=t; //used in randTruePrime_()
	
rpprb=t; //used in randProbPrimeRounds() (which also uses "primes")

////////////////////////////////////////////////////////////////////////////////////////


//return array of all primes less than integer n
function findPrimes(n) {
	var i,s,p,ans;
	s=new Array(n);
	for (i=0;i<n;i++)
		s[i]=0;
	s[0]=2;
	p=0;    //first p elements of s are primes, the rest are a sieve
	for(;s[p]<n;) {                  //s[p] is the pth prime
		for(i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]
			s[i]=1;
		p++;
		s[p]=s[p-1]+1;
		for(; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)
	}
	ans=new Array(p);
	for(i=0;i<p;i++)
		ans[i]=s[i];
	return ans;
}


//does a single round of Miller-Rabin base b consider x to be a possible prime?
//x is a bigInt, and b is an integer, with b<x
function millerRabinInt(x,b) {
	if (mr_x1.length!=x.length) {
		mr_x1=dup(x);
		mr_r=dup(x);
		mr_a=dup(x);
	}

	copyInt_(mr_a,b);
	return millerRabin(x,mr_a);
}

//does a single round of Miller-Rabin base b consider x to be a possible prime?
//x and b are bigInts with b<x
function millerRabin(x,b) {
	var i,j,k,s;

	if (mr_x1.length!=x.length) {
		mr_x1=dup(x);
		mr_r=dup(x);
		mr_a=dup(x);
	}

	copy_(mr_a,b);
	copy_(mr_r,x);
	copy_(mr_x1,x);

	addInt_(mr_r,-1);
	addInt_(mr_x1,-1);

	//s=the highest power of two that divides mr_r
	k=0;
	for (i=0;i<mr_r.length;i++)
		for (j=1;j<mask;j<<=1)
			if (x[i] & j) {
				s=(k<mr_r.length+bpe ? k : 0); 
				 i=mr_r.length;
				 j=mask;
			} else
				k++;

	if (s)                
		rightShift_(mr_r,s);

	powMod_(mr_a,mr_r,x);

	if (!equalsInt(mr_a,1) && !equals(mr_a,mr_x1)) {
		j=1;
		while (j<=s-1 && !equals(mr_a,mr_x1)) {
			squareMod_(mr_a,x);
			if (equalsInt(mr_a,1)) {
				return 0;
			}
			j++;
		}
		if (!equals(mr_a,mr_x1)) {
			return 0;
		}
	}
	return 1;  
}

//returns how many bits long the bigInt is, not counting leading zeros.
function bitSize(x) {
	var j,z,w;
	for (j=x.length-1; (x[j]==0) && (j>0); j--);
	for (z=0,w=x[j]; w; (w>>=1),z++);
	z+=bpe*j;
	return z;
}

//return a copy of x with at least n elements, adding leading zeros if needed
function expand(x,n) {
	var ans=int2bigInt(0,(x.length>n ? x.length : n)*bpe,0);
	copy_(ans,x);
	return ans;
}

//return a k-bit true random prime using Maurer's algorithm.
function randTruePrime(k) {
	var ans=int2bigInt(0,k,0);
	randTruePrime_(ans,k);
	return trim(ans,1);
}

//return a k-bit random probable prime with probability of error < 2^-80
function randProbPrime(k) {
	if (k>=600) return randProbPrimeRounds(k,2); //numbers from HAC table 4.3
	if (k>=550) return randProbPrimeRounds(k,4);
	if (k>=500) return randProbPrimeRounds(k,5);
	if (k>=400) return randProbPrimeRounds(k,6);
	if (k>=350) return randProbPrimeRounds(k,7);
	if (k>=300) return randProbPrimeRounds(k,9);
	if (k>=250) return randProbPrimeRounds(k,12); //numbers from HAC table 4.4
	if (k>=200) return randProbPrimeRounds(k,15);
	if (k>=150) return randProbPrimeRounds(k,18);
	if (k>=100) return randProbPrimeRounds(k,27);
							return randProbPrimeRounds(k,40); //number from HAC remark 4.26 (only an estimate)
}

//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)    
function randProbPrimeRounds(k,n) {
	var ans, i, divisible, B; 
	B=30000;  //B is largest prime to use in trial division
	ans=int2bigInt(0,k,0);
	
	//optimization: try larger and smaller B to find the best limit.
	
	if (primes.length==0)
		primes=findPrimes(30000);  //check for divisibility by primes <=30000

	if (rpprb.length!=ans.length)
		rpprb=dup(ans);

	for (;;) { //keep trying random values for ans until one appears to be prime
		//optimization: pick a random number times L=2*3*5*...*p, plus a 
		//   random element of the list of all numbers in [0,L) not divisible by any prime up to p.
		//   This can reduce the amount of random number generation.
		
		randBigInt_(ans,k,0); //ans = a random odd number to check
		ans[0] |= 1; 
		divisible=0;
	
		//check ans for divisibility by small primes up to B
		for (i=0; (i<primes.length) && (primes[i]<=B); i++)
			if (modInt(ans,primes[i])==0 && !equalsInt(ans,primes[i])) {
				divisible=1;
				break;
			}      
		
		//optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.
		
		//do n rounds of Miller Rabin, with random bases less than ans
		for (i=0; i<n && !divisible; i++) {
			randBigInt_(rpprb,k,0);
			while(!greater(ans,rpprb)) //pick a random rpprb that's < ans
				randBigInt_(rpprb,k,0);
			if (!millerRabin(ans,rpprb))
				divisible=1;
		}
		
		if(!divisible)
			return ans;
	}  
}

//return a new bigInt equal to (x mod n) for bigInts x and n.
function mod(x,n) {
	var ans=dup(x);
	mod_(ans,n);
	return trim(ans,1);
}

//return (x+n) where x is a bigInt and n is an integer.
function addInt(x,n) {
	var ans=expand(x,x.length+1);
	addInt_(ans,n);
	return trim(ans,1);
}

//return x*y for bigInts x and y. This is faster when y<x.
function mult(x,y) {
	var ans=expand(x,x.length+y.length);
	mult_(ans,y);
	return trim(ans,1);
}

//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.
function powMod(x,y,n) {
	var ans=expand(x,n.length);  
	powMod_(ans,trim(y,2),trim(n,2),0);  //this should work without the trim, but doesn't
	return trim(ans,1);
}

//return (x-y) for bigInts x and y.  Negative answers will be 2s complement
function sub(x,y) {
	var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1)); 
	sub_(ans,y);
	return trim(ans,1);
}

//return (x+y) for bigInts x and y.  
function add(x,y) {
	var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1)); 
	add_(ans,y);
	return trim(ans,1);
}

//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null
function inverseMod(x,n) {
	var ans=expand(x,n.length); 
	var s;
	s=inverseMod_(ans,n);
	return s ? trim(ans,1) : null;
}

//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.
function multMod(x,y,n) {
	var ans=expand(x,n.length);
	multMod_(ans,y,n);
	return trim(ans,1);
}

//generate a k-bit true random prime using Maurer's algorithm,
//and put it into ans.  The bigInt ans must be large enough to hold it.
function randTruePrime_(ans,k) {
	var c,m,pm,dd,j,r,B,divisible,z,zz,recSize;

	if (primes.length==0)
		primes=findPrimes(30000);  //check for divisibility by primes <=30000

	if (pows.length==0) {
		pows=new Array(512);
		for (j=0;j<512;j++) {
			pows[j]=Math.pow(2,j/511.-1.);
		}
	}

	//c and m should be tuned for a particular machine and value of k, to maximize speed
	c=0.1;  //c=0.1 in HAC
	m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits
	recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2

	if (s_i2.length!=ans.length) {
		s_i2=dup(ans);
		s_R =dup(ans);
		s_n1=dup(ans);
		s_r2=dup(ans);
		s_d =dup(ans);
		s_x1=dup(ans);
		s_x2=dup(ans);
		s_b =dup(ans);
		s_n =dup(ans);
		s_i =dup(ans);
		s_rm=dup(ans);
		s_q =dup(ans);
		s_a =dup(ans);
		s_aa=dup(ans);
	}

	if (k <= recLimit) {  //generate small random primes by trial division up to its square root
		pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)
		copyInt_(ans,0);
		for (dd=1;dd;) {
			dd=0;
			ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1
			for (j=1;(j<primes.length) && ((primes[j]&pm)==primes[j]);j++) { //trial division by all primes 3...sqrt(2^k)
				if (0==(ans[0]%primes[j])) {
					dd=1;
					break;
				}
			}
		}
		carry_(ans);
		return;
	}

	B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).
	if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits
		for (r=1; k-k*r<=m; )
			r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);
	else
		r=.5;

	//simulation suggests the more complex algorithm using r=.333 is only slightly faster.

	recSize=Math.floor(r*k)+1;

	randTruePrime_(s_q,recSize);
	copyInt_(s_i2,0);
	s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)
	divide_(s_i2,s_q,s_i,s_rm);                        //s_i=floor((2^(k-1))/(2q))

	z=bitSize(s_i);

	for (;;) {
		for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]
			randBigInt_(s_R,z,0);
			if (greater(s_i,s_R))
				break;
		}                //now s_R is in the range [0,s_i-1]
		addInt_(s_R,1);  //now s_R is in the range [1,s_i]
		add_(s_R,s_i);   //now s_R is in the range [s_i+1,2*s_i]

		copy_(s_n,s_q);
		mult_(s_n,s_R); 
		multInt_(s_n,2);
		addInt_(s_n,1);    //s_n=2*s_R*s_q+1
		
		copy_(s_r2,s_R);
		multInt_(s_r2,2);  //s_r2=2*s_R

		//check s_n for divisibility by small primes up to B
		for (divisible=0,j=0; (j<primes.length) && (primes[j]<B); j++)
			if (modInt(s_n,primes[j])==0 && !equalsInt(s_n,primes[j])) {
				divisible=1;
				break;
			}      

		if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2
			if (!millerRabinInt(s_n,2)) //this line represents 75% of the total runtime for randTruePrime_ 
				divisible=1;

		if (!divisible) {  //if it passes that test, continue checking s_n
			addInt_(s_n,-3);
			for (j=s_n.length-1;(s_n[j]==0) && (j>0); j--);  //strip leading zeros
			for (zz=0,w=s_n[j]; w; (w>>=1),zz++);
			zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros
			for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]
				randBigInt_(s_a,zz,0);
				if (greater(s_n,s_a))
					break;
			}                //now s_a is in the range [0,s_n-1]
			addInt_(s_n,3);  //now s_a is in the range [0,s_n-4]
			addInt_(s_a,2);  //now s_a is in the range [2,s_n-2]
			copy_(s_b,s_a);
			copy_(s_n1,s_n);
			addInt_(s_n1,-1);
			powMod_(s_b,s_n1,s_n);   //s_b=s_a^(s_n-1) modulo s_n
			addInt_(s_b,-1);
			if (isZero(s_b)) {
				copy_(s_b,s_a);
				powMod_(s_b,s_r2,s_n);
				addInt_(s_b,-1);
				copy_(s_aa,s_n);
				copy_(s_d,s_b);
				GCD_(s_d,s_n);  //if s_b and s_n are relatively prime, then s_n is a prime
				if (equalsInt(s_d,1)) {
					copy_(ans,s_aa);
					return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime
				}
			}
		}
	}
}

//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.
function randBigInt(n,s) {
	var a,b;
	a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element
	b=int2bigInt(0,0,a);
	randBigInt_(b,n,s);
	return b;
}

//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.
//Array b must be big enough to hold the result. Must have n>=1
function randBigInt_(b,n,s) {
	var i,a;
	for (i=0;i<b.length;i++)
		b[i]=0;
	a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt
	for (i=0;i<a;i++) {
		b[i]=Math.floor(Math.random()*(1<<(bpe-1)));
	}
	b[a-1] &= (2<<((n-1)%bpe))-1;
	if (s==1)
		b[a-1] |= (1<<((n-1)%bpe));
}

//Return the greatest common divisor of bigInts x and y (each with same number of elements).
function GCD(x,y) {
	var xc,yc;
	xc=dup(x);
	yc=dup(y);
	GCD_(xc,yc);
	return xc;
}

//set x to the greatest common divisor of bigInts x and y (each with same number of elements).
//y is destroyed.
function GCD_(x,y) {
	var i,xp,yp,A,B,C,D,q,sing;
	if (T.length!=x.length)
		T=dup(x);

	sing=1;
	while (sing) { //while y has nonzero elements other than y[0]
		sing=0;
		for (i=1;i<y.length;i++) //check if y has nonzero elements other than 0
			if (y[i]) {
				sing=1;
				break;
			}
		if (!sing) break; //quit when y all zero elements except possibly y[0]

		for (i=x.length;!x[i] && i>=0;i--);  //find most significant element of x
		xp=x[i];
		yp=y[i];
		A=1; B=0; C=0; D=1;
		while ((yp+C) && (yp+D)) {
			q =Math.floor((xp+A)/(yp+C));
			qp=Math.floor((xp+B)/(yp+D));
			if (q!=qp)
				break;
			t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)      
			t= B-q*D;   B=D;   D=t;
			t=xp-q*yp; xp=yp; yp=t;
		}
		if (B) {
			copy_(T,x);
			linComb_(x,y,A,B); //x=A*x+B*y
			linComb_(y,T,D,C); //y=D*y+C*T
		} else {
			mod_(x,y);
			copy_(T,x);
			copy_(x,y);
			copy_(y,T);
		} 
	}
	if (y[0]==0)
		return;
	t=modInt(x,y[0]);
	copyInt_(x,y[0]);
	y[0]=t;
	while (y[0]) {
		x[0]%=y[0];
		t=x[0]; x[0]=y[0]; y[0]=t;
	}
}

//do x=x**(-1) mod n, for bigInts x and n.
//If no inverse exists, it sets x to zero and returns 0, else it returns 1.
//The x array must be at least as large as the n array.
function inverseMod_(x,n) {
	var k=1+2*Math.max(x.length,n.length);

	if(!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist
		copyInt_(x,0);
		return 0;
	}

	if (eg_u.length!=k) {
		eg_u=new Array(k);
		eg_v=new Array(k);
		eg_A=new Array(k);
		eg_B=new Array(k);
		eg_C=new Array(k);
		eg_D=new Array(k);
	}

	copy_(eg_u,x);
	copy_(eg_v,n);
	copyInt_(eg_A,1);
	copyInt_(eg_B,0);
	copyInt_(eg_C,0);
	copyInt_(eg_D,1);
	for (;;) {
		while(!(eg_u[0]&1)) {  //while eg_u is even
			halve_(eg_u);
			if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2
				halve_(eg_A);
				halve_(eg_B);      
			} else {
				add_(eg_A,n);  halve_(eg_A);
				sub_(eg_B,x);  halve_(eg_B);
			}
		}

		while (!(eg_v[0]&1)) {  //while eg_v is even
			halve_(eg_v);
			if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2
				halve_(eg_C);
				halve_(eg_D);      
			} else {
				add_(eg_C,n);  halve_(eg_C);
				sub_(eg_D,x);  halve_(eg_D);
			}
		}

		if (!greater(eg_v,eg_u)) { //eg_v <= eg_u
			sub_(eg_u,eg_v);
			sub_(eg_A,eg_C);
			sub_(eg_B,eg_D);
		} else {                   //eg_v > eg_u
			sub_(eg_v,eg_u);
			sub_(eg_C,eg_A);
			sub_(eg_D,eg_B);
		}
	
		if (equalsInt(eg_u,0)) {
			if (negative(eg_C)) //make sure answer is nonnegative
				add_(eg_C,n);
			copy_(x,eg_C);

			if (!equalsInt(eg_v,1)) { //if GCD_(x,n)!=1, then there is no inverse
				copyInt_(x,0);
				return 0;
			}
			return 1;
		}
	}
}

//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse
function inverseModInt(x,n) {
	var a=1,b=0,t;
	for (;;) {
		if (x==1) return a;
		if (x==0) return 0;
		b-=a*Math.floor(n/x);
		n%=x;

		if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=
		if (n==0) return 0;
		a-=b*Math.floor(x/n);
		x%=n;
	}
}

//this deprecated function is for backward compatibility only. 
function inverseModInt_(x,n) {
	 return inverseModInt(x,n);
}


//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:
//     v = GCD_(x,y) = a*x-b*y
//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.
function eGCD_(x,y,v,a,b) {
	var g=0;
	var k=Math.max(x.length,y.length);
	if (eg_u.length!=k) {
		eg_u=new Array(k);
		eg_A=new Array(k);
		eg_B=new Array(k);
		eg_C=new Array(k);
		eg_D=new Array(k);
	}
	while(!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even
		halve_(x);
		halve_(y);
		g++;
	}
	copy_(eg_u,x);
	copy_(v,y);
	copyInt_(eg_A,1);
	copyInt_(eg_B,0);
	copyInt_(eg_C,0);
	copyInt_(eg_D,1);
	for (;;) {
		while(!(eg_u[0]&1)) {  //while u is even
			halve_(eg_u);
			if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2
				halve_(eg_A);
				halve_(eg_B);      
			} else {
				add_(eg_A,y);  halve_(eg_A);
				sub_(eg_B,x);  halve_(eg_B);
			}
		}

		while (!(v[0]&1)) {  //while v is even
			halve_(v);
			if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2
				halve_(eg_C);
				halve_(eg_D);      
			} else {
				add_(eg_C,y);  halve_(eg_C);
				sub_(eg_D,x);  halve_(eg_D);
			}
		}

		if (!greater(v,eg_u)) { //v<=u
			sub_(eg_u,v);
			sub_(eg_A,eg_C);
			sub_(eg_B,eg_D);
		} else {                //v>u
			sub_(v,eg_u);
			sub_(eg_C,eg_A);
			sub_(eg_D,eg_B);
		}
		if (equalsInt(eg_u,0)) {
			if (negative(eg_C)) {   //make sure a (C)is nonnegative
				add_(eg_C,y);
				sub_(eg_D,x);
			}
			multInt_(eg_D,-1);  ///make sure b (D) is nonnegative
			copy_(a,eg_C);
			copy_(b,eg_D);
			leftShift_(v,g);
			return;
		}
	}
}


//is bigInt x negative?
function negative(x) {
	return ((x[x.length-1]>>(bpe-1))&1);
}


//is (x << (shift*bpe)) > y?
//x and y are nonnegative bigInts
//shift is a nonnegative integer
function greaterShift(x,y,shift) {
	var i, kx=x.length, ky=y.length;
	k=((kx+shift)<ky) ? (kx+shift) : ky;
	for (i=ky-1-shift; i<kx && i>=0; i++) 
		if (x[i]>0)
			return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger
	for (i=kx-1+shift; i<ky; i++)
		if (y[i]>0)
			return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger
	for (i=k-1; i>=shift; i--)
		if      (x[i-shift]>y[i]) return 1;
		else if (x[i-shift]<y[i]) return 0;
	return 0;
}

//is x > y? (x and y both nonnegative)
function greater(x,y) {
	var i;
	var k=(x.length<y.length) ? x.length : y.length;

	for (i=x.length;i<y.length;i++)
		if (y[i])
			return 0;  //y has more digits

	for (i=y.length;i<x.length;i++)
		if (x[i])
			return 1;  //x has more digits

	for (i=k-1;i>=0;i--)
		if (x[i]>y[i])
			return 1;
		else if (x[i]<y[i])
			return 0;
	return 0;
}

//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.
//x must have at least one leading zero element.
//y must be nonzero.
//q and r must be arrays that are exactly the same length as x. (Or q can have more).
//Must have x.length >= y.length >= 2.
function divide_(x,y,q,r) {
	var kx, ky;
	var i,j,y1,y2,c,a,b;
	copy_(r,x);
	for (ky=y.length;y[ky-1]==0;ky--); //ky is number of elements in y, not including leading zeros

	//normalize: ensure the most significant element of y has its highest bit set  
	b=y[ky-1];
	for (a=0; b; a++)
		b>>=1;  
	a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element
	leftShift_(y,a);  //multiply both by 1<<a now, then divide both by that at the end
	leftShift_(r,a);

	//Rob Visser discovered a bug: the following line was originally just before the normalization.
	for (kx=r.length;r[kx-1]==0 && kx>ky;kx--); //kx is number of elements in normalized x, not including leading zeros

	copyInt_(q,0);                      // q=0
	while (!greaterShift(y,r,kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {
		subShift_(r,y,kx-ky);             //   r=r-leftShift_(y,kx-ky)
		q[kx-ky]++;                       //   q[kx-ky]++;
	}                                   // }

	for (i=kx-1; i>=ky; i--) {
		if (r[i]==y[ky-1])
			q[i-ky]=mask;
		else
			q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);    

		//The following for(;;) loop is equivalent to the commented while loop, 
		//except that the uncommented version avoids overflow.
		//The commented loop comes from HAC, which assumes r[-1]==y[-1]==0
		//  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])
		//    q[i-ky]--;    
		for (;;) {
			y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];
			c=y2>>bpe;
			y2=y2 & mask;
			y1=c+q[i-ky]*y[ky-1];
			c=y1>>bpe;
			y1=y1 & mask;

			if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i]) 
				q[i-ky]--;
			else
				break;
		}

		linCombShift_(r,y,-q[i-ky],i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)
		if (negative(r)) {
			addShift_(r,y,i-ky);         //r=r+leftShift_(y,i-ky)
			q[i-ky]--;
		}
	}

	rightShift_(y,a);  //undo the normalization step
	rightShift_(r,a);  //undo the normalization step
}

//do carries and borrows so each element of the bigInt x fits in bpe bits.
function carry_(x) {
	var i,k,c,b;
	k=x.length;
	c=0;
	for (i=0;i<k;i++) {
		c+=x[i];
		b=0;
		if (c<0) {
			b=-(c>>bpe);
			c+=b*radix;
		}
		x[i]=c & mask;
		c=(c>>bpe)-b;
	}
}

//return x mod n for bigInt x and integer n.
function modInt(x,n) {
	var i,c=0;
	for (i=x.length-1; i>=0; i--)
		c=(c*radix+x[i])%n;
	return c;
}

//convert the integer t into a bigInt with at least the given number of bits.
//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)
//Pad the array with leading zeros so that it has at least minSize elements.
//There will always be at least one leading 0 element.
function int2bigInt(t,bits,minSize) {   
	var i,k;
	k=Math.ceil(bits/bpe)+1;
	k=minSize>k ? minSize : k;
	buff=new Array(k);
	copyInt_(buff,t);
	return buff;
}

//return the bigInt given a string representation in a given base.  
//Pad the array with leading zeros so that it has at least minSize elements.
//If base=-1, then it reads in a space-separated list of array elements in decimal.
//The array will always have at least one leading zero, unless base=-1.
function str2bigInt(s,base,minSize) {
	var d, i, j, x, y, kk;
	var k=s.length;
	if (base==-1) { //comma-separated list of array elements in decimal
		x=new Array(0);
		for (;;) {
			y=new Array(x.length+1);
			for (i=0;i<x.length;i++)
				y[i+1]=x[i];
			y[0]=parseInt(s,10);
			x=y;
			d=s.indexOf(',',0);
			if (d<1) 
				break;
			s=s.substring(d+1);
			if (s.length==0)
				break;
		}
		if (x.length<minSize) {
			y=new Array(minSize);
			copy_(y,x);
			return y;
		}
		return x;
	}

	x=int2bigInt(0,base*k,0);
	for (i=0;i<k;i++) {
		d=digitsStr.indexOf(s.substring(i,i+1),0);
		if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36
			d-=26;
		if (d>=base || d<0) {   //stop at first illegal character
			break;
		}
		multInt_(x,base);
		addInt_(x,d);
	}

	for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros
	k=minSize>k+1 ? minSize : k+1;
	y=new Array(k);
	kk=k<x.length ? k : x.length;
	for (i=0;i<kk;i++)
		y[i]=x[i];
	for (;i<k;i++)
		y[i]=0;
	return y;
}

//is bigint x equal to integer y?
//y must have less than bpe bits
function equalsInt(x,y) {
	var i;
	if (x[0]!=y)
		return 0;
	for (i=1;i<x.length;i++)
		if (x[i])
			return 0;
	return 1;
}

//are bigints x and y equal?
//this works even if x and y are different lengths and have arbitrarily many leading zeros
function equals(x,y) {
	var i;
	var k=x.length<y.length ? x.length : y.length;
	for (i=0;i<k;i++)
		if (x[i]!=y[i])
			return 0;
	if (x.length>y.length) {
		for (;i<x.length;i++)
			if (x[i])
				return 0;
	} else {
		for (;i<y.length;i++)
			if (y[i])
				return 0;
	}
	return 1;
}

//is the bigInt x equal to zero?
function isZero(x) {
	var i;
	for (i=0;i<x.length;i++)
		if (x[i])
			return 0;
	return 1;
}

//convert a bigInt into a string in a given base, from base 2 up to base 95.
//Base -1 prints the contents of the array representing the number.
function bigInt2str(x,base) {
	var i,t,s="";

	if (s6.length!=x.length) 
		s6=dup(x);
	else
		copy_(s6,x);

	if (base==-1) { //return the list of array contents
		for (i=x.length-1;i>0;i--)
			s+=x[i]+',';
		s+=x[0];
	}
	else { //return it in the given base
		while (!isZero(s6)) {
			t=divInt_(s6,base);  //t=s6 % base; s6=floor(s6/base);
			s=digitsStr.substring(t,t+1)+s;
		}
	}
	if (s.length==0)
		s="0";
	return s;
}

//returns a duplicate of bigInt x
function dup(x) {
	var i;
	buff=new Array(x.length);
	copy_(buff,x);
	return buff;
}

//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).
function copy_(x,y) {
	var i;
	var k=x.length<y.length ? x.length : y.length;
	for (i=0;i<k;i++)
		x[i]=y[i];
	for (i=k;i<x.length;i++)
		x[i]=0;
}

//do x=y on bigInt x and integer y.  
function copyInt_(x,n) {
	var i,c;
	for (c=n,i=0;i<x.length;i++) {
		x[i]=c & mask;
		c>>=bpe;
	}
}

//do x=x+n where x is a bigInt and n is an integer.
//x must be large enough to hold the result.
function addInt_(x,n) {
	var i,k,c,b;
	x[0]+=n;
	k=x.length;
	c=0;
	for (i=0;i<k;i++) {
		c+=x[i];
		b=0;
		if (c<0) {
			b=-(c>>bpe);
			c+=b*radix;
		}
		x[i]=c & mask;
		c=(c>>bpe)-b;
		if (!c) return; //stop carrying as soon as the carry is zero
	}
}

//right shift bigInt x by n bits.  0 <= n < bpe.
function rightShift_(x,n) {
	var i;
	var k=Math.floor(n/bpe);
	if (k) {
		for (i=0;i<x.length-k;i++) //right shift x by k elements
			x[i]=x[i+k];
		for (;i<x.length;i++)
			x[i]=0;
		n%=bpe;
	}
	for (i=0;i<x.length-1;i++) {
		x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));
	}
	x[i]>>=n;
}

//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement
function halve_(x) {
	var i;
	for (i=0;i<x.length-1;i++) {
		x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));
	}
	x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same
}

//left shift bigInt x by n bits.
function leftShift_(x,n) {
	var i;
	var k=Math.floor(n/bpe);
	if (k) {
		for (i=x.length; i>=k; i--) //left shift x by k elements
			x[i]=x[i-k];
		for (;i>=0;i--)
			x[i]=0;  
		n%=bpe;
	}
	if (!n)
		return;
	for (i=x.length-1;i>0;i--) {
		x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));
	}
	x[i]=mask & (x[i]<<n);
}

//do x=x*n where x is a bigInt and n is an integer.
//x must be large enough to hold the result.
function multInt_(x,n) {
	var i,k,c,b;
	if (!n)
		return;
	k=x.length;
	c=0;
	for (i=0;i<k;i++) {
		c+=x[i]*n;
		b=0;
		if (c<0) {
			b=-(c>>bpe);
			c+=b*radix;
		}
		x[i]=c & mask;
		c=(c>>bpe)-b;
	}
}

//do x=floor(x/n) for bigInt x and integer n, and return the remainder
function divInt_(x,n) {
	var i,r=0,s;
	for (i=x.length-1;i>=0;i--) {
		s=r*radix+x[i];
		x[i]=Math.floor(s/n);
		r=s%n;
	}
	return r;
}

//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.
//x must be large enough to hold the answer.
function linComb_(x,y,a,b) {
	var i,c,k,kk;
	k=x.length<y.length ? x.length : y.length;
	kk=x.length;
	for (c=0,i=0;i<k;i++) {
		c+=a*x[i]+b*y[i];
		x[i]=c & mask;
		c>>=bpe;
	}
	for (i=k;i<kk;i++) {
		c+=a*x[i];
		x[i]=c & mask;
		c>>=bpe;
	}
}

//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.
//x must be large enough to hold the answer.
function linCombShift_(x,y,b,ys) {
	var i,c,k,kk;
	k=x.length<ys+y.length ? x.length : ys+y.length;
	kk=x.length;
	for (c=0,i=ys;i<k;i++) {
		c+=x[i]+b*y[i-ys];
		x[i]=c & mask;
		c>>=bpe;
	}
	for (i=k;c && i<kk;i++) {
		c+=x[i];
		x[i]=c & mask;
		c>>=bpe;
	}
}

//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.
//x must be large enough to hold the answer.
function addShift_(x,y,ys) {
	var i,c,k,kk;
	k=x.length<ys+y.length ? x.length : ys+y.length;
	kk=x.length;
	for (c=0,i=ys;i<k;i++) {
		c+=x[i]+y[i-ys];
		x[i]=c & mask;
		c>>=bpe;
	}
	for (i=k;c && i<kk;i++) {
		c+=x[i];
		x[i]=c & mask;
		c>>=bpe;
	}
}

//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.
//x must be large enough to hold the answer.
function subShift_(x,y,ys) {
	var i,c,k,kk;
	k=x.length<ys+y.length ? x.length : ys+y.length;
	kk=x.length;
	for (c=0,i=ys;i<k;i++) {
		c+=x[i]-y[i-ys];
		x[i]=c & mask;
		c>>=bpe;
	}
	for (i=k;c && i<kk;i++) {
		c+=x[i];
		x[i]=c & mask;
		c>>=bpe;
	}
}

//do x=x-y for bigInts x and y.
//x must be large enough to hold the answer.
//negative answers will be 2s complement
function sub_(x,y) {
	var i,c,k,kk;
	k=x.length<y.length ? x.length : y.length;
	for (c=0,i=0;i<k;i++) {
		c+=x[i]-y[i];
		x[i]=c & mask;
		c>>=bpe;
	}
	for (i=k;c && i<x.length;i++) {
		c+=x[i];
		x[i]=c & mask;
		c>>=bpe;
	}
}

//do x=x+y for bigInts x and y.
//x must be large enough to hold the answer.
function add_(x,y) {
	var i,c,k,kk;
	k=x.length<y.length ? x.length : y.length;
	for (c=0,i=0;i<k;i++) {
		c+=x[i]+y[i];
		x[i]=c & mask;
		c>>=bpe;
	}
	for (i=k;c && i<x.length;i++) {
		c+=x[i];
		x[i]=c & mask;
		c>>=bpe;
	}
}

//do x=x*y for bigInts x and y.  This is faster when y<x.
function mult_(x,y) {
	var i;
	if (ss.length!=2*x.length)
		ss=new Array(2*x.length);
	copyInt_(ss,0);
	for (i=0;i<y.length;i++)
		if (y[i])
			linCombShift_(ss,x,y[i],i);   //ss=1*ss+y[i]*(x<<(i*bpe))
	copy_(x,ss);
}

//do x=x mod n for bigInts x and n.
function mod_(x,n) {
	if (s4.length!=x.length)
		s4=dup(x);
	else
		copy_(s4,x);
	if (s5.length!=x.length)
		s5=dup(x);  
	divide_(s4,n,s5,x);  //x = remainder of s4 / n
}

//do x=x*y mod n for bigInts x,y,n.
//for greater speed, let y<x.
function multMod_(x,y,n) {
	var i;
	if (s0.length!=2*x.length)
		s0=new Array(2*x.length);
	copyInt_(s0,0);
	for (i=0;i<y.length;i++)
		if (y[i])
			linCombShift_(s0,x,y[i],i);   //s0=1*s0+y[i]*(x<<(i*bpe))
	mod_(s0,n);
	copy_(x,s0);
}

//do x=x*x mod n for bigInts x,n.
function squareMod_(x,n) {
	var i,j,d,c,kx,kn,k;
	for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x
	k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n
	if (s0.length!=k) 
		s0=new Array(k);
	copyInt_(s0,0);
	for (i=0;i<kx;i++) {
		c=s0[2*i]+x[i]*x[i];
		s0[2*i]=c & mask;
		c>>=bpe;
		for (j=i+1;j<kx;j++) {
			c=s0[i+j]+2*x[i]*x[j]+c;
			s0[i+j]=(c & mask);
			c>>=bpe;
		}
		s0[i+kx]=c;
	}
	mod_(s0,n);
	copy_(x,s0);
}

//return x with exactly k leading zero elements
function trim(x,k) {
	var i,y;
	for (i=x.length; i>0 && !x[i-1]; i--);
	y=new Array(i+k);
	copy_(y,x);
	return y;
}

//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.
//this is faster when n is odd.  x usually needs to have as many elements as n.
function powMod_(x,y,n) {
	var k1,k2,kn,np;
	if(s7.length!=n.length)
		s7=dup(n);

	//for even modulus, use a simple square-and-multiply algorithm,
	//rather than using the more complex Montgomery algorithm.
	if ((n[0]&1)==0) {
		copy_(s7,x);
		copyInt_(x,1);
		while(!equalsInt(y,0)) {
			if (y[0]&1)
				multMod_(x,s7,n);
			divInt_(y,2);
			squareMod_(s7,n); 
		}
		return;
	}

	//calculate np from n for the Montgomery multiplications
	copyInt_(s7,0);
	for (kn=n.length;kn>0 && !n[kn-1];kn--);
	np=radix-inverseModInt(modInt(n,radix),radix);
	s7[kn]=1;
	multMod_(x ,s7,n);   // x = x * 2**(kn*bp) mod n

	if (s3.length!=x.length)
		s3=dup(x);
	else
		copy_(s3,x);

	for (k1=y.length-1;k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y
	if (y[k1]==0) {  //anything to the 0th power is 1
		copyInt_(x,1);
		return;
	}
	for (k2=1<<(bpe-1);k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]
	for (;;) {
		if (!(k2>>=1)) {  //look at next bit of y
			k1--;
			if (k1<0) {
				mont_(x,one,n,np);
				return;
			}
			k2=1<<(bpe-1);
		}    
		mont_(x,x,n,np);

		if (k2 & y[k1]) //if next bit is a 1
			mont_(x,s3,n,np);
	}
}


//do x=x*y*Ri mod n for bigInts x,y,n, 
//  where Ri = 2**(-kn*bpe) mod n, and kn is the 
//  number of elements in the n array, not 
//  counting leading zeros.  
//x array must have at least as many elemnts as the n array
//It's OK if x and y are the same variable.
//must have:
//  x,y < n
//  n is odd
//  np = -(n^(-1)) mod radix
function mont_(x,y,n,np) {
	var i,j,c,ui,t,ks;
	var kn=n.length;
	var ky=y.length;

	if (sa.length!=kn)
		sa=new Array(kn);
		
	copyInt_(sa,0);

	for (;kn>0 && n[kn-1]==0;kn--); //ignore leading zeros of n
	for (;ky>0 && y[ky-1]==0;ky--); //ignore leading zeros of y
	ks=sa.length-1; //sa will never have more than this many nonzero elements.  

	//the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers
	for (i=0; i<kn; i++) {
		t=sa[0]+x[i]*y[0];
		ui=((t & mask) * np) & mask;  //the inner "& mask" was needed on Safari (but not MSIE) at one time
		c=(t+ui*n[0]) >> bpe;
		t=x[i];
		
		//do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed
		j=1;
		for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
										 c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
										 c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
										 c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;
										 c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }    
		for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }
		for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
										 c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
										 c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
										 c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;
										 c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }  
		for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }   
		for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }  
		sa[j-1]=c & mask;
	}

	if (!greater(n,sa))
		sub_(sa,n);
	copy_(x,sa);
}

[end]

[Csharp]
[start]
EmployeeTableAdapter adapter;
adapter = new EmployeeTableAdapter();
adapter.Connection = new System.Data.SqlClient.SqlConnection("<connection string>");

[end]

[Csharp]
[start]
private void ButtonTestClick(object sender, EventArgs e)
		{
			this.fctb.Clear();
			this.fctb.Language = Language.CSharp;
			this.fctb.AcceptsReturn = true;
			this.fctb.AutoScroll = true;
			this.fctb.BorderStyle = BorderStyle.Fixed3D;
			this.fctb.LeftPadding = 3;

			// move caret to start text
			this.fctb.Selection.Start = Place.Empty;
			this.fctb.DoCaretVisible();
			this.fctb.IsChanged = false;
			this.fctb.ClearUndo();
			this.fctb.Text = "    #region Char\r\n\r\n    /// <summary>\r\n    /// Char and style\r\n    /// </summary>\r\n    struct Char\r\n    {\r\n        public char c;\r\n        public StyleIndex style;\r\n\r\n        public Char(char c)\r\n        {\r\n            this.c = c;\r\n            style = StyleIndex.None;\r\n        }\r\n    }\r\n    #endregion\r\n";
		}
		
[end]

[Vbnet]
[start]
		#region Char

		/// <summary>
		/// Char and style
		/// </summary>
		struct Char
		{
				public char c;
				public StyleIndex style;

				public Char(char c)
				{
						this.c = c;
						style = StyleIndex.None;
				}
		}
		#endregion

[end]

[Vbnet]
[start]
		private void Button1Click(object sender, EventArgs e)
		{
			MessageBox.Show(this.PremiereCheckBoxChecked().ToString());
			this.comboBoxLangage.SelectedIndex = 0;
			this.comboBoxLangage.SelectedItem = this.CamelCase(this.RetournePremiereCheckBoxchecked().Name.Substring(8, this.RetournePremiereCheckBoxchecked().Name.Length - 8));
		}
		
[end]

[Csharp]
[start]
this.textBoxCheminSource.Text = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);

[end]

[Csharp]
[start]
using System.IO;
using System.Windows.Forms;

string appPath = Path.GetDirectoryName(Application.ExecutablePath);

[end]

[Csharp]
[start]
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Drawing.Drawing2D;

 

namespace WindowsFormsApplication12
{
		public partial class Form1 : Form
		{

				
				private Point LastPoint;
				private List<Point> pointList;
				private List<List<Point>> curveList;
				private Bitmap img;
				
						 
				private double ratio = 1F;
				private Point imgPoint;
				private Rectangle imgRect;
				private Point clickPoint;

				public Form1()
				{
						InitializeComponent();
						pointList = new List<Point>();
						curveList = new List<List<Point>>();
					
						this.pictureBox1.MouseWheel
								+= new System.Windows.Forms.MouseEventHandler(this.pictureBox1_MouseWheel);


						img = new Bitmap(WindowsFormsApplication12.Properties.Resources.hekiga);
				
						
						imgPoint = new Point(pictureBox1.Width / 2, pictureBox1.Height / 2);
						imgRect = new Rectangle(0, 0, img.Width, img.Height);
						ratio = 1.0;
						clickPoint = imgPoint;


					 
						pictureBox1.Invalidate();


				}

				private void Form1_Load(object sender, EventArgs e)
				{
						

 

				}

				private void pictureBox1_MouseClick(object sender, MouseEventArgs e)
				{
						
						if (e.Button == MouseButtons.Middle)
						{
								Image image = new Bitmap(pictureBox2.Width, pictureBox2.Height);
								Graphics g = Graphics.FromImage(image);
								g.Clear(Color.White);
								foreach (List<Point> curve in curveList)
								{
										try
										{
												g.DrawLines(Pens.Black, curve.ToArray());
										}
										catch
										{
										}
								}
								image.Save("pic.png", System.Drawing.Imaging.ImageFormat.Png);
							 
								
						}
				}
				private void pictureBox1_MouseWheel(object sender, MouseEventArgs e)
				{

						int lines = e.Delta * SystemInformation.MouseWheelScrollLines / 120;
						PictureBox pb = (PictureBox)sender;

						
						if (lines > 0)
						{
								ratio *= 2F;
								if (ratio > 100.0) ratio = 100.0;

						}
						else if (lines < 0)
						{
								ratio *= 0.5F;
								if (ratio < 1) ratio = 1;
						}
					 
						
						imgRect.Width = (int)Math.Round(img.Width * ratio);
						imgRect.Height = (int)Math.Round(img.Height * ratio);
						imgRect.X = (int)Math.Round(pb.Width / 2 - imgPoint.X * ratio);
						imgRect.Y = (int)Math.Round(pb.Height / 2 - imgPoint.Y * ratio);
						


					 
						hScrollBar1.Minimum = 0;
						hScrollBar1.Maximum = imgRect.Width - pb.Width;
						if (hScrollBar1.Minimum >= hScrollBar1.Maximum)
						{
								hScrollBar1.Value = hScrollBar1.Maximum;
						}
						else
						{
								hScrollBar1.Value = imgRect.X * (-1);
						}

						vScrollBar1.Minimum = 0;
						vScrollBar1.Maximum = imgRect.Height - pb.Height;
						if (vScrollBar1.Minimum >= vScrollBar1.Maximum)
						{
								vScrollBar1.Value = vScrollBar1.Maximum;
						}
						else
						{
								vScrollBar1.Value = imgRect.Y * (-1);
						}

 

				 
						pictureBox1.Invalidate();
				}

				private void pictureBox1_MouseDown(object sender, MouseEventArgs e)
				{
						if (e.Button != MouseButtons.Left) return;
						Cursor = Cursors.Cross;

						PictureBox pb = (PictureBox)sender;
					 
							 
								clickPoint = new Point(
										(int)Math.Round((e.X - imgRect.X) / ratio),
										(int)Math.Round((e.Y - imgRect.Y) / ratio));


								pictureBox1.Invalidate();
						
				}
				private void vScrollBar1_Scroll(object sender, ScrollEventArgs e)
				{

						imgRect.Y = vScrollBar1.Value * (-1);

					
						pictureBox1.Invalidate();


				}

				private void hScrollBar1_Scroll(object sender, ScrollEventArgs e)
				{


						imgRect.X = hScrollBar1.Value * (-1);

					 
						pictureBox1.Invalidate();
				}

				private void pictureBox1_Paint(object sender, PaintEventArgs e)
				{


						if (img != null)
						{
								
								e.Graphics.InterpolationMode =
										System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;

								
								e.Graphics.DrawImage(img, imgRect);
								pictureBox1.Focus();

						
								UpDwon.Text = ratio.ToString();
								String Msg = String.Format("{0} , {1}", clickPoint.X, clickPoint.Y);
								Position.Text = Msg;

 

						}

						foreach (List<Point> curve in curveList)
						{
								try
								{
										e.Graphics.DrawLines(Pens.Magenta, pointList.ToArray());
								}
								catch
								{
								}
						}
				}
				private void pictureBox1_MouseMove(object sender, MouseEventArgs e)
				{
					


						if (e.Button == MouseButtons.Left)
						{

								LastPoint = new Point(e.Location.X  , e.Location.Y );
								LastPoint = new Point(
										 (int)Math.Round((e.X - imgRect.X) / ratio),
										 (int)Math.Round((e.Y - imgRect.Y) / ratio));

								pointList.Add(LastPoint);
							 Draw();

						}
						else
						{
								LastPoint = e.Location;
						}

						
						pictureBox1.Invalidate();
						pictureBox2.Invalidate();
						
				}
		

				private void pictureBox2_Paint(object sender, PaintEventArgs e)
				{

						foreach (List<Point> curve in curveList)
						{
								try
								{
										e.Graphics.DrawLines(Pens.Black, curve.ToArray());
								}
								catch
								{
								}
						}
						try
						{
								e.Graphics.DrawLines(Pens.Black, pointList.ToArray());
						}
						catch
						{
						}
				}

				private void pictureBox1_MouseUp(object sender, MouseEventArgs e)
				{
				 
						if (e.Button == MouseButtons.Left)
						{
								List<Point> curve = new List<Point>();
								curve.AddRange(pointList);
								curveList.Add(curve);
								pointList.Clear();
								Draw();
								pictureBox1.Invalidate();
						}
				}
				private void Draw()
				{
					
						if (pointList.Count >= 2)
						{
							 
								using (Graphics g = Graphics.FromImage(img))
								{
										g.DrawLines(Pens.Red, pointList.ToArray());
								}
							 
						}
				}

					}
}
[end]

[Php]
[start]
<p>
<?php
		include("lang/languages.php");
		$i=0;
		while (list($key, $value) = each($languages))
		{
				if($i++)echo ' / ';
				echo '<a href="/xampp/lang.php?'.$key.'">'.$value.'</a>';
		}
?>
<p>
// "lang/languages.php"
<?
$languages['en']="English";
$languages['de']="Deutsch";
$languages['fr']="Francais";
$languages['nl']="Nederlands";
$languages['pl']="Polski";
$languages['it']="Italiano";
$languages['no']="Norwegian";
$languages['es']="Espa&ntilde;ol";
$languages['zh']="&#20013;&#25991;";
$languages['pt_br']="Portugu&ecirc;s (Brasil)";
$languages['jp']="&#26085;&#26412;&#35486;";
?>

[end]

[Csharp]
[start]
public Form1()
				{
						InitializeComponent();
						List<Personne> p = new List<Personne> { new Personne { Prénom = "Victor", Nom = "Hugo" }, new Personne { Prénom = "Jack", Nom = "London" } };
						comboBox1.DisplayMember = "NomComplet";
						comboBox1.DataSource = p;
				}
				class Personne
				{
						public string Nom {get;set;}
						public string Prénom {get;set;}
						public string NomComplet { get { return Prénom + " " + Nom; } }
				}

				private void button1_Click(object sender, EventArgs e)
				{
						var o = (Personne)comboBox1.SelectedItem;
						MessageBox.Show("Vous avez choisi " + o.Nom + ".");
				}
				
[end]

[Csharp]
[start]
namespace NumerisationRomaine
{
	using System;
	using System.Globalization;
	using System.Windows.Forms;

	public partial class FormMain : Form
	{
		private int numberToGuess = 1;

		public FormMain()
		{
			this.InitializeComponent();
		}

		private static int ConvertOneCaracterRomanToInt(string caracter)
		{
			caracter = caracter.ToUpper();
			switch (caracter)
			{
				case "M":
					return 1000;
				case "D":
					return 500;
				case "C":
					return 100;
				case "L":
					return 50;
				case "X":
					return 10;
				case "V":
					return 5;
				case "I":
					return 1;
				default:
					return 0;
			}
		}

		private void ButtonGenerateNewNumberClick(object sender, EventArgs e)
		{
			var rnd = new Random(DateTime.Now.Millisecond);
			this.numberToGuess = rnd.Next(1, 4999);
			this.labelToGuess.Text = this.ChangeIntToRoman(this.numberToGuess);
			this.textBox1.Text = string.Empty;
		}

		private void ButtonCheckClick(object sender, EventArgs e)
		{
			if (this.textBox1.Text == this.numberToGuess.ToString(CultureInfo.InvariantCulture))
			{
				MessageBox.Show(string.Format("Well done, you have found out the number."));
			}
			else
			{
				MessageBox.Show(string.Format("Sorry, incorrect answer\nPlease try again"));
				this.textBox1.Text = string.Empty;
				this.textBox1.Focus();
			}
		}

		private string ChangeIntToRoman(int number)
		{
			string result = string.Empty;
			var reste = number;
			do
			{
				if (reste >= 4000)
				{
					result = "MMMM";
					reste -= 4000;
				}
				else if (reste >= 3000)
				{
					result = "MMM";
					reste -= 3000;
				}
				else if (reste >= 2000)
				{
					result = "MM";
					reste -= 2000;
				}
				else if (reste >= 1900)
				{
					result += "MCM";
					reste -= 1900;
				}
				else if (reste >= 1000)
				{
					result = "M";
					reste -= 1000;
				}
				else if (reste >= 900)
				{
					result = "CM";
					reste -= 900;
				}
				else if (reste >= 500)
				{
					result += "D";
					reste -= 500;
				}
				else if (reste >= 400)
				{
					result += "CD";
					reste -= 400;
				}
				else if (reste >= 100)
				{
					result += "C";
					reste -= 100;
				}
				else if (reste >= 50)
				{
					result += "L";
					reste -= 50;
				}
				else if (reste >= 40)
				{
					result += "XL";
					reste -= 40;
				}
				else if (reste >= 10)
				{
					result += "X";
					reste -= 10;
				}
				else if (reste >= 9)
				{
					result += "IX";
					reste -= 9;
				}
				else if (reste >= 5)
				{
					result += "V";
					reste -= 5;
				}
				else if (reste >= 4)
				{
					result += "IV";
					reste -= 4;
				}
				else if (reste >= 1)
				{
					result += "I";
					reste -= 1;
				}
			}
			while (reste != 0);
			return result;
		}

		private void FormMainLoad(object sender, EventArgs e)
		{
			this.ButtonGenerateNewNumberClick(sender, e);
		}

		private void ButtonCalculateRomanNumberClick(object sender, EventArgs e)
		{
			int tmpNb;
			if (int.TryParse(this.textBoxNumberToVerify.Text, out tmpNb))
			{
				// Convert from number to roman
				this.labelToVerify.Text = this.ChangeIntToRoman(int.Parse(this.textBoxNumberToVerify.Text));
			}
			else
			{
				// Convert from roman to number
				this.textBoxNumberToVerify.Text = this.textBoxNumberToVerify.Text.ToUpper();
				this.labelToVerify.Text = this.ChangeRomanToInt(this.textBoxNumberToVerify.Text).ToString(CultureInfo.InvariantCulture);
			}
		}

		private int ChangeRomanToInt(string chaine)
		{
			if (!this.IsRomanNumber(chaine))
			{
				return 0;
			}

			var result = 0;
			var nextOperationIsMinus = false;
			var thisOperationIsMinus = false;
			for (var i = chaine.Length - 1; i >= 0; i--)
			{
				/* Pour connaître la valeur d’un nombre écrit en chiffres romains, il faut lire le nombre de droite à gauche, il suffit d'ajouter la valeur du chiffre, sauf s'il est inférieur au précédent, dans ce cas, on le soustrait. Ainsi :

				XVI = 1 + 5 + 10 = 16 ;
				XIV = 5 - 1 + 10 = 14, car I est inférieur à V ;*/
				if (i - 1 >= 0)
				{
					if (ConvertOneCaracterRomanToInt(chaine.Substring(i - 1, 1)) < ConvertOneCaracterRomanToInt(chaine.Substring(i, 1)))
					{
						nextOperationIsMinus = true;
					}
					else
					{
						nextOperationIsMinus = false;
					}

					if (thisOperationIsMinus)
					{
						result -= ConvertOneCaracterRomanToInt(chaine.Substring(i, 1));
					}
					else
					{
						result += ConvertOneCaracterRomanToInt(chaine.Substring(i, 1));
					}
				}
				else
				{
					if (nextOperationIsMinus)
					{
						result -= ConvertOneCaracterRomanToInt(chaine.Substring(i, 1));
					}
					else
					{
						result += ConvertOneCaracterRomanToInt(chaine.Substring(i, 1));
					}
				}

				thisOperationIsMinus = nextOperationIsMinus;
			}

			return result;
		}

		private bool IsRomanNumber(string chaine)
		{
			chaine = chaine.ToUpper();
			for (int i = 0; i < chaine.Length - 1; i++)
			{
				if (!"MDCLXVI".Contains(chaine.Substring(i, 1)))
				{
					return false;
				}
			}

			return true;
		}

		private void QuitterToolStripMenuItemClick(object sender, EventArgs e)
		{
			Application.Exit();
		}

		private void AproposdeToolStripMenuItemClick(object sender, EventArgs e)
		{
			var about = new AboutBox();
			about.ShowDialog();
		}
	}
}

[end]

[Vba]
[start]
Private Sub comparerFichier_Click()

Dim xlApp As New Excel.Application
Dim wkbBook1 As Workbook
Dim wkbbook2 As Workbook
Dim wksNouvelleFeuille As Worksheet

Dim nbFeuilleAComparer As Integer
Dim strFeuilleEnCours As String

Dim strExtensionFichier As String
Dim strFichierTemp1 As String
Dim strFichierTemp2 As String

Dim nbEcartValue As Long
'Dim nbEcartPolice As Integer
'Dim nbEcartTaillePolice As Integer
'Dim nbEcartCouleurPolice As Integer
'Dim nbEcartRemplissageCellule As Integer
Dim nbEcartNomFeuille As Integer
Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim l As Integer
Dim nbLigne As Integer
Dim nbColonne As Integer
Dim nbLigneBook1 As Integer
Dim nbColonneBook1 As Integer
Dim nbLigneBook2 As Integer
Dim nbColonneBook2 As Integer

Dim tabFeuilleBook1() As Variant
Dim tabFeuilleBook2() As Variant
Dim tabBookResultat() As Variant

Dim nbColonneMax As Long
Dim nbLigneMax As Long

nbEcartValue = 0
'nbEcartPolice = 0
'nbEcartTaillePolice = 0
'nbEcartCouleurPolice = 0
'nbEcartRemplissageCellule = 0
nbEcartNomFeuille = 0

'Initialisation : on efface les feuilles créées lors de la précédente comparaison
nbFeuilleAComparer = ThisWorkbook.Sheets.Count
For i = nbFeuilleAComparer To 2 Step -1
		Application.DisplayAlerts = False
		ThisWorkbook.Sheets(i).Delete
		Application.DisplayAlerts = True
Next i
'---------------------------------------------------------------------------------

'Copie des fichiers à comparer en local sous un autre nom et ouverture
strExtensionFichier = Right(ThisWorkbook.Sheets("Interface").Range("Fichier_1").Value, Len(ThisWorkbook.Sheets("Interface").Range("Fichier_1").Value) - InStr(ThisWorkbook.Sheets("Interface").Range("Fichier_1").Value, "."))
strFichierTemp1 = "C:\Temp\API_Fichier1." & strExtensionFichier

strExtensionFichier = Right(ThisWorkbook.Sheets("Interface").Range("Fichier_2").Value, Len(ThisWorkbook.Sheets("Interface").Range("Fichier_2").Value) - InStr(ThisWorkbook.Sheets("Interface").Range("Fichier_2").Value, "."))
strFichierTemp2 = "C:\Temp\API_Fichier2." & strExtensionFichier

FileCopy ThisWorkbook.Sheets("Interface").Range("Fichier_1").Value, strFichierTemp1
FileCopy ThisWorkbook.Sheets("Interface").Range("Fichier_2").Value, strFichierTemp2

xlApp.EnableEvents = False
Set wkbBook1 = xlApp.Workbooks.Open(strFichierTemp1)
Set wkbbook2 = xlApp.Workbooks.Open(strFichierTemp2)
xlApp.EnableEvents = True
'--------------------------------------------------------------------

'Récupération du nombre de ligne et de colonne max
'Cette limite différe selon .xls, .xlsm, .xlsx
nbColonneMax = wkbBook1.Sheets(1).Columns.Count
nbLigneMax = wkbBook1.Sheets(1).Rows.Count
'-------------------------------------------------

'Récupération du nb de feuille à comparer on garde le plus grand
If wkbBook1.Sheets.Count > wkbbook2.Sheets.Count Then
		nbFeuilleAComparer = wkbbook2.Sheets.Count
Else
		nbFeuilleAComparer = wkbBook1.Sheets.Count
End If
'---------------------------------------------------------------

'On parcours les feuilles
For i = 1 To nbFeuilleAComparer
		strFeuilleEnCours = wkbBook1.Sheets(i).Name
		
		'On crée la feuille que l'on compare dans l'outil de compraison apres la feuille Interface
		Set wksNouvelleFeuille = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets("Interface"))
		wksNouvelleFeuille.Name = strFeuilleEnCours

		'On test si la feuille en cours existe bien dans l'autre fichier
		If (blnExistanceFeuille(wkbbook2, strFeuilleEnCours)) Then
				'On récupére le nombre de ligne et le nombre de colonne dans les 2 feuilles à comparer
				nbLigneBook1 = intNbLigneColonneDansFeuille(wkbBook1, strFeuilleEnCours, nbLigneMax, nbColonneMax, True)
				nbLigneBook2 = intNbLigneColonneDansFeuille(wkbbook2, strFeuilleEnCours, nbLigneMax, nbColonneMax, True)
				
				nbColonneBook1 = intNbLigneColonneDansFeuille(wkbBook1, strFeuilleEnCours, nbLigneMax, nbColonneMax, False)
				nbColonneBook2 = intNbLigneColonneDansFeuille(wkbbook2, strFeuilleEnCours, nbLigneMax, nbColonneMax, False)
				
				'On garde le plus grand
				If nbLigneBook1 > nbLigneBook2 Then
						nbLigne = nbLigneBook1
				Else
					 nbLigne = nbLigneBook2
				End If
				
				If nbColonneBook1 > nbColonneBook2 Then
						nbColonne = nbColonneBook1
				Else
						nbColonne = nbColonneBook2
				End If
				
				If nbColonne > 0 And nbLigne > 0 Then
						'On stocke les données de la feuilles dans un tableau à 2 dimensions
						ReDim tabFeuilleBook1(nbLigne, nbColonne)
						ReDim tabFeuilleBook2(nbLigne, nbColonne)
						ReDim tabBookResultat(nbLigne, nbColonne)
				
						If nbColonne = 1 And nbLigne = 1 Then
												tabFeuilleBook1(1, 1) = wkbBook1.Sheets(strFeuilleEnCours).Range(wkbBook1.Sheets(strFeuilleEnCours).Cells(1, 1), wkbBook1.Sheets(strFeuilleEnCours).Cells(1, 1)).Value
												tabFeuilleBook2(1, 1) = wkbbook2.Sheets(strFeuilleEnCours).Range(wkbbook2.Sheets(strFeuilleEnCours).Cells(1, 1), wkbbook2.Sheets(strFeuilleEnCours).Cells(1, 1)).Value
												tabBookResultat(1, 1) = wkbBook1.Sheets(strFeuilleEnCours).Range(wkbbook2.Sheets(strFeuilleEnCours).Cells(1, 1), wkbBook1.Sheets(strFeuilleEnCours).Cells(1, 1)).Value
						Else
												tabFeuilleBook1 = wkbBook1.Sheets(strFeuilleEnCours).Range(wkbBook1.Sheets(strFeuilleEnCours).Cells(1, 1), wkbBook1.Sheets(strFeuilleEnCours).Cells(nbLigne, nbColonne)).Value
												tabFeuilleBook2 = wkbbook2.Sheets(strFeuilleEnCours).Range(wkbbook2.Sheets(strFeuilleEnCours).Cells(1, 1), wkbbook2.Sheets(strFeuilleEnCours).Cells(nbLigne, nbColonne)).Value
												tabBookResultat = wkbBook1.Sheets(strFeuilleEnCours).Range(wkbBook1.Sheets(strFeuilleEnCours).Cells(1, 1), wkbBook1.Sheets(strFeuilleEnCours).Cells(nbLigne, nbColonne)).Value
						End If
						
						'On parcours les tableaux de données et on stocke les diférences et les non différences dans un tableau résultat
						For k = 1 To nbLigne
								For l = 1 To nbColonne
										If CStr(tabFeuilleBook1(k, l)) <> CStr(tabFeuilleBook2(k, l)) Then
												nbEcartValue = nbEcartValue + 1
												tabBookResultat(k, l) = CStr(tabFeuilleBook1(k, l)) & " <=> " & CStr(tabFeuilleBook2(k, l))
										Else
												tabBookResultat(k, l) = tabFeuilleBook1(k, l)
										End If
								Next l
						Next k
						
						'On colle le talbeau résultat dans la feuille de l'outil de comparaison
						wksNouvelleFeuille.Range(wksNouvelleFeuille.Cells(1, 1), wksNouvelleFeuille.Cells(nbLigne, nbColonne)) = tabBookResultat
						
						'On applique une mise en forma conditionelle afin de colorier en rouge les cellules en ecart
						wksNouvelleFeuille.Range(wksNouvelleFeuille.Cells(1, 1), wksNouvelleFeuille.Cells(nbLigne, nbColonne)).FormatConditions.Add Type:=xlTextString, String:="<=>", TextOperator:=xlContains
						wksNouvelleFeuille.Range(wksNouvelleFeuille.Cells(1, 1), wksNouvelleFeuille.Cells(nbLigne, nbColonne)).FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
						wksNouvelleFeuille.Range(wksNouvelleFeuille.Cells(1, 1), wksNouvelleFeuille.Cells(nbLigne, nbColonne)).FormatConditions(1).Interior.Color = 255
						wksNouvelleFeuille.Range(wksNouvelleFeuille.Cells(1, 1), wksNouvelleFeuille.Cells(nbLigne, nbColonne)).FormatConditions(1).StopIfTrue = False
						
				End If
		Else
				nbEcartNomFeuille = nbEcartNomFeuille + 1
		End If

Next i

ThisWorkbook.Sheets("Interface").Unprotect ("")
ThisWorkbook.Sheets("Interface").Range("NBFeuilleDiff").Value = nbEcartNomFeuille
ThisWorkbook.Sheets("Interface").Range("NBDiff").Value = nbEcartValue
ThisWorkbook.Sheets("Interface").Protect ("")

wkbBook1.Close SaveChanges:=False
wkbbook2.Close SaveChanges:=False

xlApp.Quit
Set wkbBook1 = Nothing
Set wkbbook2 = Nothing
Set xlApp = Nothing

Kill strFichierTemp1
Kill strFichierTemp2


End Sub

Private Sub setFichier1_Click()
		
Dim sChemin As String

strChemin = Application.GetOpenFilename(filefilter:="Fichiers Excel, *.xlsm; *.xls; *.xlsx", Title:="Changer")
If strChemin <> "Faux" And strChemin <> "False" Then
		ActiveSheet.Unprotect ("")
		ActiveSheet.Range("Fichier_1").Value = strChemin
		ActiveSheet.Protect ("")
End If

End Sub

Private Sub setFichier2_Click()

Dim strChemin As String

strChemin = Application.GetOpenFilename(filefilter:="Fichiers Excel, *.xlsm; *.xls; *.xlsx", Title:="Changer")
If strChemin <> "Faux" And strChemin <> "False" Then
		ActiveSheet.Unprotect ("")
		ActiveSheet.Range("Fichier_2").Value = strChemin
		ActiveSheet.Protect ("")
End If

End Sub

Private Function intNbColonneDansLigne(wkbBook As Workbook, strFeuille As String, intLigne As Integer, intColonneMax As Integer) As Integer

Dim nbColonne As Integer
Dim rgeRange As Range
Dim rgeRangeResultat As Range

Set rgeRange = wkbBook.Sheets(strFeuille).Range(wkbBook.Sheets(strFeuille).Cells(1, 1), wkbBook.Sheets(strFeuille).Cells(1, intColonneMax))
Set rgeRangeResultat = rgeRange.Find(What:="*", LookIn:=xlValues, SearchOrder:=xlByRows, SearchDirection:=xlPrevious)
						
If rgeRangeResultat Is Nothing Then
		nbColonne = 0
Else
		nbColonne = rgeRangeResultat.Column
End If

Set rgeRange = Nothing
Set rgeRangeResultat = Nothing

intNbColonneDansLigne = nbColonne

End Function

Function blnExistanceFeuille(wkbBook As Workbook, strFeuille As String) As Boolean

On Error Resume Next
blnExistanceFeuille = wkbBook.Sheets(strFeuille).Index

End Function

Private Function intNbLigneColonneDansFeuille(wkbBook As Workbook, strFeuille As String, intLigneMax As Long, intColonneMax As Long, isNbLigne As Boolean) As Integer

Dim nbLigneColonne As Integer
Dim rgeRange As Range
Dim rgeRangeResultat As Range

Set rgeRange = wkbBook.Sheets(strFeuille).Range(wkbBook.Sheets(strFeuille).Cells(1, 1), wkbBook.Sheets(strFeuille).Cells(intLigneMax, intColonneMax))
Set rgeRangeResultat = rgeRange.Find(What:="*", LookIn:=xlValues, SearchOrder:=xlByRows, SearchDirection:=xlPrevious)
						
If rgeRangeResultat Is Nothing Then
		nbLigneColonne = 0
Else
		If isNbLigne Then
				nbLigneColonne = rgeRangeResultat.Row
		Else
				nbLigneColonne = rgeRangeResultat.Column
		End If
End If

Set rgeRange = Nothing
Set rgeRangeResultat = Nothing

intNbLigneColonneDansFeuille = nbLigneColonne

End Function



[end]

[Csharp]
[start]
using System;
using System.Diagnostics;
using System.ComponentModel;

namespace MyProcessSample
{
		/// <summary>
		/// Shell for the sample.
		/// </summary>
		class MyProcess
		{
				// These are the Win32 error code for file not found or access denied.
				const int ERROR_FILE_NOT_FOUND =2;
				const int ERROR_ACCESS_DENIED = 5;

				/// <summary>
				/// Prints a file with a .doc extension.
				/// </summary>
				void PrintDoc()
				{
						Process myProcess = new Process();
						
						try
						{
								// Get the path that stores user documents.
								string myDocumentsPath = 
										Environment.GetFolderPath(Environment.SpecialFolder.Personal);

								myProcess.StartInfo.FileName = myDocumentsPath + "\\MyFile.doc"; 
								myProcess.StartInfo.Verb = "Print";
								myProcess.StartInfo.CreateNoWindow = true;
								myProcess.Start();
						}
						catch (Win32Exception e)
						{
								if(e.NativeErrorCode == ERROR_FILE_NOT_FOUND)
								{
										Console.WriteLine(e.Message + ". Check the path.");
								} 

								else if (e.NativeErrorCode == ERROR_ACCESS_DENIED)
								{
										// Note that if your word processor might generate exceptions
										// such as this, which are handled first.
										Console.WriteLine(e.Message + 
												". You do not have permission to print this file.");
								}
						}
				}


				public static void Main()
				{
						MyProcess myProcess = new MyProcess();
						myProcess.PrintDoc();
				}
		}
}

// L'exemple suivant utilise la classe Process elle-même et une méthode Start statique pour démarrer un processus.

using System;
using System.Diagnostics;
using System.ComponentModel;

namespace MyProcessSample
{
		/// <summary>
		/// Shell for the sample.
		/// </summary>
		class MyProcess
		{
			 
				/// <summary>
				/// Opens the Internet Explorer application.
				/// </summary>
				void OpenApplication(string myFavoritesPath)
				{
						// Start Internet Explorer. Defaults to the home page.
						Process.Start("IExplore.exe");
										
						// Display the contents of the favorites folder in the browser.
						Process.Start(myFavoritesPath);
 
				}
				
				/// <summary>
				/// Opens urls and .html documents using Internet Explorer.
				/// </summary>
				void OpenWithArguments()
				{
						// url's are not considered documents. They can only be opened
						// by passing them as arguments.
						Process.Start("IExplore.exe", "www.northwindtraders.com");
						
						// Start a Web page using a browser associated with .html and .asp files.
						Process.Start("IExplore.exe", "C:\\myPath\\myFile.htm");
						Process.Start("IExplore.exe", "C:\\myPath\\myFile.asp");
				}
				
				/// <summary>
				/// Uses the ProcessStartInfo class to start new processes, both in a minimized 
				/// mode.
				/// </summary>
				void OpenWithStartInfo()
				{
						
						ProcessStartInfo startInfo = new ProcessStartInfo("IExplore.exe");
						startInfo.WindowStyle = ProcessWindowStyle.Minimized;
						
						Process.Start(startInfo);
						
						startInfo.Arguments = "www.northwindtraders.com";
						
						Process.Start(startInfo);
						
				}

				static void Main()
				{
										// Get the path that stores favorite links.
										string myFavoritesPath = 
										Environment.GetFolderPath(Environment.SpecialFolder.Favorites);
								
										MyProcess myProcess = new MyProcess();
				 
						myProcess.OpenApplication(myFavoritesPath);
						myProcess.OpenWithArguments();
						myProcess.OpenWithStartInfo();

							 }    
		}
}



[end]

[Csharp]
[start]
public partial class MainWindow : Window
{
		// . . .
		private async void startButton_Click(object sender, RoutedEventArgs e)
		{
				// ONE
				Task<int> getLengthTask = AccessTheWebAsync();

				// FOUR
				int contentLength = await getLengthTask;

				// SIX
				resultsTextBox.Text +=
						String.Format("\r\nLength of the downloaded string: {0}.\r\n", contentLength);
		}


		async Task<int> AccessTheWebAsync()
		{
				// TWO
				HttpClient client = new HttpClient();
				Task<string> getStringTask =
						client.GetStringAsync("http://msdn.microsoft.com");

				// THREE                 
				string urlContents = await getStringTask;

				// FIVE
				return urlContents.Length;
		}
}

[end]

[Vba]
[start]
Private Sub btnValiderAleasClim_Click()

		Dim i  As Long
		Dim dblCumulPoids As Double
		Dim intNbAlea As Integer
		Dim blnLectureSeule As Boolean
		
		On Error GoTo Erreur
		
		'Vérifier si ConfigurationApollo.xls est ouvert en lecture seule
		If blnVerifierFichierEnLectureSeul(Workbooks("ConfigurationApollo.xls").Path & "\" & "ConfigurationApollo.xls") Then
				If MsgBox("Attention ! Le fichier ConfigurationApollo est ouvert en LECTURE SEULE !!" & vbLf & _
									"Les nouvelles contraintes ne pourront pas être enregistrées." & vbLf & _
									"Voulez-vous continuez ?", _
									vbExclamation + vbYesNo + vbDefaultButton2, "Lecture Seule") = vbNo Then
						Call MsgBox("Aucune mise à jour effectuée !", vbInformation, "MAJ KO")
						Exit Sub
				End If
				blnLectureSeule = True
		Else
				blnLectureSeule = False
		End If
		
		'Test : Les poids des aléas doivent être des nombres compris entre 0 et 1
		If IsNumeric(Me.txtPoidsAlea1) And _
			 IsNumeric(Me.txtPoidsAlea2) And _
			 IsNumeric(Me.txtPoidsAlea3) And _
			 IsNumeric(Me.txtPoidsAlea4) And _
			 IsNumeric(Me.txtPoidsAlea5) And _
			 IsNumeric(Me.txtPoidsAlea6) And _
			 IsNumeric(Me.txtPoidsAlea7) And _
			 IsNumeric(Me.txtPoidsAlea8) And _
			 IsNumeric(Me.txtPoidsAlea9) And _
			 IsNumeric(Me.txtPoidsAlea10) And _
			 IsNumeric(Me.txtPoidsAlea11) Then
				'MBR BIL279 21/11/2009
				For i = 1 To 11
						If CDbl(Me.Controls.Item("txtPoidsAlea" & i).Value) > 1 Or CDbl(Me.Controls.Item("txtPoidsAlea" & i).Value) < 0 Then
								Call MsgBox("Attention ! les nombres saisis doivent être compris entre 0 et 1.", vbExclamation, "Erreur")
								Exit For
						Else
								dblCumulPoids = dblCumulPoids + CDbl(Me.Controls.Item("txtPoidsAlea" & i).Value)
								intNbAlea = i
						End If
				Next i
				
				'Test : La somme des poids des aléas doit être égale à 1
				'MBR BIL279 21/11/2009
				If intNbAlea = 11 Then
						If Round(dblCumulPoids, 5) <> 1 Then
								Call MsgBox("Somme des poids des aléas climatiques = " & dblCumulPoids & vbLf & "Attention ! la somme des poids des aléas doit être égale à 1.", vbExclamation, "Erreur")
						Else
								'Si tout est OK, stockage des infos de l'onglet "Contraintes Extra" de ConfigurationApollo.xls
								Call subRemplirAleasClimConfigAp
								If blnLectureSeule = False Then
										Workbooks("ConfigurationApollo.xls").Save
								End If
								Call MsgBox("Mise à jour effectuée !", vbInformation, "MAJ OK")
						End If
				End If
		Else
				Call MsgBox("Attention ! les valeurs saisies doivent être des nombres.", vbExclamation, "Erreur")
		End If
		Exit Sub
		
Erreur:
		Call subAjouterMessage(enuTypeMessage.Erreur, "btnValiderAleasClim_Click::" & Err.Description)
		Call subAfficherMessageLVW
End Sub

[end]

[Csharp]
[start]
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Excel = Microsoft.Office.Interop.Excel;
using System.Diagnostics;
using System.Globalization;
using System.Threading;
using System.Runtime.InteropServices;

namespace ExcelViewer
{
		public partial class ExcelViewer : Control
		{
				private Excel.Application application;
				private Process process;
				public IntPtr excelHandle;
				private bool initialized = false;
				private Excel.Workbooks workbooks;
				private Excel.Workbook workbook;
				private CultureInfo threadCulture;

				private const int SWP_FRAMECHANGED = 0x0020;
				private const int SWP_DRAWFRAME = 0x20;
				private const int SWP_NOMOVE = 0x2;
				private const int SWP_NOSIZE = 0x1;
				private const int SWP_NOZORDER = 0x4;
				private const int GWL_STYLE = (-16);
				private const int WS_CAPTION = 0xC00000;
				private const int WS_THICKFRAME = 0x40000;
				private const int WS_SIZEBOX = WS_THICKFRAME;
				private const int SWP_NOACTIVATE = 0x0010;

				[DllImport("user32.dll", SetLastError = true)]
				private static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);

				[DllImport("user32.dll", SetLastError = true)]
				public static extern int GetWindowLong(IntPtr hWnd, int nIndex);

				[DllImport("user32.dll")]
				public static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);

				[DllImport("User32", SetLastError = true)]
				public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, int uFlags);

				[DllImport("user32.dll", SetLastError = true)]
				public static extern uint GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);

				public bool Saved
				{
						get { return workbook.Saved; }
				}

				public Excel.Application Application
				{
						get { return application; }
				}

				public ExcelViewer()
				{
						this.Resize += new EventHandler(ExcelViewer_Resize);
				}

				public void Init()
				{
						threadCulture = Thread.CurrentThread.CurrentCulture;
						Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");

						application = new Excel.Application();
						application.WindowState = Excel.XlWindowState.xlNormal;
						application.Visible = true;

						excelHandle = new IntPtr(application.Hwnd);
						SetParent(excelHandle, this.Handle);
						int lngStyle = GetWindowLong(excelHandle, GWL_STYLE);
						lngStyle = lngStyle ^ WS_CAPTION;
						lngStyle = lngStyle ^ WS_SIZEBOX;
						lngStyle = lngStyle ^ WS_SIZEBOX;
						SetWindowLong(excelHandle, GWL_STYLE, lngStyle);
						SetWindowPos(excelHandle, new IntPtr(0), 0, 0, this.Width, this.Height, SWP_FRAMECHANGED);
						int pid = 0;
						GetWindowThreadProcessId(excelHandle, out pid);
						process = Process.GetProcessById(pid);
						initialized = true;
				}

				public void OpenFile(string filename)
				{
						if (!initialized)
								Init();
						workbooks = application.Workbooks;
						workbook = workbooks.Open(filename);
				}

				public void CloseExcel()
				{
						closeExcel();
				}

				private void closeExcel()
				{
						try
						{
								if (workbook != null)
								{
										workbook.Close(false);
										Marshal.ReleaseComObject(workbooks);
										Marshal.ReleaseComObject(workbook);
								}
								if (application != null)
								{
										application.Quit();
										Marshal.ReleaseComObject(application);
										process.WaitForExit();
								}
						}
						catch (Exception e) { }
						finally
						{
								workbook = null;
								workbooks = null;
								application = null;
								if (process != null && !process.HasExited)
										process.Kill();
								Thread.CurrentThread.CurrentCulture = threadCulture;
								initialized = false;
						}
				}

				public void KillExcel()
				{
						if (process != null)
								process.Kill();
				}

				public void SaveActiveWorkbook()
				{
						workbook.Save();
				}

				public void SaveActiveWorkbookAs(string filename)
				{
						workbook.SaveAs(filename);
				}

				public void SaveCopyOfActiveWorksheetAs(string filename)
				{
						workbook.SaveCopyAs(filename);
				}

				private void ExcelViewer_Resize(object sender, EventArgs e)
				{
						if (excelHandle != IntPtr.Zero)
						{
								SetWindowPos(excelHandle, new IntPtr(0), 0, 0, this.Width, this.Height, SWP_NOACTIVATE);
						}
				}

				protected override void OnHandleDestroyed(EventArgs e)
				{
						CloseExcel();
						base.OnHandleDestroyed(e);
				}
		}
}

[end]

[Csharp]
[start]
using System;
using System.Diagnostics;
using System.ComponentModel;

namespace MyProcessSample
{
		/// <summary>
		/// Shell for the sample.
		/// </summary>
		class MyProcess
		{
			 
				/// <summary>
				/// Opens the Internet Explorer application.
				/// </summary>
				void OpenApplication(string myFavoritesPath)
				{
						// Start Internet Explorer. Defaults to the home page.
						Process.Start("IExplore.exe");
										
						// Display the contents of the favorites folder in the browser.
						Process.Start(myFavoritesPath);
 
				}
				
				/// <summary>
				/// Opens urls and .html documents using Internet Explorer.
				/// </summary>
				void OpenWithArguments()
				{
						// url's are not considered documents. They can only be opened
						// by passing them as arguments.
						Process.Start("IExplore.exe", "www.northwindtraders.com");
						
						// Start a Web page using a browser associated with .html and .asp files.
						Process.Start("IExplore.exe", "C:\\myPath\\myFile.htm");
						Process.Start("IExplore.exe", "C:\\myPath\\myFile.asp");
				}
				
				/// <summary>
				/// Uses the ProcessStartInfo class to start new processes, both in a minimized 
				/// mode.
				/// </summary>
				void OpenWithStartInfo()
				{
						
						ProcessStartInfo startInfo = new ProcessStartInfo("IExplore.exe");
						startInfo.WindowStyle = ProcessWindowStyle.Minimized;
						
						Process.Start(startInfo);
						
						startInfo.Arguments = "www.northwindtraders.com";
						
						Process.Start(startInfo);
						
				}

				static void Main()
				{
										// Get the path that stores favorite links.
										string myFavoritesPath = 
										Environment.GetFolderPath(Environment.SpecialFolder.Favorites);
								
										MyProcess myProcess = new MyProcess();
				 
						myProcess.OpenApplication(myFavoritesPath);
						myProcess.OpenWithArguments();
						myProcess.OpenWithStartInfo();

							 }    
		}
}

[end]

[Csharp]
[start]
// Open Explorer.exe qith source file path
			string appPath = Path.GetDirectoryName(Application.ExecutablePath);
			Process.Start("Explorer.exe", appPath);
			
[end]

[Csharp]
[start]
private void Form1_Resize(object sender, System.EventArgs e)
{
	 Control control = (Control)sender;
				
	 // Ensure the Form remains square (Height = Width). 
	 if(control.Size.Height != control.Size.Width)
	 {
			control.Size = new Size(control.Size.Width, control.Size.Width);
	 }
}

[end]

[Csharp]
[start]
public class DemoTableLayoutPanel : TableLayoutPanel
{
		protected override void OnCellPaint(TableLayoutCellPaintEventArgs e)
		{
				base.OnCellPaint(e);

				Control c = this.GetControlFromPosition(e.Column, e.Row);

				if ( c != null )
				{
						Graphics g = e.Graphics;

						g.DrawRectangle(
								Pens.Red, 
								e.CellBounds.Location.X+1,
								e.CellBounds.Location.Y + 1,
								e.CellBounds.Width - 2, e.CellBounds.Height - 2);

						g.FillRectangle(
								Brushes.Blue, 
								e.CellBounds.Location.X + 1, 
								e.CellBounds.Location.Y + 1, 
								e.CellBounds.Width - 2, 
								e.CellBounds.Height - 2);
				};
		}

}

[end]

[Csharp]
[start]
private void Form1_FormClosing(object sender, FormClosingEventArgs e)
{
	 Properties.Settings.Default.Size = this.Size;
	 Properties.Settings.Default.Location = this.Location;
	 Properties.Settings.Default.Save();
}

private void Form1_Load(object sender, EventArgs e)
{
	 this.Size = Properties.Settings.Default.Size;
	 this.Location = Properties.Settings.Default.Location;
}

[end]

[Csharp]
[start]
		private void FormMainLoad(object sender, EventArgs e)
		{
			this.MinimumSize = new Size(990, 400);
		}
		
[end]

[Csharp]
[start]
		private void FormMainResizeEnd(object sender, EventArgs e)
		{
			if (this.Size.Height < 400 || this.Size.Width < 990)
			{
				MessageBox.Show("trop petit");
			}
		}
		
[end]

[Csharp]
[start]
// Define the border style of the form to a dialog box.
	 form1.FormBorderStyle = FormBorderStyle.FixedDialog;
	 // Set the MaximizeBox to false to remove the maximize box.
	 form1.MaximizeBox = false;
	 // Set the MinimizeBox to false to remove the minimize box.
	 form1.MinimizeBox = false;
// Set the start position of the form to the center of the screen.
	 form1.StartPosition = FormStartPosition.CenterScreen; 
// Display the form as a modal dialog box.
	 form1.ShowDialog();

[end]

[Csharp]
[start]
private void GetPixel_Example(PaintEventArgs e)
{

		// Create a Bitmap object from an image file.
		Bitmap myBitmap = new Bitmap("Grapes.jpg");

		// Get the color of a pixel within myBitmap.
		Color pixelColor = myBitmap.GetPixel(50, 50);

		// Fill a rectangle with pixelColor.
		SolidBrush pixelBrush = new SolidBrush(pixelColor);
		e.Graphics.FillRectangle(pixelBrush, 0, 0, 100, 100);
}

[end]

[Csharp]
[start]
namespace CouleurPredominante
{
	using System;
	using System.Collections.Generic;
	using System.Drawing;
	using System.Windows.Forms;

	public partial class Form1 : Form
	{
		public Form1()
		{
			this.InitializeComponent();
		}

		private void ButtonGetColorClick(object sender, EventArgs e)
		{
			// Create a Bitmap object from an image file.
			Bitmap myBitmap = new Bitmap("forest.jpg");

			// Get the color of a pixel within myBitmap.
			Color pixelColor = myBitmap.GetPixel(50, 50);
			var dico = new Dictionary<Color, int>();
			for (int i = 1; i < myBitmap.Height; i++)
			{
				for (int j = 1; j < myBitmap.Width; j++)
				{
					pixelColor = myBitmap.GetPixel(j, i);
					if (dico.ContainsKey(pixelColor))
					{
						dico[pixelColor]++;
					}
					else
					{
						dico.Add(pixelColor, 1);
					}
				}
			}

			MessageBox.Show("La couleur dominante est: " + this.CouleurDominante(dico));
		}

		private Color CouleurDominante(Dictionary<Color, int> dic)
		{
			Color result = new Color();
			int plusGrandNombre = 0;
			foreach (var item in dic)
			{
				if (item.Value > plusGrandNombre)
				{
					plusGrandNombre = item.Value;
					result = item.Key;
				}
			}

			return result;
		}
	}
}

[end]

[Csharp]
[start]
myDictionary.Sort((firstPair,nextPair) =>
		{
				if (!firstPair.Key.Equals(secondPair.Key) {
						return firstPair.Key.CompareTo(nextPair.Key);
				}
				return firstPair.Value.CompareTo(nextPair.Value);
		}
);

[end]

[Csharp]
[start]
using System.Linq;
IOrderedEnumerable<KeyValuePair<TKey, TValue>> sortedCollection = myDictionary
										.OrderByDescending(x => x.Value)
										.ThenByDescending(x => x.Key);


[end]

[Csharp]
[start]
private Rectangle RcDraw;
				private float PenWidth = 5;

				private void Form1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
				{

						// Determine the initial rectangle coordinates...

						RcDraw.X = e.X;
						RcDraw.Y = e.Y;
				
				}

				private void Form1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
				{

						// Determine the width and height of the rectangle...

						if(e.X < RcDraw.X)
						{
								RcDraw.Width = RcDraw.X - e.X;
								RcDraw.X = e.X;
						}
						else
						{
								RcDraw.Width = e.X - RcDraw.X;
						}

						if(e.Y < RcDraw.Y)
						{
								RcDraw.Height = RcDraw.Y - e.Y;
								RcDraw.Y = e.Y;
						}
						else
						{
								RcDraw.Height = e.Y - RcDraw.Y;
						}

						// Force a repaint of the region occupied by the rectangle...

						this.Invalidate(RcDraw);
				
				}

				private void Form1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
				{

						// Draw the rectangle...

						e.Graphics.DrawRectangle(new Pen(Color.Blue, PenWidth), RcDraw);
						
				}
				
[end]

[Csharp]
[start]
// This example creates a PictureBox control on the form and draws to it.
// This example assumes that the Form_Load event handler method is
// connected to the Load event of the form.

private PictureBox pictureBox1 = new PictureBox();
private void Form1_Load(object sender, System.EventArgs e)
{
		// Dock the PictureBox to the form and set its background to white.
		pictureBox1.Dock = DockStyle.Fill;
		pictureBox1.BackColor = Color.White;
		// Connect the Paint event of the PictureBox to the event handler method.
		pictureBox1.Paint += new System.Windows.Forms.PaintEventHandler(this.pictureBox1_Paint);

		// Add the PictureBox control to the Form.
		this.Controls.Add(pictureBox1);
}

private void pictureBox1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
{
		// Create a local version of the graphics object for the PictureBox.
		Graphics g = e.Graphics;

		// Draw a string on the PictureBox.
		g.DrawString("This is a diagonal line drawn on the control",
				new Font("Arial",10), System.Drawing.Brushes.Blue, new Point(30,30));
		// Draw a line in the PictureBox.
		g.DrawLine(System.Drawing.Pens.Red, pictureBox1.Left, pictureBox1.Top,
				pictureBox1.Right, pictureBox1.Bottom);
}
		
[end]

[Csharp]
[start]
void Test()
		{
				Bitmap bmp = new Bitmap(50, 50);//you will load it from file or resource

				Color c = Color.Green;//transparent color

				//loop height and width. 
				// YOU MAY HAVE TO CONVERT IT TO Height X VerticalResolution and
				// Width X HorizontalResolution
				for (int i = 0; i < bmp.Height; i++)
				{
						for (int j = 0; j < bmp.Width; j++)
						{
								var p = bmp.GetPixel(j, i);//get pixle at point

								//if pixle color not equals transparent
								if(!c.Equals(Color.FromArgb(p.ToArgb())))
								{
										//set it to white
										bmp.SetPixel(j,i,Color.White);
								}
						}
				}
		}
		
[end]

[Csharp]
[start]
 query = "INSERT INTO adresse (rue,numero,boite,_idLocalite) 
 VALUES (@rue,@numero,@boite,@idlocalite);SELECT last_insert_id();"; 
 MySqlCommand cmd = new MySqlCommand(query, connection); 
 cmd.Parameters.AddWithValue("@rue", ad); 
 cmd.Parameters.AddWithValue("@numero", tb_numero.Text); 
 cmd.Parameters.AddWithValue("@boite", tb_boite.Text); 
 cmd.Parameters.AddWithValue("@idlocalite", cb_localite.SelectedValue);

cmd.ExecuteNonQuery();

[end]

[Vbnet]
[start]
Public Class Form1

		ReadOnly list As New ArrayList()

		Private Sub ButtonAddClick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonAdd.Click
				list.Add(monTexte.Text)
				monTexte.Clear()
				maListBox.DataSource = list.ToArray().ToList()
		End Sub

		Private Sub ButtonSaveClick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonSave.Click
				My.Settings.maListBox = list
				My.Settings.Save()
		End Sub

		Private Sub Form1Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
				maListBox.DataSource = My.Settings.maListBox.ToArray().ToList()
		End Sub
End Class

[end]

[Csharp]
[start]
 private void InitAffichageGraphique()
		{
			try
			{
				// Initialisation
				Excel.Application xlApp;
				Excel.Workbook xlWorkBook;
				Excel.Worksheet xlWorkSheet;
				object misValue = System.Reflection.Missing.Value;

				xlApp = new Excel.ApplicationClass();
				xlWorkBook = xlApp.Workbooks.Add(misValue);
				xlWorkSheet = (Excel.Worksheet) xlWorkBook.Worksheets.get_Item(1);

				// Préparer les données
				xlWorkSheet.Cells[1, 1] = "";
				xlWorkSheet.Cells[1, 2] = "Étudiant 1";
				xlWorkSheet.Cells[1, 3] = "Étudiant 2";
				xlWorkSheet.Cells[1, 4] = "Étudiant 3";

				xlWorkSheet.Cells[2, 1] = "Terme 1";
				xlWorkSheet.Cells[2, 2] = "80";
				xlWorkSheet.Cells[2, 3] = "65";
				xlWorkSheet.Cells[2, 4] = "45";

				xlWorkSheet.Cells[3, 1] = "Terme 2";
				xlWorkSheet.Cells[3, 2] = "78";
				xlWorkSheet.Cells[3, 3] = "72";
				xlWorkSheet.Cells[3, 4] = "60";

				xlWorkSheet.Cells[4, 1] = "Terme 3";
				xlWorkSheet.Cells[4, 2] = "82";
				xlWorkSheet.Cells[4, 3] = "80";
				xlWorkSheet.Cells[4, 4] = "65";

				xlWorkSheet.Cells[4, 1] = "Terme 4";
				xlWorkSheet.Cells[4, 2] = "75";
				xlWorkSheet.Cells[4, 3] = "82";
				xlWorkSheet.Cells[4, 4] = "68";

				// Initialisation du graphique
				Excel.Range chartRange;

				Excel.ChartObjects xlCharts = (Excel.ChartObjects)xlWorkSheet.ChartObjects(Type.Missing);
				Excel.ChartObject myChart = (Excel.ChartObject)xlCharts.Add(10, 80, 300, 250);
				Excel.Chart chartPage = myChart.Chart;

				chartRange = xlWorkSheet.get_Range("A1", "D5");
				chartPage.SetSourceData(chartRange, misValue);
				chartPage.ChartType = Excel.XlChartType.xlColumnClustered;

				// Transfert de l'image
				chartPage.CopyPicture();
				picGraphiqueTempsArrêt.Image = new Bitmap(Clipboard.GetImage());
				
				// Fermeture Excel
				xlWorkBook.Close(false, misValue, misValue);
				xlApp.Quit();

				// Terminaison - Laisser Excel ouvert
				System.Runtime.InteropServices.Marshal.FinalReleaseComObject(xlWorkSheet);
				xlWorkSheet = null;
				System.Runtime.InteropServices.Marshal.FinalReleaseComObject(xlWorkBook);
				xlWorkBook = null;
				System.Runtime.InteropServices.Marshal.FinalReleaseComObject(xlApp);
				xlApp = null;
				GC.Collect();
				GC.WaitForPendingFinalizers();
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message, "Fin de production", MessageBoxButtons.OK);
			}
		}
		
[end]

[Csharp]
[start]
namespace ProgressBarExample
{
	using System;
	using System.Threading;
	using System.Windows.Forms;

	public partial class Form1 : Form
	{
		// Flag that indcates if a process is running
		private bool isProcessRunning = false;

		// Auto-generated form constructor
		public Form1()
		{
			this.InitializeComponent();
		}

		// Simulates a running background process with a quantifiable 
		// indicator of progress, using the progress bar within the 
		// main form
		private void Button1Click(object sender, EventArgs e)
		{
			// If a process is already running, warn the user and cancel the operation
			if (isProcessRunning)
			{
				MessageBox.Show(string.Format("A process is already running."));
				return;
			}

			// Initialize the thread that will handle the background process
			Thread backgroundThread = new Thread(
					new ThreadStart(() =>
					{
						// Set the flag that indicates if a process is currently running
						isProcessRunning = true;

						// Iterate from 0 - 99
						// On each iteration, pause the thread for .05 seconds, then update the progress bar
						for (int n = 0; n < 100; n++)
						{
							Thread.Sleep(50);
							progressBar1.BeginInvoke(new Action(() => progressBar1.Value = n));
						}

						// Show a dialog box that confirms the process has completed
						MessageBox.Show(string.Format("Thread completed!"));

						// Reset the progress bar's value if it is still valid to do so
						if (progressBar1.InvokeRequired)
						{
							progressBar1.BeginInvoke(new Action(() => progressBar1.Value = 0));
						}

						// Reset the flag that indicates if a process is currently running
						isProcessRunning = false;
					}));

			// Start the background process thread
			backgroundThread.Start();
		}

		// Simulates a running background process with a quantifiable 
		// indicator of progress, using a seperate modal dialog containing
		// a progress bar
		private void Button2Click(object sender, EventArgs e)
		{
			// If a process is already running, warn the user and cancel the operation
			if (isProcessRunning)
			{
				MessageBox.Show(string.Format("A process is already running."));
				return;
			}

			// Initialize the dialog that will contain the progress bar
			ProgressDialog progressDialog = new ProgressDialog();

			// Initialize the thread that will handle the background process
			Thread backgroundThread = new Thread(
					new ThreadStart(() =>
					{
						// Set the flag that indicates if a process is currently running
						isProcessRunning = true;

						// Iterate from 0 - 99
						// On each iteration, pause the thread for .05 seconds, then update the dialog's progress bar
						for (int n = 0; n < 100; n++)
						{
							Thread.Sleep(50);
							progressDialog.UpdateProgress(n);
						}

						// Show a dialog box that confirms the process has completed
						MessageBox.Show(string.Format("Thread completed!"));

						// Close the dialog if it hasn't been already
						if (progressDialog.InvokeRequired)
						{
							progressDialog.BeginInvoke(new Action(() => progressDialog.Close()));
						}

						// Reset the flag that indicates if a process is currently running
						isProcessRunning = false;
					}));

			// Start the background process thread
			backgroundThread.Start();

			// Open the dialog
			progressDialog.ShowDialog();
		}

		// Simulates a running background process without a quantifiable 
		// indicator of progress, using a seperate modal dialog containing
		// a progress bar
		private void Button3Click(object sender, EventArgs e)
		{
			// If a process is already running, warn the user and cancel the operation
			if (isProcessRunning)
			{
				MessageBox.Show(string.Format("A process is already running."));
				return;
			}

			// Initialize the dialog that will contain the progress bar
			ProgressDialog progressDialog = new ProgressDialog();

			// Initialize the thread that will handle the background process
			Thread backgroundThread = new Thread(
					new ThreadStart(() =>
					{
						// Set the flag that indicates if a process is currently running
						isProcessRunning = true;

						// Set the dialog to operate in indeterminate mode
						progressDialog.SetIndeterminate(true);

						// Pause the thread for five seconds
						Thread.Sleep(5000);

						// Show a dialog box that confirms the process has completed
						MessageBox.Show(string.Format("Thread completed!"));

						// Close the dialog if it hasn't been already
						if (progressBar1.InvokeRequired)
						{
							progressDialog.BeginInvoke(new Action(() => progressDialog.Close()));
						}

						// Reset the flag that indicates if a process is currently running
						isProcessRunning = false;
					}));

			// Start the background process thread
			backgroundThread.Start();

			// Open the dialog
			progressDialog.ShowDialog();
		}
	}
}

namespace ProgressBarExample
{
	using System;
	using System.Windows.Forms;

	public partial class ProgressDialog : Form
		{
				public ProgressDialog()
				{
						this.InitializeComponent();
				}

				public void UpdateProgress(int progress)
				{
						if (progressBar1.InvokeRequired)
						{
							progressBar1.BeginInvoke(new Action(() => progressBar1.Value = progress));
						}
						else
						{
							progressBar1.Value = progress;
						}
				}

				public void SetIndeterminate(bool isIndeterminate)
				{
						if (progressBar1.InvokeRequired)
						{
								progressBar1.BeginInvoke(new Action(() =>
										{
												if (isIndeterminate)
												{
													progressBar1.Style = ProgressBarStyle.Marquee;
												}
												else
												{
													progressBar1.Style = ProgressBarStyle.Blocks;
												}
										}));
						}
						else
						{
								if (isIndeterminate)
								{
									progressBar1.Style = ProgressBarStyle.Marquee;
								}
								else
								{
									progressBar1.Style = ProgressBarStyle.Blocks;
								}
						}
				}
		}
}

[end]

[Csharp]
[start]
namespace ConsoleApplicationThreadDemo1
{
	using System;
	using System.Globalization;
	using System.Threading;

	class Program
	{
		public static void Main()
		{
			var workerThread = new Thread(Job1);
			workerThread.Start();
			Console.WriteLine("job1 started");

			var workerThread2 = new Thread(Job2WithParameter);
			workerThread2.Start(10);
			Console.ReadLine();
		}

		public static void Job1()
		{
			for (int i = 0; i < 10; i++)
			{
				Console.WriteLine(i.ToString(CultureInfo.InvariantCulture));
			}
		}

		public static void Job2WithParameter(object value)
		{
			for (int i = 100; i < 100 + (int)value; i++)
			{
				Console.WriteLine(i.ToString(CultureInfo.InvariantCulture));
			}
		}
	}
}

[end]

[Csharp]
[start]
using System;
using System.Threading;

public class Work
{
		public static void Main()
		{
				// To start a thread using a shared thread procedure, use
				// the class name and method name when you create the 
				// ParameterizedThreadStart delegate. C# infers the 
				// appropriate delegate creation syntax:
				//    new ParameterizedThreadStart(Work.DoWork)
				//
				Thread newThread = new Thread(Work.DoWork);

				// Use the overload of the Start method that has a
				// parameter of type Object. You can create an object that
				// contains several pieces of data, or you can pass any 
				// reference type or value type. The following code passes
				// the integer value 42.
				//
				newThread.Start(42);

				// To start a thread using an instance method for the thread 
				// procedure, use the instance variable and method name when 
				// you create the ParameterizedThreadStart delegate. C# infers 
				// the appropriate delegate creation syntax:
				//    new ParameterizedThreadStart(w.DoMoreWork)
				//
			 Work w = new Work();
				newThread = new Thread(w.DoMoreWork);

				// Pass an object containing data for the thread.
				//
				newThread.Start("The answer.");
		}

		public static void DoWork(object data)
		{
				Console.WriteLine("Static thread procedure. Data='{0}'",
						data);
		}

		public void DoMoreWork(object data)
		{
				Console.WriteLine("Instance thread procedure. Data='{0}'",
						data);
		}
}

/* This code example produces the following output (the order 
	 of the lines might vary):

Static thread procedure. Data='42'
Instance thread procedure. Data='The answer'
*/

[end]

[Csharp]
[start]
using System.Threading;

// Code

ParameterizedThreadStart start = new ParameterizedThreadStart(WorkerMethod);
Thread thread = new Thread(start);
thread.IsBackground = true;
thread.Start("Write this");

// Worker method

private static void WorkerMethod(object value)
{
		for (int i = 0; i < 100; ++i)
		{
				Console.WriteLine(value);
				Thread.Sleep(10);
		}
}

[end]

[Csharp]
[start]
using System.Threading;

// Code
// Terminate a thread
Thread thread = Thread.CurrentThread;
thread.Abort();

// How to find out whether thread is alive
bool isAlive = thread.IsAlive;

// How to find out whether thread belongs to the managed thread pool
bool isThreadPoolThread = thread.IsThreadPoolThread;

// How to get/set thread to background
// set
thread.IsBackground = true;

// get
bool isBackground = thread.IsBackground;

// How to get thread state
ThreadState state = thread.ThreadState;

Console.WriteLine(state);

// How to get/set thread priority
// set
thread.Priority = ThreadPriority.Highest;

// get
ThreadPriority priority = thread.Priority;

Console.WriteLine(priority);

// How to get/set thread name
// set thread name
thread.Name = "Test";

// get thread name
string threadName = thread.Name;

Console.WriteLine(threadName);

// How to sleep/suspend thread
int miliseconds = 1000;
Thread.Sleep(miliseconds);

// How to exchange objects as an atomic operation
var i = 100; // can be double, float, int, IntPtr, long and object

Interlocked.Exchange(ref i, 30);

Console.WriteLine(i);

// taken from http://www.csharpdeveloping.net/Snippets/Threading

[end]

[Csharp]
[start]
// Form1 

private void listViewSample_ColumnClick(object sender, ColumnClickEventArgs e)
{
		ItemComparer sorter = listViewSample.ListViewItemSorter as ItemComparer;
		if (sorter == null)
		{
				sorter = new ItemComparer(e.Column);
				sorter.Order = SortOrder.Ascending;
				listViewSample.ListViewItemSorter = sorter;
		}
		// if clicked column is already the column that is being sorted
		if (e.Column == sorter.Column)
		{
				// Reverse the current sort direction
				if (sorter.Order == SortOrder.Ascending)
						sorter.Order = SortOrder.Descending;
				else
						sorter.Order = SortOrder.Ascending;
		}
		else
		{
				// Set the column number that is to be sorted; default to ascending.
				sorter.Column = e.Column;
				sorter.Order = SortOrder.Ascending;
		}
		listViewSample.Sort();
}

// Class Compare

public int Compare(object a, object b)
{
		int result;
		ListViewItem itemA = a as ListViewItem;
		ListViewItem itemB = b as ListViewItem;
		if (itemA == null && itemB == null)
				result = 0;
		else if (itemA == null)
				result = -1;
		else if (itemB == null)
				result = 1;
		if (itemA == itemB)
				result = 0;
		// datetime comparison
		DateTime x1, y1;
		// Parse the two objects passed as a parameter as a DateTime.
		if (!DateTime.TryParse(itemA.SubItems[Column].Text, out x1))
				x1 = DateTime.MinValue;
		if (!DateTime.TryParse(itemB.SubItems[Column].Text, out y1))
				y1 = DateTime.MinValue;
		result = DateTime.Compare(x1, y1);
		if (x1 != DateTime.MinValue && y1 != DateTime.MinValue)
				goto done;
		//numeric comparison
		decimal x2, y2;
		if (!Decimal.TryParse(itemA.SubItems[Column].Text, out x2))
				x2 = Decimal.MinValue;
		if (!Decimal.TryParse(itemB.SubItems[Column].Text, out y2))
				y2 = Decimal.MinValue;
		result = Decimal.Compare(x2, y2);
		if (x2 != Decimal.MinValue && y2 != Decimal.MinValue)
				goto done;
		//alphabetic comparison
		result = String.Compare(itemA.SubItems[Column].Text, itemB.SubItems[Column].Text);

		done:
		// if sort order is descending.
		if (Order == SortOrder.Descending)
				// Invert the value returned by Compare.
				result *= -1;
		return result;
}


[end]

[Php]
[start]
<?php
/* NOUS PRENDRONS ICI L'EXEMPLE D'AFFICHAGE DE PHOTOS AVEC UN TABLEAU */

$nb = 3;               // Nombre d'affichages souhaitÃ©s sur une ligne
$host = "xxx";         // Serveur SQL
$login = "xxx";        // Login d'accÃ©s SQL
$pass = "xxx";         // Password d'accÃ©s SQL
$hostname = "xxx";     // Nom de la base de donnÃ©es

// connexion Ã  la bdd
$bdd = mysql_connect($host, $login, $pass);  
// selection de la table 
mysql_select_db($hostname,$bdd);
// requÃªte SQL 
$sql = "SELECT * FROM `table` ORDER BY `id` ASC";
// envoie de la requÃªte
$req = mysql_query($sql) or die('<u>Probleme SQL</u> : '.$sql.'<br>'.mysql_error
());  
// affichage des rÃ©sultats avec $nb rÃ©sultats par ligne
echo'<table>';
$i = 1;
while($resultat = mysql_fetch_array($req)) {
if($i == 1) { echo'<tr>'; }
echo'<td><img src="'.$resultat['url'].'"></img></td>';
$i++;
if($i > $nb) { echo'</tr>'; $i = 1; }
}
echo'</table>';
?>

[end]

[Php]
[start]
<?
 $requete  = "SELECT * from table";  // Prepare le requete MySql

 $ret = mysql_query($requete);
 $limit=20;   // Variable nbr d'enreg par Page...
 if($debut==""){$debut=0;}  // Initialisation de $debut ...
 $debut=$page*$limit;
 $nb_total=mysql_num_rows($ret);  // Nbr de rÃ©sultats possibles ...
 $limite=mysql_query("$requete limit $debut,$limit");

//------------------------------------------------------------------
//------------------ Pied de page ----------------------------------
//------------------------------------------------------------------

 if ($page>0) {
	$precedent=$page-1;
	echo  "<a href='page.htm?page=$precedent'>PRECEDENT</a>&nbsp;n";
	}

 $i=0;
 $j=1;

 if($nb_total>$limit) {
	while($i<($nb_total/$limit)) {
	 if($i!=$page){echo "<a href='page.htm?page=$i'>$j</a>&nbsp;";}
	 else { echo "<b>$j</b>";}
	 $i++;$j++;
	}
 }

 if($debut+$limit<$nb_total) {
	$suivant=$page+1;
	echo "<a href='page.htm?page=$suivant'>SUIVANT</a>";
 }
?>

[end]

[Php]
[start]
<?

// Vos donnÃ©es de connexion Ã  mySQL
// HOST -> Normallement c'est localhost
//LOGIN -> Votre login de connexion Ã  votre base
//PASS   -> Votre mot de passe
//BASE   -> Le nom de la base dans laquelle vous allez chercher la donnÃ©e

$db = mysql_connect('HOST', 'LOGIN', 'PASS');
mysql_select_db('BASE',$db);

//Entrez ici le nom de la table
//TABLE  -> Le nom de la table dans la laquelle vous allez chercher la donnÃ©e
$req = mysql_query('SELECT * FROM TABLE');
$res = mysql_numrows($req);

echo 'Il y a '.$res.' ligne(s) dÃ©nombrÃ©(s) dans la table Â«exempleÂ»!';

mysql_close($db);
?>

[end]

[Php]
[start]
// Pour commencer, mettez ce code dans un fichier ce nommant "fonctions.connect.php

<?php

$host_db = ""; // nom de votre serveur
$user_db = ""; // nom d'utilisateur de connexion à  votre bdd
$password_db = ""; // mot de passe de connexion à  votre bdd
$bdd_db = ""; // nom de votre bdd

function connect()
{
global $host_db,$user_db,$password_db,$bdd_db;
$connect_db = mysql_connect($host_db,$user_db,$password_db);
mysql_select_db($bdd_db,$connect_db);
return $connect_db;
}

function close()
{
global $connect_db;
mysql_close($connect_db);
}

?>

Dans chaque début de page, vous devrez inclure ce fichier en faisant :
<?php include("fonctions.connect.php"); ?>

Ensuite, quand il vous sera nécessaire de vous connecter à votre base de données
, vous faites appel à la fonction de connexion :

<?php $connect_db = connect(); ?>

et quand vous devez vous en déconnecter, vous faites appel à  la fonction de déc
onnexion :

<?php close(); ?> 

[end]

[Php]
[start]
// Cette fonction est à mettre dans un "or die()" apres une requête MySQL, elle détaille les erreurs SQL, dans quel fichier elle se trouve et à quelle ligne. 
<?php
function debug_mysql()
{
 $mail=true; // Si vous voulez qu'un mail vous soit envoyÃ© en cas d'erreur (tru
e pour oui / false pour non
 
 /* Affectation des lignes html du dÃ©bug Ã  la variable $debug */
 $debug='<div align="center"><font size="4"><u>Erreur SQL !</u></font></div><br>
';
 $debug .='A la ligne '.__LINE__.' dans le fichier '.__FILE__;
 $debug .='<br>MySQL a rÃ©pondu : '.mysql_error();
 
 echo $debug.'<br>Un mail a Ã©tÃ© envoyÃ© Ã  l\'administrateur pour corriger ce 
bug, il sera rÃ©parÃ© dans les plus brefs dÃ©lais.<br>Merci de votre comprÃ©hension.'; // Affichage de l'erreur
 
 mysql_close(); // DÃ©connexion de la BDD
 
 if($mail)
 {
	/* Envoi du mail contenant l'erreur au format html */
	$to = 'bistory1@hotmail.com'; // votre email
	$sujet ='Erreur rencontrÃ©e lors de l\'exÃ©cution de '.__FILE__; // Sujet du m
essage
	
	$from ="From: $to \r\n";
	$from .="Content-Type: text/html; charset=us-ascii\r\n"; // DÃ©finition du for
mat html
	
	if(!mail($to,$sujet,$debug,$from))
	 {
	echo 'ProblÃ¨me lors de l\'envoi du mail';
	}
 }
}
?>

[end]

[Php]
[start]
// Voila la liste de requettes les plus courantes toute pretes pour ceux qui les utilisent frequement 
// Fournis par http://www.webmasters-debutants.com 
<?php
//==============================================================================
=============================
// Schema complet d'execution des requete en PHP ===============================
=====================
//==============================================================================
==============================


//==================================================
//==== Connexion a la base de donnÃ©e ===============
//==================================================

$host="localhost";  //serveur
$login="root";    //login sql
$password="";      // mot de pass sql
$base="bdd";   // nom de la base 

mysql_connect($host,$login,$password)  or die(mysql_error()); 
mysql_select_db($base);


//==================================================
//==== Requete de selection bdd ====================
//==================================================
 $req = "SELECT * FROM $table2 WHERE  condition1= '123' AND condition2 = 'ABC' "
;
 $res = mysql_query($req) or die(mysql_error());
	if (mysql_num_rows($res) == 0){echo 'message si = 0';}
		while($A = mysql_fetch_array($res)) {echo'affichage des resultats';}

//==================================================
//==== Requete d'insertion bdd ====================
//==================================================
$names = "id, champs, champs";
$values = "id, '$champs', '$champs'";
 // lancement de la requette d'injection
 $req ="INSERT INTO $table2 (".$names.") VALUES (".$values.")";
 mysql_query($req)  or die(mysql_error());

//==================================================
//==== Requete de suppretion bdd ===================
//==================================================
$req = "DELETE FROM $table2  WHERE  condition = 'ABC' ";
$res = mysql_query($req) or die(mysql_error());

//==================================================
//==== Requete de mise a jour bdd ===================
//==================================================
$req = "UPDATE $table2 SET champs1 = 'ABC' WHERE condition1 = '123' AND conditio
n2 = 'DEF' ";
$res = mysql_query($req) or die(mysql_error());



//=========================================================================
//==== Verifie l'existence d'un element avant insertion ===================
//=========================================================================

// == on lit d'abord les enregistrement
 $req = "SELECT * FROM $table2 WHERE  condition1= '123' AND condition2 = 'ABC' "
;
 $res = mysql_query($req) or die(mysql_error());
	if (mysql_num_rows($res) == 0){// si la recherche ne renvoie rien
		//======On creer l'enregistrement ================
		$names = "id, champs, champs"; // liste des champs dans la table2
		$values = "id, '$champs', '$champs'"; // lise des valeurs de ces champs
		// lancement de la requette d'injection
		$req ="INSERT INTO $table2 (".$names.") VALUES (".$values.")";
		mysql_query($req)  or die(mysql_error());
	}else{ // sinon (l'enregistrement existe deja...)
		$req = "UPDATE $table2 SET champs1 = 'ABC' WHERE condition1 = '123' AND cond
ition2 = 'DEF' ";
		$res = mysql_query($req) or die(mysql_error());
	} // on s'arrete
		

// === Fermeture de la base de donnÃ©e
mysql_close();

[end]

[Php]
[start]
// Script permettant d'exporter une table Mysql au format CSV (séparateur ";")  
<?
// Liste les données de la table
// -------------------------------------------
$resQuery = mysql_query("SELECT * FROM table");

header("Content-Type: application/csv-tab-delimited-table");
header("Content-disposition: filename=table.csv");

if (mysql_num_rows($resQuery) != 0) {
	// titre des colonnes
	$fields = mysql_num_fields($resQuery);
	$i = 0;
	while ($i < $fields) {
		echo mysql_field_name($resQuery, $i).";";
		$i++;
	}
	echo "\n";

	// données de la table
	while ($arrSelect = mysql_fetch_array($resQuery, MYSQL_ASSOC)) {
	 foreach($arrSelect as $elem) {
		echo "$elem;";
	 }
	 echo "\n";
	}
}
?>

[end]

[Php]
[start]
// Prendre un enregistrement SQL au hasard 
<?php
mysql_query("select champ from table order by rand() limit 1");
?>

[end]

[Php]
[start]
/**
 * Fonction mysql_trace
 *
 * Permet de loguer les requÃªtes SQL dans un fichier de log
 *
 * @param string $sql      RequÃªte SQL Ã  loguer
 * @param string $logFile  Fichier de log
 *
 * @return bool  Retourne vrai ou faux en cas de probleme avec le fichier
 */
function mysql_trace($sql, $logFile = '/tmp/query.sql')
{
		if ($sql_trace == true) {
				$search  = array(CHR(9), CHR(10), CHR(11), CHR(13));
				$replace = array('', '', '', '');
				$query   = str_replace($search, $replace, $sql);
				$query   = preg_replace('/\s+/', ' ', $query);
				$fp      = @fopen($logFile, 'a+');
				
				
				if ($fp == false) {
						/**
						 * Probleme avec le fichier de destination des logs
						 */
						return false;
				} else {
						$date = date('Y-m-d H:i:s');
						fwrite($fp, '['.$date.'] : '.trim($query).';');
						fwrite($fp, CHR(10));
						fclose($fp);
						return true;
				}
		}
}

[end]

[Php]
[start]
// Comment préselectionner une valeur dans un select ? 
<?    /*retourne $operation l'id de la table operation*/ 
		 
		$query = "SELECT op_num, op_val FROM operation ORDER BY op_num"; 
		 
		mysql_connect($host, $user, $pass); 
		mysql_select_db($bdd); 
		 
		$result = mysql_query($query); 
		mysql_close(); 
		 
		 
		/*Création de la liste déroulante*/ 
		 
		echo "<select name="operation">n"; 
		while($row=mysql_fetch_row($result)) 
				{ 
				$id_op=$row[0]; 
				$op=$row[1]; 
				/*Permet le preselect si $operation est non null*/ 
				if($operation==$id_op) 
				{echo "<option selected value="$id_op">$opn";} 
				else 
				{echo "<option value="$id_op">$opn";} 
				} 
		echo "</select>n"; 
?>   

[end]

[Php]
[start]
// Permet d'effectuer une sauvegarde de la table Sql ainsi que des données la composant vers un fichier .DOC 
<?php 

// ------------------------------------------------------------------------- // 

// Sauvegarde MYSQL 'structure' et 'data'                                    // 

// ------------------------------------------------------------------------- // 

// Source: Olivier Fabre     
// Modifier par T                                                              /
/ 
// Email:  ab@overdrived.com                                                  //
 
// Web:http://www.overdrived.com                                             // 

// ------------------------------------------------------------------------- // 


/// File name : savedb.php 
/// DUMPING d'une DATABASE - STRUCTURE et DATA 
/// Script PHP realisÃ© par T 



/////////////////// 
$host   = "sql.overdrived.com";        /// NOM DU SERVEUR SQL 
$user   = "";        /// LOGIN 
$pass   = "";        /// PASS 
$db     = "overdrived.com";        /// NOM DE LA DATABASE 
$tb="0"; 
/////////////////// 

@set_time_limit(600); 

@mysql_connect($host,$user,$pass) 
		or die("Impossible de se connecter - Pb sur le 'Hostname' ou sur le 'User' "
. 
					 "ou sur le 'Password'"); 

@mysql_select_db("$db") 
		or die("Impossible de se connecter - Pb sur le 'Nom de la Data Base'"); 

if ($tb) { header("Content-disposition: filename=$tb.sql"); } 
else { echo'DATADBPHP 4 BY T website:http://www.overdrived.com';} 
function get_table_def($db, $table, $crlf) 
{ 
		global $drop; 

		$schema_create = ""; 
		if(!empty($drop)) 
				$schema_create .= "DROP TABLE IF EXISTS $table;$crlf"; 

		$schema_create .= "CREATE TABLE $table ($crlf"; 

		$result = mysql_db_query($db, "SHOW FIELDS FROM $table") or mysql_die(); 
		while($row = mysql_fetch_array($result)) 
		{ 
				$schema_create .= "   $row[Field] $row[Type]"; 

				if(isset($row["Default"]) 
					 && (!empty($row["Default"]) || $row["Default"] == "0")) 
						$schema_create .= " DEFAULT '$row[Default]'"; 
				if($row["Null"] != "YES") 
						$schema_create .= " NOT NULL"; 
				if($row["Extra"] != "") 
						$schema_create .= " $row[Extra]"; 
				$schema_create .= ",$crlf"; 
		} 
		$schema_create = ereg_replace(",".$crlf."$", "", $schema_create); 
		$result = mysql_db_query($db, "SHOW KEYS FROM $table") or mysql_die(); 
		while($row = mysql_fetch_array($result)) 
		{ 
				$kname=$row['Key_name']; 
				if(($kname != "PRIMARY") && ($row['Non_unique'] == 0)) 
						$kname="UNIQUE|$kname"; 
				if(!isset($index[$kname])) 
						$index[$kname] = array(); 
				$index[$kname][] = $row['Column_name']; 
		} 

		while(list($x, $columns) = @each($index)) 
		{ 
				$schema_create .= ",$crlf"; 
				if($x == "PRIMARY") 
						$schema_create .= " PRIMARY KEY (" . implode($columns, ", ") . ")"; 

				elseif (substr($x,0,6) == "UNIQUE") 
						$schema_create .= " UNIQUE ".substr($x,7)." (".implode($columns,", "
).")"; 
				else 
						$schema_create .= " KEY $x (" . implode($columns, ", ") . ")"; 
		} 

		$schema_create .= "$crlf)"; 
		return (stripslashes($schema_create)); 
} 

function get_table_content($db, $table, $handler) 
{ 
		$result = mysql_db_query($db, "SELECT * FROM $table") or mysql_die(); 
		$i = 0; 
		while($row = mysql_fetch_row($result)) 
		{ 
				$table_list = "("; 

				for($j=0; $j<mysql_num_fields($result);$j++) 
						$table_list .= mysql_field_name($result,$j).", "; 

				$table_list = substr($table_list,0,-2); 
				$table_list .= ")"; 

				if(isset($GLOBALS["showcolumns"])) 
						$schema_insert = "INSERT INTO $table $table_list VALUES ("; 
				else 
						$schema_insert = "INSERT INTO $table VALUES ("; 

				for($j=0; $j<mysql_num_fields($result);$j++) 
				{ 
						if(!isset($row[$j])) 
								$schema_insert .= " NULL,"; 
					 elseif($row[$j] != "") 
								$schema_insert .= " '".addslashes($row[$j])."',"; 
						else 
						$schema_insert .= " '',"; 
				} 
				$schema_insert = ereg_replace(",$", "", $schema_insert); 
				$schema_insert .= ")"; 
				$handler(trim($schema_insert)); 
				$i++; 
		} 
		return (true); 
} 

function my_handler($sql_insert) 
{ 
		global $crlf, $asfile; 

		echo "$sql_insert;$crlf"; 
} 

$crlf="\n"; 

$strTableStructure      = "Table structure for table"; 

$strDumpingData         = "Dumping data for table"; 

$tables = mysql_list_tables($db); 

$num_tables = @mysql_numrows($tables); 

$i = 0; 

while($i < $num_tables) 
{ 
		$table = mysql_tablename($tables, $i); 
		if ($tb) { 
				if ($table == $tb) { 
						print $crlf; 
						print "# --------------------------------------------------------$cr
lf"; 
						print "#$crlf"; 
						print "# $strTableStructure '$table'$crlf"; 
						print "#$crlf"; 
						print $crlf; 

						echo get_table_def($db, $table, $crlf).";$crlf$crlf"; 

						print "#$crlf"; 
						print "# $strDumpingData '$table'$crlf"; 
						print "#$crlf"; 
						print $crlf; 

						get_table_content($db, $table, "my_handler"); 

						exit ; 
				} 
		} 
		else { 
				print $crlf; 
				print "# --------------------------------------------------------$crlf";
 
				print "#$crlf"; 
				print "# $strTableStructure '$table'$crlf"; 
				print "#$crlf"; 
				print $crlf; 

				echo get_table_def($db, $table, $crlf).";$crlf$crlf"; 

				print "#$crlf"; 
				print "# $strDumpingData '$table'$crlf"; 
				print "#$crlf"; 
				print $crlf; 

				get_table_content($db, $table, "my_handler"); 
		} 

		$i++; 
} 

mysql_close(); 

?> 

[end]

[Php]
[start]
// Ce script affiche jusqu'à 30 chiffres après la virgule (réglable), supprime les zéros inutiles, rajoute un « s » à « seconde » et peut convertir le temps en millisecondes s'il y a besoin. 
<?php
/********** Version 2.1 **********/
/* Doit ABSOLUMENT Ãªtre placÃ© au tout dÃ©but de la page
	$df : Si $df=0, c'est le dÃ©but de la page, si $df=1 c'est la fin de la page/
	$maxlen : Pour choisir la longueur maximale de la chaÃ®ne/
	$maxs : Si le temps est infÃ©rieur Ã  $maxs, on le convertit en millisecondes,

	mettre -1 pour ne jamais le convertir */
function get_microtime($df,$maxlen=30,$maxs=0.001)
{
	if($df==0) $timing_start=explode(' ', microtime());
	else
	{
		$timing_stop=explode(' ', microtime());
		if($maxlen>30) $maxlen='30';
		$tps[0]=$timing_stop[0]+$timing_stop[1];
		$tps[1]=$timing_start[0]+$timing_start[1];
		$rendertime=number_format((($tps[0])-($tps[1])),$maxlen);
		/* Supression des zeros inutiles */
		$maxlen++;
		for($i=$maxlen;substr($rendertime,$i,1)=="0";$i--) 
		{
				$rendertime = substr($rendertime,0,$i);
		}
		/* Evite les erreurs */
		if($rendertime=='0.' or strstr($rendertime,','))
		{
				$rendertime='';
				for($i=0;$i<$maxlen;$i++)
				{
						if($i==1) $rendertime.='.';
						else if($i==($maxlen-1)) $rendertime.='1';
						else $rendertime.='0';
				}
		}
		/* S Ã©ventuel */
		if($rendertime<'2') $s='seconde';
		else $s = 'secondes';
		/* Conversion Ã©ventuelle en milliseconde */
		if($maxs!=-1 and $rendertime<=$maxs)
		{
				$rendertime=$rendertime*1000;
				$s='ms';
		}
		$rendertime=$rendertime.' '.$s;
		return $rendertime;
	}
}
?>


<?php
/* Exemple */

/* Doit ABSOLUMENT Ãªtre placÃ© au tout dÃ©but de la page */
get_microtime(0);
?>
Votre code ici.<br />
<?
/* Doit ABSOLUMENT Ãªtre placÃ© Ã  la fin de la page */
$rendertime=get_microtime(1,30,0.001);
echo $rendertime;
?>

[end]

[Php]
[start]
// fonction factorielle
<?php
function fact($n)
	{
		if($n === 0)
			{ 
		 return 1;
			}
		else
			{
				return $n*fact($n-1);
			}
	}
$x = 4; // On choisit une valeur pour $x 
// Donc ici $x=4
echo $x,'! = ',fact($x); // On affiche 4! = 24
?> 

[end]

[Php]
[start]
// Cryptage et decryptage d'un string avec les fonctions TripleDes 
<?
function encode($pass_str){
 $pass_coder =  mcrypt_ecb(MCRYPT_TripleDES, "Secret", $pass_str, MCRYPT_ENCRYPT
);
 return $pass_coder;
}

function decode($pass_coder){
 $pass_str =  mcrypt_ecb(MCRYPT_TripleDES, "Secret", $pass_coder, MCRYPT_DECRYPT
);
 return $pass_str;
}
?>

[end]

[Php]
[start]
// password de X caracteres aléatoirement. 
<?
function GenPassword($nb_car="8"){
	$chaine  = "aAzZeErRtTyYuUiIoOpP1523468970mMlLkK";
	$chaine .= "jJhHgGfFdDsSqQwWxXcCvVbBnN1523468970";
	while($nb_car != 0) {
		$i = rand(0,71);
		$password .= $chaine[$i];
		$nb_car --;
	}
 return $password ;
}
?>

[end]

[Php]
[start]
// Génération d'un mot de passe aléatoire 
<?
$chaine = "abBDEFcdefghijkmnPQRSTUVWXYpqrst23456789"; //String valid
srand((double)microtime()*1000000); 
for($i=0; $i<8; $i++) { //mot de passe de 8 caractères
		$pass .= $chaine[rand()%strlen($chaine)]; 
}  
?> 

[end]

[Php]
[start]
// Fonction pour générer un mot de passe valid pour les fichier .htpasswd (.htaccess) 
<?

function htpasswd($pass) { 
		$pass = crypt(trim($pass),CRYPT_STD_DES); 
		return $pass; 
} 

?>

[end]

[Php]
[start]
// Calcule la moyenne d'une serie 
<?
function moyenne() { 
 $args = func_get_args(); 
 $total = 0; 
 $somme = 0; 
	foreach ($args as $a) { 
	 $somme += somme($a); 
	 $total += count($a); 
	} 
	if ($total == 0) { return FALSE; } 
	return ($somme / $total); 
} 
?>

[end]

[Php]
[start]
				<?php
						// Include HTML_QuickForm2
						require_once 'HTML/QuickForm2.php';
						require_once 'HTML/QuickForm2/Renderer.php';
	
						// Instantiate the form, called 'E-Mail'
						$form = new HTML_QuickForm2('E-Mail', 'post', array('action' => 'contact.php'));
	
						// Default Form Options
						$form->addDataSource(new HTML_QuickForm2_DataSource_Array(array(
						'first_name'        => 'Your first name',
						'last_name'         => 'Your last name',
						'e_mail'            => 'Your e-mail address',
						'message'           => 'What do you want to tell us?'
						)));
	
						// Start with a Group Box
						$fsText = $form->addElement('fieldset')->setLabel('Send a Message to the [Your Website Name]');

						// Add the Form Elements
						$first_name = $fsText->addElement('text', 'first_name', array(), array('label' => 'First Name:'));
						$last_name = $fsText->addElement('text', 'last_name', array(), array('label' => 'Last Name:'));
						$e_mail = $fsText->addElement('text', 'e_mail', array(), array('label' => 'Your E-Mail:'));
						$message = $fsText->addElement('textarea', 'message', array('cols' => 50, 'rows' => 7), array('label' => 'Your Message:'));
						$reset = $fsText->addElement('reset', 'reset', array('value' => 'Reset Form'));
						$send = $fsText->addElement('submit', 'submit', array('value' => 'Send'));

	 
						// Add Validation
						$first_name->addRule('required', 'First Name is required', null, HTML_QuickForm2_Rule::ONBLUR_CLIENT_SERVER);
						$first_name->addRule('minlength', 'Your first name should be at least 2 characters', 2);
						$first_name->addRule('maxlength', 'Your first name should be less than 35 characters', 35);

						$last_name->addRule('required', 'Last Name is required', null, HTML_QuickForm2_Rule::ONBLUR_CLIENT_SERVER);
						$last_name->addRule('minlength', 'Your last name should be at least 2 characters', 2);
						$last_name->addRule('maxlength', 'Your last name should be less than 35 characters', 35);

						$e_mail->addRule('required', 'Your E-Mail is required', null, HTML_QuickForm2_Rule::ONBLUR_CLIENT_SERVER);
						$e_mail->addRule('email', 'Email address is invalid', null, HTML_QuickForm2_Rule::ONBLUR_CLIENT_SERVER);

						$message->addRule('required', 'A message is required', null, HTML_QuickForm2_Rule::ONBLUR_CLIENT_SERVER);
						$message->addRule('minlength', 'Your message should be at least 10 characters', 10);
						$message->addRule('maxlength', 'Your message should be less than 500 characters', 500);

						$form->addRecursiveFilter('trim');

						// Process Form
						if ($form->validate())
						{
								// if the form has been POSTed and it has been validated by the Quickform2 rules
								$posterror = false;
								// check that all form variables have been set and transferred via POST
								// arguably this step could be removed, it simply checks nothing has gone wrong and we have the form variables, via POST, that we expect
								if(isset($_POST["first_name"])) {$fname = htmlspecialchars($_POST["first_name"]);} else {$posterror = true;}
								if(isset($_POST["last_name"])) {$lname = htmlspecialchars($_POST["last_name"]);} else {$posterror = true;}
								if(isset($_POST["e_mail"])) {$from = htmlspecialchars($_POST["e_mail"]);} else {$posterror = true;}
								if(isset($_POST["message"])) {$msg = htmlspecialchars($_POST["message"]);} else {$posterror = true;}

								if($posterror)
								{
										// if the form variables have NOT been set display an error message
										// and show the form again ?>
										<div class="errmsg">
												<h3>Sorry - There was an Unexpected Error</h3>
												<p>We could not successfully retrieve the information you provided.<br />
												This could well be our fault, please do try again</p>
										</div>
										<?php $renderer = HTML_QuickForm2_Renderer::factory('default');
										echo $form->render($renderer);
								} else {
										// $posterror was false therefore we successfully got the form info
										// try and send the e-mail

										// not attempting to clean the input (sanitise and validate)
										// PEAR Mail does this automatically
										// if we don't set error reporting to E_ALL and we are using PHP 5 then we'll see lots of E_STRICT errors
										// PEAR Mail was written for PHP 4 and needs updating for PHP 5 since it makes some static method calls to non-static methods
										// http://pear.php.net/bugs/bug.php?id=18254
										error_reporting(E_ALL);
										require_once 'Mail.php';
				
										$mail = Mail::factory('mail');
										// change next line as appropriate
										$to = "WebMaster <webmaster@[yourwebsite.com]>";
										$subject = "Website Message from " . $fname . " " . $lname;
										$headers = array(
												'Content-type' => 'text/plain; charset=iso-8859-1',
												'To'           => $to,
												'From'         => $from,
												'Subject'      => $subject,
												'Reply-To'     => $from,
												'MIME-Version' => '1.0',
												'X-Mailer'     => 'PHP/'.phpversion()
										);
				
										// for Windows servers only
										// $msg = str_replace("\n.", "\n..", $msg);

										$sendsuccess = $mail->send($to, $headers, $msg);

										// we are not differentiating between mail errors and input errors (e.g. injections)
										if(PEAR::isError($sendsuccess)) {
												// mail was sent successfully, tell the user this ?>
												<div class="succmsg">
														<h3>Thanks for your message, <?php echo $fname . ' ' . $lname; ?></h3>
														<div id="msgzone">
																<div class="hdrlines">
																		<p class="hdritem">From:</p>
																		<p class="hdritem">To:</p>
																		<p class="hdritem">Subject:</p>
																</div>
																<div class="hdrdetail">
																		<p class="hdritem"><?php echo $from; ?> <span>(We will use this for replies)</span></p>
																		<!-- change next line as appropriate -->
																		<p class="hdritem">[your website name]</p>
																		<p class="hdritem"><?php echo $subject; ?></p>
																</div>
																<div class="msg">
																		<p><?php echo $msg; ?></p>
																</div>
														</div>
												</div><?php
										} else {
												// mail was not sent, tell the user this?>
												<div class="errmsg">
														<h3>Sorry - We had a problem Sending the E-Mail</h3>
														<p>This is likely to be our problem not yours, we are sorry for the inconvenience</p>
														<p>Please do try again</p>
												</div>
												<?php $renderer = HTML_QuickForm2_Renderer::factory('default');
												echo $form->render($renderer);
										}
								}
						} else {  
								// the form is not being validated, so just show it...?>
								<p>We're looking forward to hearing from you.</p>
								<?php $renderer = HTML_QuickForm2_Renderer::factory('default');
								echo $form->render($renderer);
						}
				?>

[end]

[Php]
[start]
$files = scandir("/tmp");

print_r($files);

[end]

[Ruby]
[start]
# -*- ruby -*-

# Local variables:
#  indent-tabs-mode: nil
#  ruby-indent-level: 4
# End:

# @@PLEAC@@_NAME
# @@SKIP@@ Ruby

# @@PLEAC@@_WEB
# @@SKIP@@ http://www.ruby-lang.org


# @@PLEAC@@_1.0
string = '\n'                     # two characters, \ and an n
string = 'Jon \'Maddog\' Orwant'  # literal single quotes

string = "\n"                     # a "newline" character
string = "Jon \"Maddog\" Orwant"  # literal double quotes

string = %q/Jon 'Maddog' Orwant/  # literal single quotes

string = %q[Jon 'Maddog' Orwant]  # literal single quotes
string = %q{Jon 'Maddog' Orwant}  # literal single quotes
string = %q(Jon 'Maddog' Orwant)  # literal single quotes
string = %q<Jon 'Maddog' Orwant>  # literal single quotes

a = <<"EOF"
This is a multiline here document
terminated by EOF on a line by itself
EOF


# @@PLEAC@@_1.1
value = string[offset,count]
value = string[offset..-1]

string[offset,count] = newstring
string[offset..-1]   = newtail

# in Ruby we can also specify intervals by their two offsets
value = string[offset..offs2]
string[offset..offs2] = newstring

leading, s1, s2, trailing = data.unpack("A5 x3 A8 A8 A*")

fivers = string.unpack("A5" * (string.length/5))

chars = string.unpack("A1" * string.length)

string = "This is what you have"
#        +012345678901234567890  Indexing forwards  (left to right)
#         109876543210987654321- Indexing backwards (right to left)
#          note that 0 means 10 or 20, etc. above

first  = string[0, 1]       # "T"
start  = string[5, 2]       # "is"
rest   = string[13..-1]     # "you have"
last   = string[-1, 1]      # "e"
end_   = string[-4..-1]     # "have"
piece  = string[-8, 3]      # "you"

string[5, 2] = "wasn't"     # change "is" to "wasn't"
string[-12..-1] = "ondrous" # "This wasn't wondrous"
string[0, 1] = ""           # delete first character
string[-10..-1]  = ""       # delete last 10 characters

if string[-10..-1] =~ /pattern/
		puts "Pattern matches in last 10 characters"
end

string[0, 5].gsub!(/is/, 'at')

a = "make a hat"
a[0, 1], a[-1, 1] = a[-1, 1], a[0, 1]

a = "To be or not to be"
b = a.unpack("x6 A6")

b, c = a.unpack("x6 A2 X5 A2")
puts "#{b}\n#{c}\n"

def cut2fmt(*args)
		template = ''
		lastpos  = 1
		for place in args
				template += "A" + (place - lastpos).to_s + " "
				lastpos   = place
		end
		template += "A*"
		return template
end

fmt = cut2fmt(8, 14, 20, 26, 30)


# @@PLEAC@@_1.2
# careful! "b is true" doesn't mean "b != 0" (0 is true in Ruby)
# thus no problem of "defined" later since only nil is false
# the following sets to `c' if `b' is nil or false
a = b || c

# if you need Perl's behaviour (setting to `c' if `b' is 0) the most
# effective way is to use Numeric#nonzero? (thanks to Dave Thomas!)
a = b.nonzero? || c

# you will still want to use defined? in order to test
# for scope existence of a given object
a = defined?(b) ? b : c

dir = ARGV.shift || "/tmp"


# @@PLEAC@@_1.3
v1, v2 = v2, v1

alpha, beta, production = %w(January March August)
alpha, beta, production = beta, production, alpha


# @@PLEAC@@_1.4
num = char[0]
char = num.chr

# Ruby also supports having a char from character constant
num = ?r

char = sprintf("%c", num)
printf("Number %d is character %c\n", num, num)

ascii = string.unpack("C*")
string = ascii.pack("C*")

hal = "HAL"
ascii = hal.unpack("C*")
# We can't use Array#each since we can't mutate a Fixnum
ascii.collect! { |i|
		i + 1                         # add one to each ASCII value
}                
ibm = ascii.pack("C*")
puts ibm


# @@PLEAC@@_1.5
array = string.split('')

array = string.unpack("C*")

string.scan(/./) { |b|
		# do something with b
}

string = "an apple a day"
print "unique chars are: ", string.split('').uniq.sort, "\n"

sum = 0
for ascval in string.unpack("C*") # or use Array#each for a pure OO style :)
		sum += ascval
end
puts "sum is #{sum & 0xffffffff}" # since Ruby will go Bignum if necessary

# download the following standalone program
#!/usr/bin/ruby
# slowcat - emulate a   s l o w   line printer
# usage: slowcat [-DELAY] [files ...]
# the following line with "&&" works because all strings are true
delay = ARGV[0] =~ /^-([.\d]+)/ ? ARGV.shift && $1.to_i : 1
$stdout.sync = true
while gets
		for b in split('')
				print b
				sleep(0.005 * delay)
		end
end



# @@PLEAC@@_1.6
revbytes = string.reverse

revwords = string.split(" ").reverse.join(" ")

revwords = string.split(/(\s+)/).reverse.join

# using the fact that IO is Enumerable, you can directly "select" it
long_palindromes = File.open("/usr/share/dict/words").
		select { |w| w.chomp!; w.reverse == w && w.length > 5 }


# @@PLEAC@@_1.7
while string.sub!("\t+") { ' ' * ($&.length * 8 - $`.length % 8) }
end


# @@PLEAC@@_1.8
'You owe #{debt} to me'.gsub(/\#{(\w+)}/) { eval($1) }

rows, cols = 24, 80
text = %q(I am #{rows} high and #{cols} long)
text.gsub!(/\#{(\w+)}/) { eval("#{$1}") }
puts text

'I am 17 years old'.gsub(/\d+/) { 2 * $&.to_i }


# @@PLEAC@@_1.9
e = "bo peep".upcase
e.downcase!
e.capitalize!

"thIS is a loNG liNE".gsub!(/\w+/) { $&.capitalize }


# @@PLEAC@@_1.10
"I have #{n+1} guanacos."
print "I have ", n+1, " guanacos."


# @@PLEAC@@_1.11
var = <<'EOF'.gsub(/^\s+/, '')
		your text
		goes here
EOF


# @@PLEAC@@_1.12
string = "Folding and splicing is the work of an editor,\n"+
		"not a mere collection of silicon\n"+ 
		"and\n"+
		"mobile electrons!"

def wrap(str, max_size)
		all = []
		line = ''
		for l in str.split
				if (line+l).length >= max_size
						all.push(line)
						line = ''
				end
				line += line == '' ? l : ' ' + l
		end
		all.push(line).join("\n")
end

print wrap(string, 20)
#=> Folding and 
#=> splicing is the 
#=> work of an editor, 
#=> not a mere 
#=> collection of 
#=> silicon and mobile 
#=> electrons!


# @@PLEAC@@_1.13
string = %q(Mom said, "Don't do that.")
string.gsub(/['"]/) { '\\'+$& }
string.gsub(/['"]/, '\&\&')
string.gsub(/[^A-Z]/) { '\\'+$& }
"is a test!".gsub(/\W/) { '\\'+$& }  # no function like quotemeta?


# @@PLEAC@@_1.14
string.strip!


# @@PLEAC@@_1.15
def parse_csv(text)
		new = text.scan(/"([^\"\\]*(?:\\.[^\"\\]*)*)",?|([^,]+),?|,/)
		new << nil if text[-1] == ?,
		new.flatten.compact
end  

line = %q<XYZZY,"","O'Reilly, Inc","Wall, Larry","a \"glug\" bit,",5,"Error, Core Dumped">
fields = parse_csv(line)
fields.each_with_index { |v,i|
		print "#{i} : #{v}\n";
}


# @@PLEAC@@_1.16
# Use the soundex.rb Library from Michael Neumann.
# http://www.s-direktnet.de/homepages/neumann/rb_prgs/Soundex.rb
require 'Soundex'

code = Text::Soundex.soundex(string)
codes = Text::Soundex.soundex(array)

# substitution function for getpwent():
# returns an array of user entries,
# each entry contains the username and the full name
def login_names
		result = []
		File.open("/etc/passwd") { |file|
				file.each_line { |line|
						next if line.match(/^#/)
						cols = line.split(":")
						result.push([cols[0], cols[4]])
				}
		}
		result
end

puts "Lookup user: "
user = STDIN.gets
user.chomp!
exit unless user
name_code = Text::Soundex.soundex(user)

splitter = Regexp.new('(\w+)[^,]*\b(\w+)')
for username, fullname in login_names do
		firstname, lastname = splitter.match(fullname)[1,2]
		if name_code == Text::Soundex.soundex(username)
				|| name_code == Text::Soundex.soundex(firstname)
				|| name_code == Text::Soundex.soundex(lastname)
		then
				puts "#{username}: #{firstname} #{lastname}"
		end
end


# @@PLEAC@@_1.17
# download the following standalone program
# fixstyle - switch first set of <DATA> strings to second set
#   usage: $0 [-v] [files ...]
#   -v = verbose  prints "a->b in file line N" for every change.
# If no filenames are given, than the script runs as simple filter,
# else the files are edited in place, and a safety copy
# with the exentions ".orig" is created

# Regular expressions are objects in ruby, we have control
# when we compile them, so we don't need the eval hack
# from the perl solution.
# The changer class encapsulates the regular expression
# and its substitution string
class Changer
		
		def initialize(regex, subst)
				@regex = Regexp.compile(regex)
				@subst = subst
		end
		
		def change(string)
				changed = string.gsub!(@regex, @subst)
				if changed && $verbose
						$stderr.puts("#{@regex.source} changed to #{@subst} at #{$FILENAME} line #{$.}")
				end
		end
		
end

# get the lines from the Data section at the end of the file
# and put them in the list of Changer objects
def get_subs_from_end()
		changelist = []
		DATA.each do |line|
				line.chomp!
				(pat, subst) = line.split(/\s*=>\s*/)
				if pat && subst
						changelist.push(Changer.new(pat, subst))
				end
		end
		changelist
end

changelist = get_subs_from_end()

if ARGV && ARGV[0] == "-v"
		ARGV.shift
		$verbose = true
else
		$verbose = false
end

if ARGV.length > 0
		$-i = ".orig"     # enables in-place edit mode
elsif test(?e, $stdin)
		$stderr.puts("#{$0}:Reading from stdin")
end

while line = gets()
		for changer in changelist
				changer.change(line)
		end
		puts(line)
end

__END__

# analysed  => analyzed
# build-in  => builtin
# chastized => chatis
# commandline     => command-line
# de-allocate     => deallocate
# dropin          => drop-in
# hardcode        => hard-code
# meta-data       => metadata
# multicharacter  => multi-character
# multiway        => multi-way
# non-empty       => nonempty
# non-profit      => nonprofit
# non-trappable   => nontrappable
# pre-define      => predefine
# preextend       => pre-extend
# re-compiling    => recompiling
# reenter         => re-enter
# turnkey         => turn-key



# @@PLEAC@@_1.18
# download the following standalone program
#!/usr/bin/ruby -w
# 
# psgrep - print selected lines of ps output by
#          compiling user queries into code
#-----------------------------
#% psgrep '~/sh\b/'
#-----------------------------
#% psgrep 'command =~ /sh$/'
#-----------------------------
#% psgrep 'uid < 10'
#-----------------------------
#% psgrep 'command =~ /^-/' 'tty ne "?"'
#-----------------------------
#% psgrep 'tty =~ /^[p-t]/'
#-----------------------------
#% psgrep 'uid && tty eq "?"'
#-----------------------------
#% psgrep 'size > 10 * 2**10' 'uid != 0'
#-----------------------------

class PS
		PS::Names = %w-flags uid pid ppid pri nice size
									 rss wchan stat tty time command-
		PS::Names.each {|sym| attr_accessor sym}
		attr_accessor :line
		def set_fields
				fields = line.split(" ",13)
				PS::Names.each_with_index do |sym,i|
						eval "self.#{sym} = " + 
								((0..7).include?(i) ? fields[i] : "'#{fields[i]}'")
				end
		end
end

raise <<USAGE unless ARGV.size > 0
		usage: $0 criterion ...
		 #{PS::Names.join(" ")}
		All criteria must be met for a line to be printed
USAGE

PS.class_eval <<CRITERIA 
		def is_desirable
				$_ = line
				#{ARGV.join(" and ")}
		 end
CRITERIA

ps = PS.new
File.popen("ps wwaxl") do |f|
		puts f.gets
		f.each do |ps.line|
				ps.set_fields
				print ps.line if ps.is_desirable
		end
end



# @@PLEAC@@_2.1
# Matz tells that you can use Integer() for strict checked conversion.
Integer("abc")
#=> `Integer': invalid value for Integer: "abc" (ArgumentError)
Integer("567")
#=> 567

# You may use Float() for floating point stuff
Integer("56.7")
#=> `Integer': invalid value for Integer: "56.7" (ArgumentError)
Float("56.7")
#=> 56.7

# You may also use a regexp for that
if string =~ /^[+-]?\d+$/
		p 'is an integer'
else
		p 'is not'
end

if string =~ /^-?(?:\d+(?:\.\d*)?|\.\d+)$/
		p 'is a decimal number'
else
		p 'is not'
end


# @@PLEAC@@_2.2
# equal(num1, num2, accuracy) : returns true if num1 and num2 are
#   equal to accuracy number of decimal places
def equal(i, j, a)
		sprintf("%.#{a}g", i) == sprintf("%.#{a}g", j)
end

wage = 536                        # $5.36/hour
week = 40 * wage                  # $214.40
printf("One week's wage is: \$%.2f\n", week/100.0)


# @@PLEAC@@_2.3
num.round                         # rounds to integer

a = 0.255
b = sprintf("%.2f", a)
print  "Unrounded: #{a}\nRounded: #{b}\n"
printf "Unrounded: #{a}\nRounded: %.2f\n", a

print "number\tint\tfloor\tceil\n"
a = [ 3.3 , 3.5 , 3.7, -3.3 ]
for n in a
		printf("% .1f\t% .1f\t% .1f\t% .1f\n",  # at least I don't fake my output :)
					 n, n.to_i, n.floor, n.ceil)
end


# @@PLEAC@@_2.4
def dec2bin(n)
		[n].pack("N").unpack("B32")[0].sub(/^0+(?=\d)/, '')
end

def bin2dec(n)
		[("0"*32+n.to_s)[-32..-1]].pack("B32").unpack("N")[0]
end


# @@PLEAC@@_2.5
for i in x .. y
		# i is set to every integer from x to y, inclusive
end

x.step(y,7) { |i|
		# i is set to every integer from x to y, stepsize = 7
}

print "Infancy is: "
(0..2).each { |i|
		print i, " "
}
print "\n"


# @@PLEAC@@_2.6
# We can add conversion methods to the Integer class,
# this makes a roman number just a representation for normal numbers.
class Integer
		
		@@romanlist = [["M", 1000],
									 ["CM", 900],
									 ["D",  500],
									 ["CD", 400],
									 ["C",  100],
									 ["XC",  90],
									 ["L",   50],
									 ["XL",  40],
									 ["X",   10],
									 ["IX",   9],
									 ["V",    5],
									 ["IV",   4],
									 ["I",    1]]
		
		def to_roman
				remains = self
				roman = ""
				for sym, num in @@romanlist
						while remains >= num
								remains -= num
								roman << sym
						end
				end
				roman
		end
		
		def Integer.from_roman(roman)
				ustr = roman.upcase
				sum = 0
				for entry in @@romanlist
						sym, num = entry[0], entry[1]
						while sym == ustr[0, sym.length]
								sum += num
								ustr.slice!(0, sym.length)
						end
				end
				sum
		end
		
end


roman_fifteen = 15.to_roman
puts "Roman for fifteen is #{roman_fifteen}"
i = Integer.from_roman(roman_fifteen)
puts "Converted back, #{roman_fifteen} is #{i}"

# check
for i in (1..3900)
		r = i.to_roman
		j = Integer.from_roman(r)
		if i != j
				puts "error: #{i} : #{r} - #{j}"
		end
end


# @@PLEAC@@_2.7
random = rand(y-x+1)+x

chars = ["A".."Z","a".."z","0".."9"].collect { |r| r.to_a }.join + %q(!@$%^&*)
password = (1..8).collect { chars[rand(chars.size)] }.pack("C*")


# @@PLEAC@@_2.8
srand        # uses a combination of the time, the process id, and a sequence number
srand(val)   # for repeatable behaviour


# @@PLEAC@@_2.9
# from the randomr lib: 
# http://raa.ruby-lang.org/project/randomr/
----> http://raa.ruby-lang.org/project/randomr/

require 'random/mersenne_twister'
mers = Random::MersenneTwister.new 123456789
puts mers.rand(0)    # 0.550321932544541
puts mers.rand(10)   # 2

# using online sources of random data via the realrand package:
# http://raa.ruby-lang.org/project/realrand/
# **Note**
# The following online services are used in this package:
#   http://www.random.org - source: atmospheric noise 
#   http://www.fourmilab.ch/hotbits - source: radioactive decay timings
#   http://random.hd.org - source: entropy from local and network noise
# Please visit the sites and respect the rules of each service.

require 'random/online'

generator1 = Random::RandomOrg.new
puts generator1.randbyte(5).join(",")
puts generator1.randnum(10, 1, 6).join(",")  # Roll dice 10 times.

generator2 = Random::FourmiLab.new
puts generator2.randbyte(5).join(",")
# randnum is not supported.

generator3 = Random::EntropyPool.new
puts generator3.randbyte(5).join(",")
# randnum is not supported.


# @@PLEAC@@_2.10
def gaussian_rand
		begin
				u1 = 2 * rand() - 1
				u2 = 2 * rand() - 1
				w = u1*u1 + u2*u2
		end while (w >= 1)
		w = Math.sqrt((-2*Math.log(w))/w)
		[ u2*w, u1*w ]
end

mean = 25
sdev = 2
salary = gaussian_rand[0] * sdev + mean
printf("You have been hired at \$%.2f\n", salary)


# @@PLEAC@@_2.11
def deg2rad(d)
		(d/180.0)*Math::PI
end

def rad2deg(r)
		(r/Math::PI)*180
end


# @@PLEAC@@_2.12
sin_val = Math.sin(angle)
cos_val = Math.cos(angle)
tan_val = Math.tan(angle)

# AFAIK Ruby's Math module doesn't provide acos/asin
# While we're at it, let's also define missing hyperbolic functions
module Math
		def Math.asin(x)
				atan2(x, sqrt(1 - x**2))
		end
		def Math.acos(x)
				atan2(sqrt(1 - x**2), x)
		end
		def Math.atan(x)
				atan2(x, 1)
		end
		def Math.sinh(x)
				(exp(x) - exp(-x)) / 2
		end
		def Math.cosh(x)
				(exp(x) + exp(-x)) / 2
		end
		def Math.tanh(x)
				sinh(x) / cosh(x)
		end
end

# The support for Complex numbers is not built-in
y = Math.acos(3.7)
#=> in `sqrt': square root for negative number (ArgumentError)

# There is an implementation of Complex numbers in 'complex.rb' in current
# Ruby distro, but it doesn't support atan2 with complex args, so it doesn't
# solve this problem.


# @@PLEAC@@_2.13
log_e = Math.log(val)
log_10 = Math.log10(val)

def log_base(base, val)
		Math.log(val)/Math.log(base)
end

answer = log_base(10, 10_000)
puts "log10(10,000) = #{answer}"


# @@PLEAC@@_2.14
require 'matrix.rb'

a = Matrix[[3, 2, 3], [5, 9, 8]]
b = Matrix[[4, 7], [9, 3], [8, 1]]
c = a * b

a.row_size
a.column_size

c.det
a.transpose


# @@PLEAC@@_2.15
require 'complex.rb'
require 'rational.rb'

a = Complex(3, 5)              # 3 + 5i
b = Complex(2, -2)             # 2 - 2i
puts "c = #{a*b}"

c = a * b
d = 3 + 4*Complex::I

printf "sqrt(#{d}) = %s\n", Math.sqrt(d)


# @@PLEAC@@_2.16
number = hexadecimal.hex
number = octal.oct

print "Gimme a number in decimal, octal, or hex: "
num = gets.chomp
exit unless defined?(num)
num = num.oct if num =~ /^0/  # does both oct and hex  
printf "%d %x %o\n", num, num, num

print "Enter file permission in octal: "
permissions = gets.chomp
raise "Exiting ...\n" unless defined?(permissions)
puts "The decimal value is #{permissions.oct}"


# @@PLEAC@@_2.17
def commify(n)
		n.to_s =~ /([^\.]*)(\..*)?/
		int, dec = $1.reverse, $2 ? $2 : ""
		while int.gsub!(/(,|\.|^)(\d{3})(\d)/, '\1\2,\3')
		end
		int.reverse + dec
end


# @@PLEAC@@_2.18
printf "It took %d hour%s\n", time, time == 1 ? "" : "s"

# dunno if an equivalent to Lingua::EN::Inflect exists...


# @@PLEAC@@_2.19
#-----------------------------
#!/usr/bin/ruby
# bigfact - calculating prime factors
def factorize(orig)
		factors = {}
		factors.default = 0     # return 0 instead nil if key not found in hash
		n = orig
		i = 2
		sqi = 4                 # square of i
		while sqi <= n do
				while n.modulo(i) == 0 do
						n /= i
						factors[i] += 1
						# puts "Found factor #{i}"
				end
				# we take advantage of the fact that (i +1)**2 = i**2 + 2*i +1
				sqi += 2 * i + 1
				i += 1
		end
		
		if (n != 1) && (n != orig)
				factors[n] += 1
		end
		factors
end

def printfactorhash(orig, factorcount)
		print format("%-10d ", orig)
		if factorcount.length == 0
				print "PRIME"
		else
				# sorts after number, because the hash keys are numbers
				factorcount.sort.each { |factor,exponent|
						print factor
						if exponent > 1
								print "**", exponent
						end
						print " "
				}
		end
		puts
end

for arg in ARGV
		n = arg.to_i
		mfactors = factorize(n)
		printfactorhash(n, mfactors)
end
#-----------------------------


# @@PLEAC@@_3.0
puts Time.now

print "Today is day ", Time.now.yday, " of the current year.\n"
print "Today is day ", Time.now.day, " of the current month.\n"


# @@PLEAC@@_3.1
day, month, year = Time.now.day, Time.now.month, Time.now.year
# or
day, month, year = Time.now.to_a[3..5]

tl = Time.now.localtime
printf("The current date is %04d %02d %02d\n", tl.year, tl.month, tl.day)

Time.now.localtime.strftime("%Y-%m-%d")


# @@PLEAC@@_3.2
Time.local(year, month, day, hour, minute, second).tv_sec
Time.gm(year, month, day, hour, minute, second).tv_sec


# @@PLEAC@@_3.3
sec, min, hour, day, month, year, wday, yday, isdst, zone = Time.at(epoch_secs).to_a


# @@PLEAC@@_3.4
when_ = now + difference         # now -> Time ; difference -> Numeric (delta in seconds)
then_ = now - difference


# @@PLEAC@@_3.5
bree = 361535725
nat  =  96201950

difference = bree - nat
puts "There were #{difference} seconds between Nat and Bree"

seconds    =  difference % 60
difference = (difference - seconds) / 60
minutes    =  difference % 60
difference = (difference - minutes) / 60
hours      =  difference % 24
difference = (difference - hours)   / 24
days       =  difference % 7
weeks      = (difference - days)    /  7

puts "(#{weeks} weeks, #{days} days, #{hours}:#{minutes}:#{seconds})"


# @@PLEAC@@_3.6
monthday, weekday, yearday = date.mday, date.wday, date.yday

# AFAIK the week number is not just a division since week boundaries are on sundays
weeknum = d.strftime("%U").to_i + 1

year  = 1981
month = "jun"                     # or `6' if you want to emulate a broken language
day   = 16
t = Time.mktime(year, month, day)
print "#{month}/#{day}/#{year} was a ", t.strftime("%A"), "\n"


# @@PLEAC@@_3.7
yyyy, mm, dd = $1, $2, $3 if "1998-06-25" =~ /(\d+)-(\d+)-(\d+)/

epoch_seconds = Time.mktime(yyyy, mm, dd).tv_sec

# dunno an equivalent to Date::Manip#ParseDate


# @@PLEAC@@_3.8
string = Time.at(epoch_secs)
Time.at(1234567890).gmtime        # gives: Fri Feb 13 23:31:30 UTC 2009

time = Time.mktime(1973, "jan", 18, 3, 45, 50)
print "In localtime it gives: ", time.localtime, "\n"


# @@PLEAC@@_3.9
# Ruby provides micro-seconds in Time object
Time.now.usec

# Ruby gives the seconds in floating format when substracting two Time objects
before = Time.now
line = gets
elapsed = Time.now - before
puts "You took #{elapsed} seconds."

# On my Celeron-400 with Linux-2.2.19-14mdk, average for three execs are:
#   This Ruby version:       average 0.00321 sec
#   Cookbook's Perl version: average 0.00981 sec
size = 500
number_of_times = 100
total_time = 0
number_of_times.times {
		# populate array
		array = []
		size.times { array << rand }
		# sort it
		begin_ = Time.now
		array.sort!
		time = Time.now - begin_
		total_time += time
}
printf "On average, sorting %d random numbers takes %.5f seconds\n",
		size, (total_time/Float(number_of_times))


# @@PLEAC@@_3.10
sleep(0.005)                      # Ruby is definitely not as broken as Perl :)
# (may be interrupted by sending the process a SIGALRM)


# @@PLEAC@@_3.11
#!/usr/bin/ruby -w
# hopdelta - feed mail header, produce lines
#            showing delay at each hop.
require 'time'
class MailHopDelta

		def initialize(mail)
				@head = mail.gsub(/\n\s+/,' ')
				@topline = %w-Sender Recipient Time Delta-
				@start_from = mail.match(/^From.*\@([^\s>]*)/)[1]
				@date = Time.parse(mail.match(/^Date:\s+(.*)/)[1])
		end

		def out(line)
				 "%-20.20s %-20.20s %-20.20s  %s" % line
		end

		def hop_date(day)
				day.strftime("%I:%M:%S %Y/%m/%d")
		end

		def puts_hops
				puts out(@topline) 
				puts out(['Start', @start_from, hop_date(@date),''])
				@head.split(/\n/).reverse.grep(/^Received:/).each do |hop|
						hop.gsub!(/\bon (.*?) (id.*)/,'; \1')
						whence = hop.match(/;\s+(.*)$/)[1]
						unless whence
								warn "Bad received line: #{hop}"
								next
						end
						from = $+ if hop =~ /from\s+(\S+)|\((.*?)\)/
						by   = $1 if hop =~ /by\s+(\S+\.\S+)/
						next unless now = Time.parse(whence).localtime
						delta = now - @date
						puts out([from, by, hop_date(now), hop_time(delta)])
						@date = now
				end
		end

		def hop_time(secs)
				sign = secs < 0 ? -1 : 1
				days, secs = secs.abs.divmod(60 * 60 * 24)
				hours,secs = secs.abs.divmod(60 * 60)
				mins, secs = secs.abs.divmod(60)
				rtn =  "%3ds" % [secs  * sign]
				rtn << "%3dm" % [mins  * sign] if mins  != 0
				rtn << "%3dh" % [hours * sign] if hours != 0
				rtn << "%3dd" % [days  * sign] if days  != 0 
				rtn
		end
end

$/ = ""
mail = MailHopDelta.new(ARGF.gets).puts_hops


# @@PLEAC@@_4.0
single_level = [ "this", "that", "the", "other" ]

# Ruby directly supports nested arrays
double_level = [ "this", "that", [ "the", "other" ] ]
still_single_level = [ "this", "that", [ "the", "other" ] ].flatten


# @@PLEAC@@_4.1
a = [ "quick", "brown", "fox" ]
a = %w(Why are you teasing me?)

lines = <<"END_OF_HERE_DOC".gsub(/^\s*(.+)/, '\1')
		The boy stood on the burning deck,
		It was as hot as glass.
END_OF_HERE_DOC

bigarray = IO.readlines("mydatafile").collect { |l| l.chomp }

name = "Gandalf"
banner = %Q(Speak, #{name}, and welcome!)

host_info  = `host #{his_host}`

%x(ps #{$$})

banner = 'Costs only $4.95'.split(' ')

rax = %w! ( ) < > { } [ ] !


# @@PLEAC@@_4.2
def commify_series(arr)
		return '' if not arr
		case arr.size
				when 0 then ''
				when 1 then arr[0]
				when 2 then arr.join(' and ')
				else arr[0..-2].join(', ') + ', and ' + arr[-1]
		end
end

array = [ "red", "yellow", "green" ]

print "I have ", array, " marbles\n"
# -> I have redyellowgreen marbles

# But unlike Perl:
print "I have #{array} marbles\n"
# -> I have redyellowgreen marbles
# So, needs:
print "I have #{array.join(' ')} marbles\n"
# -> I have red yellow green marbles

#!/usr/bin/ruby
# communify_series - show proper comma insertion in list output

def commify_series(arr)
		return '' if not arr
		sepchar = arr.find { |p| p =~ /,/ } ? '; ' : ', '
		case arr.size
				when 0 then ''
				when 1 then arr[0]
				when 2 then arr.join(' and ')
				else arr[0..-2].join(sepchar) + sepchar + 'and ' + arr[-1]
		end
end

lists = [
		[ 'just one thing' ],
		%w(Mutt Jeff),
		%w(Peter Paul Mary),
		[ 'To our parents', 'Mother Theresa', 'God' ],
		[ 'pastrami', 'ham and cheese', 'peanut butter and jelly', 'tuna' ],
		[ 'recycle tired, old phrases', 'ponder big, happy thoughts' ],
		[ 'recycle tired, old phrases',
			'ponder big, happy thoughts',
			'sleep and dream peacefully' ],
]

for list in lists do
		puts "The list is: #{commify_series(list)}."
end


# @@PLEAC@@_4.3
#   (note: AFAIK Ruby doesn't allow gory change of Array length)
# grow the array by assigning nil to past the end of array
ary[new_size-1] = nil
# shrink the array by slicing it down
ary.slice!(new_size..-1)
# init the array with given size
Array.new(number_of_elems)
# assign to an element past the original end enlarges the array
ary[index_new_last_elem] = value

def what_about_that_array(a)
		print "The array now has ", a.size, " elements.\n"
		# Index of last element is not really interesting in Ruby
		print "Element #3 is `#{a[3]}'.\n"
end
people = %w(Crosby Stills Nash Young)
what_about_that_array(people)


# @@PLEAC@@_4.4
# OO style
bad_users.each { |user|
		complain(user)
}
# or, functional style
for user in bad_users
		complain(user)
end

for var in ENV.keys.sort
		puts "#{var}=#{ENV[var]}"
end

for user in all_users
		disk_space = get_usage(user)
		if (disk_space > MAX_QUOTA)
				complain(user)
		end
end

for l in IO.popen("who").readlines
		print l if l =~ /^gc/ 
end

# we can mimic the obfuscated Perl way
while fh.gets               # $_ is set to the line just read
		chomp                   # $_ has a trailing \n removed, if it had one
		split.each { |w|        # $_ is split on whitespace
														# but $_ is not set to each chunk as in Perl
				print w.reverse
		}
end
# ...or use a cleaner way
for l in fh.readlines
		l.chomp.split.each { |w| print w.reverse }
end

# same drawback as in problem 1.4, we can't mutate a Numeric...
array.collect! { |v| v - 1 }

a = [ .5, 3 ]; b = [ 0, 1 ]
for ary in [ a, b ]
		ary.collect! { |v| v * 7 }
end
puts "#{a.join(' ')} #{b.join(' ')}"

# we can mutate Strings, cool; we need a trick for the scalar
for ary in [ [ scalar ], array, hash.values ]
		ary.each { |v| v.strip! }     # String#strip rules :)
end


# @@PLEAC@@_4.5
# not relevant in Ruby since we have always references
for item in array
		# do somethingh with item
end


# @@PLEAC@@_4.6
unique = list.uniq

# generate a list of users logged in, removing duplicates
users = `who`.collect { |l| l =~ /(\w+)/; $1 }.sort.uniq
puts("users logged in: #{commify_series(users)}")  # see 4.2 for commify_series


# @@PLEAC@@_4.7
a - b
# [ 1, 1, 2, 2, 3, 3, 3, 4, 5 ] - [ 1, 2, 4 ]  ->  [3, 5]


# @@PLEAC@@_4.8
union = a | b
intersection = a & b
difference = a - b


# @@PLEAC@@_4.9
array1.concat(array2)
# if you will assign to another object, better use:
new_ary = array1 + array2

members = [ "Time", "Flies" ]
initiates =  [ "An", "Arrow" ]
members += initiates

members = [ "Time", "Flies" ]
initiates = [ "An", "Arrow" ]
members[2,0] = [ "Like", initiates ].flatten

members[0] = "Fruit"
members[3,2] = "A", "Banana"


# @@PLEAC@@_4.10
reversed = ary.reverse

ary.reverse_each { |e|
		# do something with e
}

descending = ary.sort.reverse
descending = ary.sort { |a,b| b <=> a }


# @@PLEAC@@_4.11
# remove n elements from front of ary (shift n)
front = ary.slice!(0, n)

# remove n elements from the end of ary (pop n)
end_ = ary.slice!(-n .. -1)

# let's extend the Array class, to make that useful
class Array
		def shift2()
				slice!(0 .. 1)     # more symetric with pop2...
		end
		def pop2()
				slice!(-2 .. -1)
		end
end

friends = %w(Peter Paul Mary Jim Tim)
this, that = friends.shift2

beverages = %w(Dew Jolt Cola Sprite Fresca)
pair = beverages.pop2


# @@PLEAC@@_4.12
# use Enumerable#detect (or the synonym Enumerable#find)
highest_eng = employees.detect { |emp| emp.category == 'engineer' }


# @@PLEAC@@_4.13
# use Enumerable#select (or the synonym Enumerable#find_all)
bigs = nums.select { |i| i > 1_000_000 }
pigs = users.keys.select { |k| users[k] > 1e7 }

matching = `who`.select { |u| u =~ /^gnat / }

engineers = employees.select { |e| e.position == 'Engineer' }

secondary_assistance = applicants.select { |a|
		a.income >= 26_000 && a.income < 30_000
}


# @@PLEAC@@_4.14
# normally you would have an array of Numeric (Float or
# Fixnum or Bignum), so you would use:
sorted = unsorted.sort
# if you have strings representing Integers or Floats
# you may specify another sort method:
sorted = unsorted.sort { |a,b| a.to_f <=> b.to_f }

# let's use the list of my own PID's
`ps ux`.split("\n")[1..-1].
		select { |i| i =~ /^#{ENV['USER']}/ }.
		collect { |i| i.split[1] }.
		sort { |a,b| a.to_i <=> b.to_i }.each { |i| puts i }
puts "Select a process ID to kill:"
pid = gets.chomp
raise "Exiting ... \n" unless pid && pid =~ /^\d+$/
Process.kill('TERM', pid.to_i)
sleep 2
Process.kill('KILL', pid.to_i)

descending = unsorted.sort { |a,b| b.to_f <=> a.to_f }


# @@PLEAC@@_4.15
ordered = unordered.sort { |a,b| compare(a,b) }

precomputed = unordered.collect { |e| [compute, e] }
ordered_precomputed = precomputed.sort { |a,b| a[0] <=> b[0] }
ordered = ordered_precomputed.collect { |e| e[1] }

ordered = unordered.collect { |e| [compute, e] }.
		sort { |a,b| a[0] <=> b[0] }.
		collect { |e| e[1] }

for employee in employees.sort { |a,b| a.name <=> b.name }
		print employee.name, " earns \$ ", employee.salary, "\n"
end

# Beware! `0' is true in Ruby.
# For chaining comparisons, you may use Numeric#nonzero?, which
# returns num if num is not zero, nil otherwise
sorted = employees.sort { |a,b| (a.name <=> b.name).nonzero? || b.age <=> a.age }

users = []
# getpwent is not wrapped in Ruby... let's fallback
IO.readlines('/etc/passwd').each { |u| users << u.split(':') }
users.sort! { |a,b| a[0] <=> b[0] }
for user in users
		puts user[0]
end

sorted = names.sort { |a,b| a[1, 1] <=> b[1, 1] }
sorted = strings.sort { |a,b| a.length <=> b.length }

# let's show only the compact version
ordered = strings.collect { |e| [e.length, e] }.
		sort { |a,b| a[0] <=> b[0] }.
		collect { |e| e[1] }

ordered = strings.collect { |e| [/\d+/.match(e)[0].to_i, e] }.
		sort { |a,b| a[0] <=> b[0] }.
		collect { |e| e[1] }

print `cat /etc/passwd`.collect { |e| [e, e.split(':').indexes(3,2,0)].flatten }.
		sort { |a,b| (a[1] <=> b[1]).nonzero? || (a[2] <=> b[2]).nonzero? || a[3] <=> b[3] }.
		collect { |e| e[0] }


# @@PLEAC@@_4.16
circular.unshift(circular.pop)        # the last shall be first
circular.push(circular.shift)         # and vice versa

def grab_and_rotate(l)
		l.push(ret = l.shift)
		ret
end

processes = [1, 2, 3, 4, 5]
while (1)
		process = grab_and_rotate(processes)
		puts "Handling process #{process}"
		sleep 1
end


# @@PLEAC@@_4.17
def fisher_yates_shuffle(a)
		(a.size-1).downto(1) { |i|
				j = rand(i+1)
				a[i], a[j] = a[j], a[i] if i != j
		}
end

def naive_shuffle(a)
		for i in 0...a.size
				j = rand(a.size)
				a[i], a[j] = a[j], a[i]
		end
end


# @@PLEAC@@_4.18
#!/usr/bin/env ruby
# example 4-2 words
# words - gather lines, present in colums

# class to encapsulate the word formatting from the input
class WordFormatter
		def initialize(cols)
				@cols = cols
		end

		# helper to return the length of the longest word in the wordlist
		def maxlen(wordlist)
				max = 1
				for word in wordlist
						if word.length > max
								max = word.length
						end
				end
				max
		end

		# process the wordlist and print it formmated into columns
		def output(wordlist)
				collen = maxlen(wordlist) + 1
				columns = @cols / collen
				columns = 1 if columns == 0
				rows = (wordlist.length + columns - 1) / columns
				# now process each item, picking out proper piece for this position
				0.upto(rows * columns - 1) { |item|
						target = (item % columns) * rows + (item / columns)
						eol = ((item+1) % columns == 0)
						piece = wordlist[target] || ""
						piece = piece.ljust(collen) unless eol
						print piece
						puts if eol
				}
				# no need to finish it up, because eol is always true for the last element
		end
end

# get nr of chars that fit in window or console, see PLEAC 15.4
# not portable -- linux only (?)
def getWinCharWidth()
		buf = "\0" * 8
		$stdout.ioctl(0x5413, buf)
		ws_row, ws_col, ws_xpixel, ws_ypixel = buf.unpack("$4")
		ws_col || 80
rescue
		80
end

# main program
cols = getWinCharWidth()
formatter = WordFormatter.new(cols)
words = readlines()
words.collect! { |line|
		line.chomp
}
formatter.output(words)


# @@PLEAC@@_4.19
# In ruby, Fixnum's are automatically converted to Bignum's when
# needed, so there is no need for an extra module
def factorial(n)
		s = 1
		while n > 0
				s *= n
				n -= 1
		end
		s
end

puts factorial(500)

#---------------------------------------------------------
# Example 4-3. tsc-permute
# tsc_permute: permute each word of input
def permute(items, perms)
		unless items.length > 0
				puts perms.join(" ")
		else
				for i in items
						newitems = items.dup
						newperms = perms.dup
						newperms.unshift(newitems.delete(i))
						permute(newitems, newperms)
				end
		end
end
# In ruby the main program must be after all definitions it is using
permute(ARGV, [])

#---------------------------------------------------------
# mjd_permute: permute each word of input

def factorial(n)
		s = 1
		while n > 0
				s *= n
				n -= 1
		end
		s
end

# we use a class with a class variable store the private cache
# for the results of the factorial function.
class Factorial
		@@fact = [ 1 ]
		def Factorial.compute(n)
				if @@fact[n]
						@@fact[n]
				else
						@@fact[n] = n * Factorial.compute(n - 1)
				end
		end
end

#---------------------------------------------------------
# Example 4-4- mjd-permute
# n2pat(n, len): produce the N-th pattern of length len

# We must use a lower case letter as parameter N, otherwise it is
# handled as constant Length is the length of the resulting
# array, not the index of the last element (length -1) like in
# the perl example.
def n2pat(n, length)
		pat = []
		i = 1
		while i <= length
				pat.push(n % i)
				n /= i
				i += 1
		end
		pat
end

# pat2perm(pat): turn pattern returned by n2pat() into
# permutation of integers.
def pat2perm(pat)
		source = (0 .. pat.length - 1).to_a
		perm = []
		perm.push(source.slice!(pat.pop)) while pat.length > 0
		perm
end

def n2perm(n, len)
		pat2perm(n2pat(n,len))
end

# In ruby the main program must be after all definitions
while gets
		data = split
		# the perl solution has used $#data, which is length-1
		num_permutations = Factorial.compute(data.length())
		0.upto(num_permutations - 1) do |i|
				# in ruby we can not use an array as selector for an array
				# but by exchanging the two arrays, we can use the collect method
				# which returns an array with the result of all block invocations
				permutation = n2perm(i, data.length).collect {
						|j| data[j]
				}
				puts permutation.join(" ")
		end
end


# @@PLEAC@@_5.0
age = { "Nat",   24,
				"Jules", 25,
				"Josh",  17  }

age["Nat"]   = 24
age["Jules"] = 25
age["Josh"]  = 17

food_color = {
		"Apple"  => "red",
		"Banana" => "yellow",
		"Lemon"  => "yellow",
		"Carrot" => "orange"
						 }

# In Ruby, you cannot avoid the double or simple quoting
# while manipulatin hashes


# @@PLEAC@@_5.1
hash[key] = value

food_color["Raspberry"] = "pink"
puts "Known foods:", food_color.keys


# @@PLEAC@@_5.2
# does hash have a value for key ?
if (hash.has_key?(key))
		# it exists
else
		# it doesn't
end

[ "Banana", "Martini" ].each { |name|
		print name, " is a ", food_color.has_key?(name) ? "food" : "drink", "\n"
}

age = {}
age['Toddler'] = 3
age['Unborn'] = 0
age['Phantasm'] = nil

for thing in ['Toddler', 'Unborn', 'Phantasm', 'Relic']
		print "#{thing}: "
		print "Has-key " if age.has_key?(thing)
		print "True " if age[thing]
		print "Nonzero " if age[thing] && age[thing].nonzero?
		print "\n"
end

#=>
# Toddler: Has-key True Nonzero 
# Unborn: Has-key True 
# Phantasm: Has-key 
# Relic: 

# You use Hash#has_key? when you use Perl's exists -> it checks
# for existence of a key in a hash.
# All Numeric are "True" in ruby, so the test doesn't have the
# same semantics as in Perl; you would use Numeric#nonzero? to
# achieve the same semantics (false if 0, true otherwise).


# @@PLEAC@@_5.3
food_color.delete("Banana")


# @@PLEAC@@_5.4
hash.each { |key, value|
		# do something with key and value
}

hash.each_key { |key|
		# do something with key
}

food_color.each { |food, color|
		puts "#{food} is #{color}"
}

food_color.each_key { |food|
		puts "#{food} is #{food_color[food]}"
}

# IMO this demonstrates that OO style is by far more readable
food_color.keys.sort.each { |food|
		puts "#{food} is #{food_color[food]}."
}

#-----------------------------
#!/usr/bin/ruby
# countfrom - count number of messages from each sender

# Default value is 0
from = Hash.new(0)
while gets
		/^From: (.*)/ and from[$1] += 1
end

# More useful to sort by number of received mail by person
from.sort {|a,b| b[1]<=>a[1]}.each { |v|
		puts "#{v[1]}: #{v[0]}"
}
#-----------------------------


# @@PLEAC@@_5.5
# You may use the built-in 'inspect' method this way:
p hash

# Or do it the Cookbook way:
hash.each { |k,v| puts "#{k} => #{v}" }

# Sorted by keys
hash.sort.each { |e| puts "#{e[0]} => #{e[1]}" }
# Sorted by values
hash.sort{|a,b| a[1]<=>b[1]}.each { |e| puts "#{e[0]} => #{e[1]}" }


# @@PLEAC@@_5.6
# Use the OrderedHash module (part of the GoodLibs RubyGem):
require 'rubygems'
require 'ordered_hash'
hash = OrderedHash.new;
# manipulate hash
keys = hash.keys                # keys is in insertion order

# initialize
require 'rubygems'
require 'ordered_hash'

food_color = OrderedHash.new
food_color["Banana"] = "Yellow"
food_color["Apple"]  = "Green"
food_color["Lemon"]  = "Yellow"

puts "In insertion order, the foods are:"
food_color.each_key { |food|
		puts "  #{food}"
}

puts "Still in insertion order, the foods' colors are:"
food_color.each { |food, color|
		puts "#{food} is colored #{color}."
}


# @@PLEAC@@_5.7
ttys = Hash.new
for i in `who`
		user, tty = i.split
		(ttys[user] ||= []) << tty               # see problems_ruby for more infos
end
ttys.keys.sort.each { |k|
		puts "#{k}: #{commify_series(ttys[k])}"  # from 4.2
}


# @@PLEAC@@_5.8
surname = { "Mickey" => "Mantle", "Babe" => "Ruth" }
puts surname.index("Mantle")

# If you really needed to 'invert' the whole hash, use Hash#invert

#-----------------------------
#!/usr/bin/ruby -w
# foodfind - find match for food or color

given = ARGV.shift or raise "usage: foodfind food_or_color"

color = {
		"Apple"  => "red",
		"Banana" => "yellow",
		"Lemon"  => "yellow",
		"Carrot" => "orange",
}

if (color.has_key?(given))
		puts "#{given} is a food with color #{color[given]}."
end
if (color.has_value?(given))
		puts "#{color.index(given)} is a food with color #{given}."
end
#-----------------------------


# @@PLEAC@@_5.9
# Sorted by keys (Hash#sort gives an Array of pairs made of each key,value)
food_color.sort.each { |f|
		puts "#{f[0]} is #{f[1]}."
}

# Sorted by values
food_color.sort { |a,b| a[1] <=> b[1] }.each { |f|
		puts "#{f[0]} is #{f[1]}."
}

# Sorted by length of values
food_color.sort { |a,b| a[1].length <=> b[1].length }.each { |f|
		puts "#{f[0]} is #{f[1]}."
}


# @@PLEAC@@_5.10
merged = a.clone.update(b)        # because Hash#update changes object in place

drink_color = { "Galliano"  => "yellow", "Mai Tai" => "blue" }
ingested_color = drink_color.clone.update(food_color)

substance_color = {}
for i in [ food_color, drink_color ]
		i.each_key { |k|
				if substance_color.has_key?(k)
						puts "Warning: #{k} seen twice.  Using the first definition."
						next
				end
				substance_color[k] = 1
		}
end


# @@PLEAC@@_5.11
common = hash1.keys & hash2.keys

this_not_that = hash1.keys - hash2.keys


# @@PLEAC@@_5.12
# no problem here, Ruby handles any kind of object for key-ing
# (it takes Object#hash, which defaults to Object#id)


# @@PLEAC@@_5.13
# AFAIK, not possible in Ruby


# @@PLEAC@@_5.14
# Be careful, the following is possible only because Fixnum objects are
# special (documentation says: there is effectively only one Fixnum object
# instance for any given integer value).
count = Hash.new(0)
array.each { |e|
		count[e] += 1
}


# @@PLEAC@@_5.15
father = {
		"Cain"      , "Adam",
		"Abel"      , "Adam",
		"Seth"      , "Adam",
		"Enoch"     , "Cain",
		"Irad"      , "Enoch",
		"Mehujael"  , "Irad",
		"Methusael" , "Mehujael",
		"Lamech"    , "Methusael",
		"Jabal"     , "Lamech",
		"Jubal"     , "Lamech",
		"Tubalcain" , "Lamech",
		"Enos"      , "Seth",
}

while gets
		chomp
		begin
				print $_, " "
		end while $_ = father[$_]
		puts
end

children = {}
father.each { |k,v|
		(children[v] ||= []) << k
}
while gets
		chomp
		puts "#{$_} begat #{(children[$_] || ['Nobody']).join(', ')}.\n"
end

includes = {}
files.each { |f|
		begin
				for l in IO.readlines(f)
						next unless l =~ /^\s*#\s*include\s*<([^>]+)>/
						(includes[$1] ||= []) << f
				end
		rescue SystemCallError
				$stderr.puts "#$! (skipping)"
		end
}

include_free = includes.values.flatten.uniq - includes.keys


# @@PLEAC@@_5.16
# dutree - print sorted intented rendition of du output
#% dutree
#% dutree /usr
#% dutree -a
#% dutree -a /bin

# The DuNode class collects all information about a directory,
# and provides some convenience methods
class DuNode

		attr_reader :name
		attr_accessor :size
		attr_accessor :kids

		def initialize(name)
				@name = name
				@kids = []
				@size = 0
		end

		# support for sorting nodes with side
		def size_compare(node2)
				@size <=> node2.size
		end

		def basename
				@name.sub(/.*\//, "")
		end

		#returns substring before last "/", nil if not there
		def parent
				p = @name.sub(/\/[^\/]+$/,"")
				if p == @name
						nil
				else
						p
				end
		end

end

# The DuTree does the acdtual work of
# getting the input, parsing it, builging up a tree
# and format it for output
class Dutree

		attr_reader :topdir

		def initialize
				@nodes = Hash.new
				@dirsizes = Hash.new(0)
				@kids = Hash.new([])
		end

		# get a node by name, create it if it does not exist yet
		def get_create_node(name)
				if @nodes.has_key?(name)
						@nodes[name]
				else
						node = DuNode.new(name)
						@nodes[name] = node
						node
				end
		end

		# run du, read in input, save sizes and kids
		# stores last directory read in instance variable topdir
		def input(arguments)
				name = ""
				cmd = "du " + arguments.join(" ")
				IO.popen(cmd) { |pipe|
						pipe.each { |line|
								size, name = line.chomp.split(/\s+/, 2)
								node = get_create_node(name)
								node.size = size.to_i
								@nodes[name] = node
								parent = node.parent
								if parent
										get_create_node(parent).kids.push(node)
								end
						}
				}
				@topdir = @nodes[name]
		end

		# figure out how much is taken in each directory
		# that isn't stored in the subdirectories. Add a new
		# fake kid called "." containing that much.
		def get_dots(node)
				cursize = node.size
				for kid in node.kids
						cursize -=  kid.size
						get_dots(kid)
				end
				if node.size != cursize
						newnode = get_create_node(node.name + "/.")
						newnode.size = cursize
						node.kids.push(newnode)
				end
		end

		# recursively output everything
		# passing padding and number width as well
		# on recursive calls
		def output(node, prefix="", width=0)
				line = sprintf("%#{width}d %s", node.size, node.basename)
				puts(prefix + line)
				prefix += line.sub(/\d /, "| ")
				prefix.gsub!(/[^|]/, " ")
				if node.kids.length > 0     # not a bachelor node
						kids = node.kids
						kids.sort! { |a,b|
								b.size_compare(a)
						}
						width = kids[0].size.to_s.length
						for kid in kids
								output(kid, prefix, width)
						end
				end
		end

end

tree = Dutree.new
tree.input(ARGV)
tree.get_dots(tree.topdir)
tree.output(tree.topdir)


# @@PLEAC@@_6.0
# The verbose version are match, sub, gsub, sub! and gsub!;
# pattern needs to be a Regexp object; it yields a MatchData
# object.
pattern.match(string)
string.sub(pattern, replacement)
string.gsub(pattern, replacement)
# As usual in Ruby, sub! does the same as sub but also modifies
# the object, the same for gsub!/gsub.

# Sugared syntax yields the position of the match (or nil if no
# match). Note that the object at the right of the operator needs
# not to be a Regexp object (it can be a String). The "dont
# match" operator yields true or false.
meadow =~ /sheep/   # position of the match, nil if no match
meadow !~ /sheep/   # true if doesn't match, false if it does
# There is no sugared version for the substitution

meadow =~ /\bovines?\b/i and print "Here be sheep!"

string = "good food"
string.sub!(/o*/, 'e')

# % echo ababacaca | ruby -ne 'puts $& if /(a|ba|b)+(a|ac)+/'
# ababa

# The "global" (or "multiple") match is handled by String#scan
scan (/(\d+)/) {
		puts "Found number #{$1}"
}

# String#scan yields an Array if not used with a block
numbers = scan(/\d+/)

digits = "123456789"
nonlap = digits.scan(/(\d\d\d)/)
yeslap = digits.scan(/(?=(\d\d\d))/)
puts "Non-overlapping:  #{nonlap.join(' ')}"
puts "Overlapping:      #{yeslap.join(' ')}";
# Non-overlapping:  123 456 789
# Overlapping:      123 234 345 456 567 678 789

string = "And little lambs eat ivy"
string =~ /l[^s]*s/
puts "(#$`) (#$&) (#$')"
# (And ) (little lambs) ( eat ivy)


# @@PLEAC@@_6.1
# Ruby doesn't have the same problem:
dst = src.sub('this', 'that')

progname = $0.sub('^.*/', '')

bindirs = %w(/usr/bin /bin /usr/local/bin)
libdirs = bindirs.map { |l| l.sub('bin', 'lib') }


# @@PLEAC@@_6.3
/\S+/               # as many non-whitespace bytes as possible
/[A-Za-z'-]+/       # as many letters, apostrophes, and hyphens

/\b([A-Za-z]+)\b/   # usually best
/\s([A-Za-z]+)\s/   # fails at ends or w/ punctuation


# @@PLEAC@@_6.4
require 'socket'
str = 'www.ruby-lang.org and www.rubygarden.org'
re = /
			(               # capture the hostname in $1
				(?:           # these parens for grouping only
					(?! [-_] )  # lookahead for neither underscore nor dash
					[\w-] +     # hostname component
					\.          # and the domain dot
				) +           # now repeat that whole thing a bunch of times
				[A-Za-z]      # next must be a letter
				[\w-] +       # now trailing domain part
			)               # end of $1 capture
		 /x               # /x for nice formatting

str.gsub! re do       # pass a block to execute replacement
		host = TCPsocket.gethostbyname($1)
		"#{$1} [#{host[3]}]"
end

puts str
#-----------------------------
# to match whitespace or #-characters in an extended re you need to escape
# them.

foo = 42
str = 'blah #foo# blah'
str.gsub! %r/       # replace
							\#    #   a pound sign
							(\w+) #   the variable name
							\#    #   another pound sign
					/x do
							eval $1           # with the value of a local variable
					end
puts str  # => blah 42 blah


# @@PLEAC@@_6.5
# The 'g' modifier doesn't exist in Ruby, a regexp can't be used
# directly in a while loop; instead, use String#scan { |match| .. } 
fish = 'One fish two fish red fish blue fish'
WANT = 3
count = 0
fish.scan(/(\w+)\s+fish\b/i) {
		if (count += 1) == WANT
				puts "The third fish is a #{$1} one."
		end
}

if fish =~ /(?:\w+\s+fish\s+){2}(\w+)\s+fish/i
		puts "The third fish is a #{$1} one."
end

pond = 'One fish two fish red fish blue fish'
# String#scan without a block gives an array of matches, each match
# being an array of all the specified groups
colors = pond.scan(/(\w+)\s+fish\b/i).flatten  # get all matches
color  = colors[2]                          # then the one we want
# or without a temporary array
color = pond.scan(/(\w+)\s+fish\b/i).flatten[2]  # just grab element 3
puts "The third fish in the pond is #{color}."

count = 0
fishes = 'One fish two fish red fish blue fish'
evens = fishes.scan(/(\w+)\s+fish\b/i).select { (count+=1) % 2 == 0 }
print "Even numbered fish are #{evens.join(' ')}."

count = 0
fishes.gsub(/
	 \b               # makes next \w more efficient
	 ( \w+ )          # this is what we\'ll be changing
	 (
		 \s+ fish \b
	 )
						/x) {
		if (count += 1) == 4
				'sushi' + $2
		else
				$1 + $2
		end
}

pond = 'One fish two fish red fish blue fish swim here.'
puts "Last fish is #{pond.scan(/\b(\w+)\s+fish\b/i).flatten[-1]}"

/
		A               # find some pattern A
		(?!             # mustn\'t be able to find
				.*          # something
				A           # and A
		)
		$               # through the end of the string
/x

# The "s" perl modifier is "m" in Ruby (not very nice since there is
# also an "m" in perl..)
pond = "One fish two fish red fish blue fish swim here."
if (pond =~ /
										\b  (  \w+) \s+ fish \b
								(?! .* \b fish \b )
						/mix)
		puts "Last fish is #{$1}."
else
		puts "Failed!"
end


# @@PLEAC@@_6.6
#-----------------------------
#!/usr/bin/ruby -w
# killtags - very bad html killer
$/ = nil;                              # each read is whole file
while file = gets() do
		file.gsub!(/<.*?>/m,'');           # strip tags (terribly)
		puts file                          # print file to STDOUT
end
#-----------------------------
#!/usr/bin/ruby -w
#headerfy - change certain chapter headers to html
$/ = ''
while file = gets() do
		pattern = /
									\A                   # start of record
									(                    # capture in $1
											Chapter          # text string
											\s+              # mandatory whitespace
											\d+              # decimal number
											\s*              # optional whitespace
											:                # a real colon
											. *              # anything not a newline till end of line
									)
							 /x
		puts file.gsub(pattern,'<H1>\1</H1>')
end
#-----------------------------
#% ruby -00pe "gsub!(/\A(Chapter\s+\d+\s*:.*)/,'<H1>\1</H1>')" datafile

#!/usr/bin/ruby -w
#-----------------------------
for file in ARGV
		file = File.open(ARGV.shift)
		while file.gets('') do             # each read is a paragraph
				print "chunk #{$.} in $ARGV has <<#{$1}>>\n" while /^START(.*?)^END/m
		end                                # /m activates the multiline mode
end
#-----------------------------

# @@PLEAC@@_6.7
#-----------------------------
$/ = nil;
file = File.open("datafile")
chunks = file.gets.split(/pattern/)
#-----------------------------
# .Ch, .Se and .Ss divide chunks of STDIN
chunks = gets(nil).split(/^\.(Ch|Se|Ss)$/)
print "I read #{chunks.size} chunks.\n"
#-----------------------------


# @@PLEAC@@_6.8
while gets
		if ~/BEGIN/ .. ~/END/
				# line falls between BEGIN and END inclusive
		end
end

while gets
		if ($. == firstnum) .. ($. == lastnum)
				# operate between firstnum and lastnum line number
		end
end

# in ruby versions prior to 1.8, the above two conditional
# expressions could be shortened to:
#     if /BEGIN/ .. /END/
# and
#     if firstnum .. lastnum
# but these now only work this way from the command line  

#-----------------------------

while gets
		if ~/BEGIN/ ... ~/END/
				# line falls between BEGIN and END on different lines
		end
end

while gets
		if ($. == first) ... ($. == last)
				# operate between first and last line number on different lines
		end
end

#-----------------------------
# command-line to print lines 15 through 17 inclusive (see below)
ruby -ne 'print if 15 .. 17' datafile

# print out all <XMP> .. </XMP> displays from HTML doc
while gets
		print if ~%r#<XMP>#i .. ~%r#</XMP>#i;
end
		
# same, but as shell command
# ruby -ne 'print if %r#<XMP>#i .. %r#</XMP>#i' document.html
#-----------------------------
# ruby -ne 'BEGIN { $top=3; $bottom=5 }; \
#     print if $top .. $bottom' /etc/passwd                 #  FAILS
# ruby -ne 'BEGIN { $top=3; $bottom=5 }; \
#     print if $. == $top .. $. ==  $bottom' /etc/passwd    # works
# ruby -ne 'print if 3 .. 5' /etc/passwd                    # also works
#-----------------------------
print if ~/begin/ .. ~/end/;
print if ~/begin/ ... ~/end/;
#-----------------------------
while gets
		$in_header = $. == 1  .. ~/^$/ ? true : false
		$in_body   = ~/^$/ .. ARGF.eof ? true : false
end
#-----------------------------
seen = {}
ARGF.each do |line|
		next unless line =~ /^From:?\s/i .. line =~ /^$/;
		line.scan(%r/([^<>(),;\s]+\@[^<>(),;\s]+)/).each do |addr|
				puts addr unless seen[addr]
				seen[addr] ||= 1 
		end
end


# @@PLEAC@@_6.9
def glob2pat(globstr)
		patmap = {
				'*' => '.*',
				'?' => '.',
				'[' => '[',
				']' => ']',
		}
		globstr.gsub!(/(.)/) { |c| patmap[c] || Regexp::escape(c) }
		'^' + globstr + '$'
end


# @@PLEAC@@_6.10
# avoid interpolating patterns like this if the pattern
# isn't going to change:
pattern = ARGV.shift
ARGF.each do |line|
		print line if line =~ /#{pattern}/
end

# the above creates a new regex each iteration. Instead,
# use the /o modifier so the regex is compiled only once

pattern = ARGV.shift
ARGF.each do |line|
		print line if line =~ /#{pattern}/o
end

#-----------------------------

#!/usr/bin/ruby
# popgrep1 - grep for abbreviations of places that say "pop"
# version 1: slow but obvious way
popstates = %w(CO ON MI WI MN)
ARGF.each do |line|
		popstates.each do |state|
				if line =~ /\b#{state}\b/
						print line
						last
				end
		end
end

#-----------------------------
#!/usr/bin/ruby
# popgrep2 - grep for abbreviations of places that say "pop"
# version 2: eval strings; fast but hard to quote
popstates = %w(CO ON MI WI MN)
code = "ARGF.each do |line|\n"
popstates.each do |state|
		code += "\tif line =~ /\\b#{state}\\b/; print(line); next; end\n"
end
code += "end\n"
print "CODE IS\n---\n#{code}\n---\n" if false # turn on for debugging
eval code

# CODE IS
# ---
# ARGF.each do |line|
#         if line =~ /\bCO\b/; print(line); next; end
#         if line =~ /\bON\b/; print(line); next; end
#         if line =~ /\bMI\b/; print(line); next; end
#         if line =~ /\bWI\b/; print(line); next; end
#         if line =~ /\bMN\b/; print(line); next; end
# end
# 
# ---

## alternatively, the same idea as above but compiling 
## to a case statement: (not in perlcookbook)
#!/usr/bin/ruby -w
# popgrep2.5 - grep for abbreviations of places that say "pop"
# version 2.5: eval strings; fast but hard to quote
popstates = %w(CO ON MI WI MN)
code = "ARGF.each do |line|\n    case line\n"
popstates.each do |state|
		code += "        when /\\b#{state}\\b/ : print line\n"
end
code += "    end\nend\n"
print "CODE IS\n---\n#{code}\n---\n" if false # turn on for debugging
eval code

# CODE IS
# ---
# ARGF.each do |line|
#     case line
#         when /\bCO\b/ : print line
#         when /\bON\b/ : print line
#         when /\bMI\b/ : print line
#         when /\bWI\b/ : print line
#         when /\bMN\b/ : print line
#     end
# end
# 
# ---

# Note: (above) Ruby 1.8+ allows the 'when EXP : EXPR' on one line
# with the colon separator.

#-----------------------------
#!/usr/bin/ruby
# popgrep3 - grep for abbreviations of places that say "pop"
# version3: build a match_any function
popstates = %w(CO ON MI WI MN)
expr = popstates.map{|e|"line =~ /\\b#{e}\\b/"}.join('||')
eval "def match_any(line); #{expr};end"
ARGF.each do |line|
		print line if match_any(line)
end
#-----------------------------

##  building a match_all function is a trivial
##  substitution of && for ||
##  here is a generalized example:
#!/usr/bin/ruby -w
## grepauth - print lines that mention both foo and bar
class MultiMatch 
		def initialize(*patterns)
				_any = build_match('||',patterns)
				_all = build_match('&&',patterns)
				eval "def match_any(line);#{_any};end\n"
				eval "def match_all(line);#{_all};end\n"
			end
		def build_match(sym,args)
				args.map{|e|"line =~ /#{e}/"}.join(sym)
		end
end

mm = MultiMatch.new('foo','bar')
ARGF.each do |line|
		print line if mm.match_all(line)
end
#-----------------------------

#!/usr/bin/ruby
# popgrep4 - grep for abbreviations of places that say "pop"
# version4: pretty fast, but simple: compile all re's first:
popstates = %w(CO ON MI WI MN)
popstates = popstates.map{|re| %r/\b#{re}\b/}
ARGF.each do |line|
		popstates.each do |state_re|
				if line =~ state_re
						print line
						break
				end
		end
end

## speeds trials on the jargon file(412): 26006 lines, 1.3MB
## popgrep1   => 7.040s
## popgrep2   => 0.656s
## popgrep2.5 => 0.633s
## popgrep3   => 0.675s
## popgrep4   => 1.027s

# unless speed is criticial, the technique in popgrep4 is a
# reasonable balance between speed and logical simplicity.


# @@PLEAC@@_6.11
begin
		print "Pattern? "
		pat = $stdin.gets.chomp
		Regexp.new(pat)
rescue 
		warn "Invalid Pattern"
		retry
end


# @@PLEAC@@_6.13
# uses the 'amatch' extension found on:
# http://raa.ruby-lang.org/project/amatch/
require 'amatch'
matcher = Amatch.new('balast')
#$relative, $distance = 0, 1
File.open('/usr/share/dict/words').each_line do |line|
		print line if matcher.search(line) <= 1
end
__END__
ballast
ballasts
balustrade
balustrades
blast
blasted
blaster
blasters
blasting
blasts


# @@PLEAC@@_6.14
str.scan(/\G(\d)/).each do |token|
		puts "found #{token}"
end
#-----------------------------
n = "   49 here"
n.gsub!(/\G /,'0')
puts n
#-----------------------------
str = "3,4,5,9,120"
str.scan(/\G,?(\d+)/).each do |num|
		puts "Found number: #{num}"
end
#-----------------------------
# Ruby doesn't have the String.pos or a /c re modifier like Perl 
# But it does have StringScanner in the standard library (strscn)
# which allows similar functionality:

require 'strscan'
text = 'the year 1752 lost 10 days on the 3rd of September'
sc = StringScanner.new(text)
while sc.scan(/.*?(\d+)/)
		print "found: #{sc[1]}\n"   
end
if sc.scan(/\S+/)
		puts "Found #{sc[0]} after last number"
end
#-----------------------------
# assuming continuing from above:
puts "The position in 'text' is: #{sc.pos}"
sc.pos = 30
puts "The position in 'text' is: #{sc.pos}"


# @@PLEAC@@_6.15
#-----------------------------
# greedy pattern
str.gsub!(/<.*>/m,'')   # not good

# non-greedy (minimal) pattern
str.gsub!(/<.*?>/m,'')   # not great


#-----------------------------
#<b><i>this</i> and <i>that</i> are important</b> Oh, <b><i>me too!</i></b>
#-----------------------------
%r{ <b><i>(.*?)</i></b> }mx
#-----------------------------
%r/BEGIN((?:(?!BEGIN).)*)END/
#-----------------------------
%r{ <b><i>(  (?: (?!</b>|</i>). )*  ) </i></b> }mx
#-----------------------------
%r{ <b><i>(  (?: (?!</[ib]>). )*  ) </i></b> }mx
#-----------------------------
%r{
		<b><i> 
		[^<]*  # stuff not possibly bad, and not possibly the end.
		(?:
 # at this point, we can have '<' if not part of something bad
		 (?!  </?[ib]>  )   # what we can't have
		 <                  # okay, so match the '<'
		 [^<]*              # and continue with more safe stuff
		) *
		</i></b>
 }mx


# @@PLEAC@@_6.16
#-----------------------------
$/ = ""
ARGF.each do |para|
		para.scan %r/
									\b     # start at word boundary
									(\S+)  # find chunk of non-whitespace
									\b     # until a word boundary
									(      
										\s+  # followed by whitespace
										\1   # and that same chunk again
										\b   # and a word boundary
									) +    # one or more times
								/xi do
				puts "dup word '#{$1}' at paragraph #{$.}" 
		end
end
#-----------------------------
astr = 'nobody'
bstr = 'bodysnatcher'
if "#{astr} #{bstr}" =~ /^(\w+)(\w+) \2(\w+)$/
		print "#{$2} overlaps in #{$1}-#{$2}-#{$3}"
end
#-----------------------------
#!/usr/bin/ruby -w
# prime_pattern -- find prime factors of argument using patterns
ARGV << 180
cap = 'o' * ARGV.shift
while cap =~ /^(oo+?)\1+$/
		print $1.size, " "
		cap.gsub!(/#{$1}/,'o')
end
puts cap.size
#-----------------------------
#diophantine
# solve for 12x + 15y + 16z = 281, maximizing x
if ('o' * 281).match(/^(o*)\1{11}(o*)\2{14}(o*)\3{15}$/)
		x, y, z = $1.size, $2.size, $3.size
		puts "One solution is: x=#{x}; y=#{y}; z=#{z}"
else 
		puts "No solution."
end
#    => One solution is: x=17; y=3; z=2

#-----------------------------
# using different quantifiers:
('o' * 281).match(/^(o+)\1{11}(o+)\2{14}(o+)\3{15}$/)
#    => One solution is: x=17; y=3; z=2

('o' * 281).match(/^(o*?)\1{11}(o*)\2{14}(o*)\3{15}$/)
#    => One solution is: x=0; y=7; z=11

('o' * 281).match(/^(o+?)\1{11}(o*)\2{14}(o*)\3{15}$/)
#    => One solution is: x=1; y=3; z=14


# @@PLEAC@@_6.17
# alpha OR beta
%r/alpha|beta/

# alpha AND beta
%r/(?=.*alpha)(?=.*beta)/m

# alpha AND beta,  no overlap
%r/alpha.*beta|beta.*alpha/m

# NOT beta
%r/^(?:(?!beta).)*$/m

# NOT bad BUT good
%r/(?=(?:(?!BAD).)*$)GOOD/m
#-----------------------------

if !(string =~ /pattern/)   # ugly
		something()
end

if string !~ /pattern/   # preferred
		something()
end


#-----------------------------
if string =~ /pat1/  && string =~ /pat2/
		something()
end
#-----------------------------
if string =~ /pat1/ || string =~ /pat2/
		something()
end
#-----------------------------
#!/usr/bin/ruby -w
# minigrep - trivial grep
pat = ARGV.shift
ARGF.each do |line|
		print line if line =~ /#{pat}/o
end
#-----------------------------
 "labelled" =~ /^(?=.*bell)(?=.*lab)/m
#-----------------------------
$string =~ /bell/ && $string =~ /lab/
#-----------------------------
$murray_hill = "blah bell blah "
if $murray_hill =~ %r{
												 ^              # start of string
												(?=             # zero-width lookahead
														.*          # any amount of intervening stuff
														bell        # the desired bell string
												)               # rewind, since we were only looking
												(?=             # and do the same thing
														.*          # any amount of intervening stuff
														lab         # and the lab part
												)
										 }mx                # /m means . can match newline

		print "Looks like Bell Labs might be in Murray Hill!\n";
end
#-----------------------------
"labelled" =~ /(?:^.*bell.*lab)|(?:^.*lab.*bell)/
#-----------------------------
$brand = "labelled";
if $brand =~ %r{
								(?:                 # non-capturing grouper
										^ .*?           # any amount of stuff at the front
											bell          # look for a bell
											.*?           # followed by any amount of anything
											lab           # look for a lab
									)                 # end grouper
						|                       # otherwise, try the other direction
								(?:                 # non-capturing grouper
										^ .*?           # any amount of stuff at the front
											lab           # look for a lab
											.*?           # followed by any amount of anything
											bell          # followed by a bell
									)                 # end grouper
						}mx                     # /m means . can match newline
		print "Our brand has bell and lab separate.\n";
end
#-----------------------------
$map =~ /^(?:(?!waldo).)*$/s
#-----------------------------
$map = "the great baldo"
if $map =~ %r{
								^                   # start of string
								(?:                 # non-capturing grouper
										(?!             # look ahead negation
												waldo       # is he ahead of us now?
										)               # is so, the negation failed
										.               # any character (cuzza /s)
								) *                 # repeat that grouping 0 or more
								$                   # through the end of the string
						 }mx                    # /m means . can match newline
		print "There's no waldo here!\n";
end
#-----------------------------
 7:15am  up 206 days, 13:30,  4 users,  load average: 1.04, 1.07, 1.04

USER     TTY      FROM              LOGIN@  IDLE   JCPU   PCPU  WHAT

tchrist  tty1                       5:16pm 36days 24:43   0.03s  xinit

tchrist  tty2                       5:19pm  6days  0.43s  0.43s  -tcsh

tchrist  ttyp0    chthon            7:58am  3days 23.44s  0.44s  -tcsh

gnat     ttyS4    coprolith         2:01pm 13:36m  0.30s  0.30s  -tcsh
#-----------------------------
#% w | minigrep '^(?!.*ttyp).*tchrist'
#-----------------------------
%r{
		^                       # anchored to the start
		(?!                     # zero-width look-ahead assertion
				.*                  # any amount of anything (faster than .*?)
				ttyp                # the string you don't want to find
		)                       # end look-ahead negation; rewind to start
		.*                      # any amount of anything (faster than .*?)
		tchrist                 # now try to find Tom
}x
#-----------------------------
#% w | grep tchrist | grep -v ttyp
#-----------------------------
#% grep -i 'pattern' files
#% minigrep '(?i)pattern' files
#-----------------------------


# @@PLEAC@@_6.20
ans = $stdin.gets.chomp
re = %r/^#{Regexp.quote(ans)}/
case 
		when "SEND"  =~ re : puts "Action is send"
		when "STOP"  =~ re : puts "Action is stop"
		when "ABORT" =~ re : puts "Action is abort"
		when "EDIT"  =~ re : puts "Action is edit"
end
#-----------------------------
require 'abbrev'
table = Abbrev.abbrev %w-send stop abort edit-
loop do
		print "Action: "
		ans = $stdin.gets.chomp
		puts "Action for #{ans} is #{table[ans.downcase]}"
end


#-----------------------------
# dummy values are defined for 'file', 'PAGER', and
# the 'invoke_editor' and 'deliver_message' methods
# do not do anything interesting in this example.
#!/usr/bin/ruby -w
require 'abbrev'

file = 'pleac_ruby.data'
PAGER = 'less'

def invoke_editor
		puts "invoking editor"
end

def deliver_message
		puts "delivering message"
end

actions = {
		'edit'  => self.method(:invoke_editor),
		'send'  => self.method(:deliver_message),
		'list'  => proc {system(PAGER, file)},
		'abort' => proc {puts "See ya!"; exit},
		""      => proc {puts "Unknown Command"}
}

dtable = Abbrev.abbrev(actions.keys)
loop do
		print "Action: "
		ans = $stdin.gets.chomp.delete(" \t")
		actions[ dtable[ans.downcase] || "" ].call
end


# @@PLEAC@@_6.19
#-----------------------------
# basically, the Perl Cookbook categorizes this as an
# unsolvable problem ...
#-----------------------------
1 while addr.gsub!(/\([^()]*\)/,'')
#-----------------------------
Dear someuser@host.com,

Please confirm the mail address you gave us Wed May  6 09:38:41
MDT 1998 by replying to this message.  Include the string
"Rumpelstiltskin" in that reply, but spelled in reverse; that is,
start with "Nik...".  Once this is done, your confirmed address will
be entered into our records.


# @@PLEAC@@_6.21
#-----------------------------
#% gunzip -c ~/mail/archive.gz | urlify > archive.urlified
#-----------------------------
#% urlify ~/mail/*.inbox > ~/allmail.urlified
#-----------------------------
#!/usr/bin/ruby -w
# urlify - wrap HTML links around URL-like constructs

urls = '(https?|telnet|gopher|file|wais|ftp)';
ltrs = '\w';
gunk = '/#~:.?+=&%@!\-';
punc = '.:?\-';
any  = "#{ltrs}#{gunk}#{punc}";

ARGF.each do |line|
		line.gsub! %r/
				\b                    # start at word boundary
				(                     # begin $1  {
				 #{urls}     :        # need resource and a colon
				 [#{any}] +?          # followed by on or more
															#  of any valid character, but
															#  be conservative and take only
															#  what you need to....
				)                     # end   $1  }
				(?=                   # look-ahead non-consumptive assertion
				 [#{punc}]*           # either 0 or more punctuation
				 [^#{any}]            #   followed by a non-url char
				 |                    # or else
				 $                    #   then end of the string
				)
		/iox do 
				%Q|<A HREF="#{$1}">#{$1}</A>|
		end
		print line
end


# @@PLEAC@@_6.23
%r/^m*(d?c{0,3}|c[dm])(l?x{0,3}|x[lc])(v?i{0,3}|i[vx])$/i
#-----------------------------
str.sub!(/(\S+)(\s+)(\S+)/, '\3\2\1')
#-----------------------------
%r/(\w+)\s*=\s*(.*)\s*$/             # keyword is $1, value is $2
#-----------------------------
%r/.{80,}/
#-----------------------------
%r|(\d+)/(\d+)/(\d+) (\d+):(\d+):(\d+)|
#-----------------------------
str.gsub!(%r|/usr/bin|,'/usr/local/bin')
#-----------------------------
str.gsub!(/%([0-9A-Fa-f][0-9A-Fa-f])/){ $1.hex.chr }
#-----------------------------
str.gsub!(%r{
		/\*                    # Match the opening delimiter
		.*?                    # Match a minimal number of characters
		\*/                    # Match the closing delimiter
}xm,'')
#-----------------------------
str.sub!(/^\s+/, '')
str.sub!(/\s+$/, '')

# but really, in Ruby we'd just do:
str.strip!
#-----------------------------
str.gsub!(/\\n/,"\n")
#-----------------------------
str.sub!(/^.*::/, '')
#-----------------------------
%r/^([01]?\d\d|2[0-4]\d|25[0-5])\.([01]?\d\d|2[0-4]\d|25[0-5])\.
		([01]?\d\d|2[0-4]\d|25[0-5])\.([01]?\d\d|2[0-4]\d|25[0-5])$/x
#-----------------------------
str.sub!(%r|^.*/|, '')
#-----------------------------
cols = ( (ENV['TERMCAP'] || " ") =~ /:co#(\d+):/ ) ? $1 : 80;
#-----------------------------
name = " #{$0} #{ARGV}".gsub(%r| /\S+/|, ' ')
#-----------------------------
require 'rbconfig'
include Config
raise "This isn't Linux" unless CONFIG['target_os'] =~ /linux/i;
#-----------------------------
str.gsub!(%r/\n\s+/, ' ')
#-----------------------------
nums = str.scan(/(\d+\.?\d*|\.\d+)/)
#-----------------------------
capwords = str.scan(%r/(\b[^\Wa-z0-9_]+\b)/)
#-----------------------------
lowords = str.scan(%r/(\b[^\WA-Z0-9_]+\b)/)
#-----------------------------
icwords = str.scan(%r/(\b[^\Wa-z0-9_][^\WA-Z0-9_]*\b)/)
#-----------------------------
links = str.scan(%r/<A[^>]+?HREF\s*=\s*["']?([^'" >]+?)[ '"]?>/mi)   #'
#-----------------------------
initial = str =~ /^\S+\s+(\S)\S*\s+\S/ ? $1 : ""
#-----------------------------
str.gsub!(%r/"([^"]*)"/, %q-``\1''-)   #"
#-----------------------------

$/ = ""
sentences = []
ARGF.each do |para|
		para.gsub!(/\n/, ' ')
		para.gsub!(/ {3,}/,'  ')
		sentences << para.scan(/(\S.*?[!?.])(?=  |\Z)/)
end

#-----------------------------
%r/(\d{4})-(\d\d)-(\d\d)/            # YYYY in $1, MM in $2, DD in $3
#-----------------------------
%r/ ^
			(?:
			 1 \s (?: \d\d\d \s)?            # 1, or 1 and area code
			 |                               # ... or ...
			 \(\d\d\d\) \s                   # area code with parens
			 |                               # ... or ...
			 (?: \+\d\d?\d? \s)?             # optional +country code
			 \d\d\d ([\s\-])                 # and area code
			)
			\d\d\d (\s|\1)                   # prefix (and area code separator)
			\d\d\d\d                         # exchange
				$
 /x
#-----------------------------
%r/\boh\s+my\s+gh?o(d(dess(es)?|s?)|odness|sh)\b/i
#-----------------------------
lines = []
lines << $1 while input.sub!(/^([^\012\015]*)(\012\015?|\015\012?)/,'')


# @@PLEAC@@_7.0
# An IO object being Enumerable, we can use 'each' directly on it
File.open("/usr/local/widgets/data").each { |line|
		puts line if line =~ /blue/
}

logfile = File.new("/var/log/rubylog.txt", "w")
mysub($stdin, logfile)

# The method IO#readline is similar  to IO#gets
# but throws an exception when it reaches EOF
f = File.new("bla.txt")
begin
		while (line = f.readline)
				line.chomp
				$stdout.print line if line =~ /blue/
		end
rescue EOFError
		f.close
end

while $stdin.gets                        # reads from STDIN
		unless (/\d/) 
				$stderr.puts "No digit found."   # writes to STDERR
		end
		puts "Read: #{$_}"                   # writes to STDOUT
end

logfile = File.new("/tmp/log", "w")

logfile.close

# $defout (or its synonym '$>') is the destination of output
# for Kernel#print, Kernel#puts, and family functions
logfile = File.new("log.txt", "w")
old = $defout
$defout = logfile                 # switch to logfile for output
puts "Countdown initiated ..."
$defout = old                     # return to original output
puts "You have 30 seconds to reach minimum safety distance."


# @@PLEAC@@_7.1
source = File.new(path, "r")  # open file "path" for reading only
sink   = File.new(path, "w")  # open file "path" for writing only

source = File.open(path, File::RDONLY)  # open file "path" for reading only
sink   = File.open(path, File::WRONLY)  # open file "path" for writing only

file   = File.open(path, "r+")  # open "path" for reading and writing
file   = File.open(path, flags) # open "path" with the flags "flags" (see examples below for flags)

# open file "path" read only
file   = File.open(path, "r")
file   = File.open(path, File::RDONLY)

# open file "path" write only, create it if it does not exist
# truncate it to zero length if it exists
file   = File.open(path, "w")
file   = File.open(path, File::WRONLY|File::TRUNC|File::CREAT) 
file   = File.open(path, File::WRONLY|File::TRUNC|File::CREAT, 0666)  # with permission 0666

# open file "path" write only, fails if file exists
file   = File.open(path, File::WRONLY|File::EXCL|File::CREAT) 
file   = File.open(path, File::WRONLY|File::EXCL|File::CREAT, 0666) 

# open file "path" for appending
file   = File.open(path, "a")
file   = File.open(path, File::WRONLY|File::APPEND|File::CREAT) 
file   = File.open(path, File::WRONLY|File::APPEND|File::CREAT, 0666) 

# open file "path" for appending only when file exists
file   = File.open(path, File::WRONLY|File::APPEND) 

# open file "path" for reading and writing
file   = File.open(path, "r+")
file   = File.open(path, File::RDWR)

# open file for reading and writing, create a new file if it does not exist
file   = File.open(path, File::RDWR|File::CREAT)
file   = File.open(path, File::RDWR|File::CREAT, 0600)

# open file "path" reading and writing, fails if file exists
file   = File.open(path, File::RDWR|File::EXCL|File::CREAT)
file   = File.open(path, File::RDWR|File::EXCL|File::CREAT, 0600)


# @@PLEAC@@_7.2
# No problem with Ruby since the filename doesn't contain characters with
# special meaning; like Perl's sysopen
File.open(filename, 'r')


# @@PLEAC@@_7.3
File.expand_path('~root/tmp')
#=> "/root/tmp"
File.expand_path('~rpcuser')
#=> "/var/lib/nfs"

# To expand ~/.. it explicitely needs the environment variable HOME
File.expand_path('~/tmp')
#=> "/home/gc/tmp"


# @@PLEAC@@_7.4
# The exception raised in Ruby reports the filename
File.open('afile')


# @@PLEAC@@_7.5
# Standard Ruby distribution provides the following useful extension
require 'tempfile'
# With the Tempfile class, the file is automatically deleted on garbage
# collection, so you won't need to remove it, later on.
tf = Tempfile.new('tmp')   # a name is required to create the filename

# If you need to pass the filename to an external program you can use
# File#path, but don't forget to File#flush in order to flush anything
# living in some buffer somewhere.
tf.flush
system("/usr/bin/dowhatever #{tf.path}")

fh = Tempfile.new('tmp')
fh.sync = true                # autoflushes
10.times { |i| fh.puts i }
fh.rewind
puts 'Tmp file has: ', fh.readlines


# @@PLEAC@@_7.6
while (DATA.gets) do
		# process the line  
end
__END__
# your data goes here

# __DATA__ doesn't exist in Ruby

# get info about the script (size, date of last modification)
kilosize = DATA.stat.size / 1024
last_modif = DATA.stat.mtime
puts "<P>Script size is #{kilosize}"
puts "<P>Last script update: #{last_modif}"
__END__
# DO NOT REMOVE THE PRECEEDING LINE.
# Everything else in this file will be ignored.


# @@PLEAC@@_7.7
while line = gets do
		# do something with line.
end

#  or 
while gets do
		# do something with $_
end

# or more rubyish
$stdin.each do |line|
		# do stuff with line
end


# ARGF may makes this more easy
# this is skipped if ARGV.size==0
ARGV.each do |filename| 
		# closing and exception handling are done by the block
		open(filename) do |fd| 
				fd.each do |line|
						# do stuff with line
				end   
		end rescue abort("can't open %s" % filename)
end

# globbing is done in the Dir module
ARGV = Dir["*.[Cch]"] if ARGV.empty?

# note: optparse is the preferred way to handle this
if (ARGV[0] == '-c')  
		chop_first += 1
		ARGV.shift
end


# processing numerical options
if ARGV[0] =~ /^-(\d+)$/
		columns = $1
		ARGV.shift
end

# again, better to use optparse:
require 'optparse'
nostdout = 0
append = 0
unbuffer = 0
ignore_ints = 0
ARGV.options do |opt|
		opt.on('-n') { nostdout +=1 }
		opt.on('-a') { append   +=1 }
		opt.on('-u') { unbuffer +=1 }
		opt.on('-i') { ignore_ints +=1 }
		opt.parse!
end or abort("usage: " + __FILE__ + " [-ainu] [filenames]")

# no need to do undef $/, we have File.read
str = File.read(ARGV[0])

# again we have File.read
str = File.read(ARGV[0])

# not sure what this should do:
# I believe open the file, print filename, lineno and line:
ARGF.each_with_index do |line, idx|
		print ARGF.filename, ":", idx, ";", line
end

# print all the lines in every file passed via command line that contains login
ARGF.each do |line|
		puts line if line =~ /login/
end
#
# even this would fit
#%ruby -ne "print if /f/" 2.log
#

ARGF.each { |l| puts l.downcase! }

#------------------
#!/usr/bin/ruby -p
# just like perl's -p
$_.downcase!
#

# I don't know who should I trust. 
# perl's version splits on \w+ while python's on \w.

chunks = 0

File.read(ARGV[0]).split.each do |word|
		next if word =~ /^#/
		break if ["__DATA__", "__END__"].member? word
		chunks += 1 
end

print "Found ", chunks, " chunks\n"


# @@PLEAC@@_7.8
old = File.open(old_file)
new = File.open(new_file, "w")
while old.gets do
		# change $_, then...
		new.print $_
end
old.close
new.close
File.rename(old_file, "old.orig")
File.rename(new_file, old_file)

while old.gets do
		if $. == 20 then # we are at the 20th line
				new.puts "Extra line 1"
				new.puts "Extra line 2"
		end
		new.print $_
end

while old.gets do
		next if 20..30 # skip the 20th line to the 30th
									 # Ruby (and Perl) permit to write if 20..30 
									 # instead of if (20 <= $.) and ($. <= 30)
		new.print $_
end


# @@PLEAC@@_7.9
#% ruby -i.orig -pe 'FILTER COMMAND' file1 file2 file3 ...
#
#-----------------------------
##!/usr/bin/ruby -i.orig -p
# filter commands go here
#-----------------------------

#% ruby -pi.orig -e 'gsub!(/DATE/){Time.now)'

# effectively becomes:
ARGV << 'I'
oldfile = ""
while gets
		if ARGF.filename != oldfile
				newfile = ARGF.filename
				File.rename(newfile, newfile + ".orig")
				$stdout = File.open(newfile,'w')
				oldfile = newfile
		end
		gsub!(/DATE/){Time.now}
		print 
end
$stdout = STDOUT
#-----------------------------
#% ruby -i.old -pe 'gsub!(%r{\bhisvar\b}, 'hervar')' *.[Cchy]

#-----------------------------
# set up to iterate over the *.c files in the current directory,
# editing in place and saving the old file with a .orig extension
$-i = '.orig'                       # set up -i mode
ARGV.replace(Dir['*.[Cchy]'])
while gets
		if $. == 1
				print "This line should appear at the top of each file\n"
		end
		gsub!(/\b(p)earl\b/i, '\1erl')    # Correct typos, preserving case
		print
		ARGF.close if ARGF.eof
end


# @@PLEAC@@_7.10
File.open('itest', 'r+') do |f|   # open file for update
		lines = f.readlines           # read into array of lines
		lines.each do |it|            # modify lines
				it.gsub!(/foo/, 'QQQ')
		end
		f.pos = 0                     # back to start
		f.print lines                 # write out modified lines
		f.truncate(f.pos)             # truncate to new length
end                               # file is automatically closed
#-----------------------------
File.open('itest', 'r+') do |f|   
		out = ""
		f.each do |line|
				out << line.gsub(/DATE/) {Time.now}
		end
		f.pos = 0                     
		f.print out
		f.truncate(f.pos)             
end

# @@PLEAC@@_7.11
File.open('infile', 'r+') do |f|
		f.flock File::LOCK_EX
		# update file
end
#-----------------------------
File::LOCK_SH     # shared lock (for reading)
File::LOCK_EX     # exclusive lock (for writing)
File::LOCK_NB     # non-blocking request
File::LOCK_UN     # free lock
#-----------------------------
unless f.flock File::LOCK_EX | File::LOCK_NB
		warn "can't get immediate lock: blocking ..."
		f.flock File::LOCK_EX 
end
#-----------------------------
File.open('numfile', File::RDWR|File::CREAT) do |f|
		f.flock(File::LOCK_EX)
		num = f.gets.to_i || 0
		f.pos = 0
		f.truncate 0
		f.puts num + 1q
end


# @@PLEAC@@_7.12
output_handle.sync = true
# Please note that like in Perl, $stderr is already unbuffered
#-----------------------------
#!/usr/bin/ruby -w
# seeme - demo stdio output buffering
$stdout.sync = ARGV.size > 0
print "Now you don't see it..."
sleep 2
puts "now you do"
#-----------------------------
$stderr.sync = true
afile.sync = false
#-----------------------------
# assume 'remote_con' is an interactive socket handle,
# but 'disk_file' is a handle to a regular file.
remote_con.sync = true       # unbuffer for clarity
disk_file.sync = false       # buffered for speed
#-----------------------------
require 'socket'
sock = TCPSocket.new('www.ruby-lang.org', 80)
sock.sync = true
sock.puts "GET /en/ HTTP/1.0 \n\n"
resp = sock.read
print "DOC IS: #{resp}\n"


# @@PLEAC@@_7.13
#-----------------------------
# assumes fh1, fh2, fh2 are oen IO objects
nfound = select([$stdin, fh1, fh2, fh3], nil, nil, 0)
nfound[0].each do |file|
		case file
				when fh1
						# do something with fh1
				when fh2
						# do something with fh2
				when fh3
						# do something with fh3
		end
end
#-----------------------------
input_files = []
# repeat next line for all in-files to poll
input_files << fh1
if nfound = select(input_files, nil, nil, 0)
		# input ready on files in nfound[0]
end


# @@PLEAC@@_7.14
# It throws exception on EOF, instead of sysread, you can use read_nonblock(), too.
begin
	 File.open fname, (File::RDONLY | File::NONBLOCK) do |io|
		 puts io.sysread(4096) # throws exception
	 end
rescue EOFError
rescue IOError => e
	 puts e.exception
rescue Errno::ENOENT
	 puts "no such file #{fname}"
end

# return nil on EOF
begin
	 File.open fname, (File::RDONLY | File::NONBLOCK) do |io|
		 puts io.read(4096) # returns nil
	 end
rescue Errno::ENOENT
	 puts "no such file #{fname}"
end


# @@PLEAC@@_7.16
# filehandles are normal variables, so they behave properly
def subroutine(fh):
	fh.print "Hello, file"
end

variable = fh
subroutine(variable)


# @@PLEAC@@_7.18
#----------------------------
filehandles.each do |filehandle|
	filehandle.print stuff_to_print
end
#----------------------------
# NOTE: this is unix specific
IO.popen("tee file1 file2 file3 >/dev/null", "w") do |many|
	many.puts "data"
end
#----------------------------
# (really a Perl issue here, no problem in ruby)
[fh1 fh2 fh3].each {|fh| fh.puts "whatever" }
#----------------------------
# redirect to stdout to use print/puts directly
$stdout = IO.popen("tee file1 file2 file3", "w")
puts "whatever"
$stdout.close
$stdout = STDOUT   # get things back to the way they were
#----------------------------
# create a class/object to encapsulate the behavior in ruby
class MultiDispatcher < BasicObject # inherit from BasicObject in 1.9.x only
 def initialize(targets)
	 @targets = targets
 end

 def method_missing(*a,&b)
	 @targets.each {|tgt| tgt.send(*a,&b)}
 end
end

md = MultiDispatcher.new [$stdout, $stderr]
4.times {|i| md.printf "%3d\n", i}
md.close


# @@PLEAC@@_8.0
#-----------------------------
# datafile is a file or IO object
datafile.readlines.each { |line|
		line.chomp!
		size = line.length
		puts size
}
#-----------------------------
datafile.readlines.each { |line|
		puts line.chomp!.length
}
#-----------------------------
lines = datafile.readlines
#-----------------------------
whole_file = file.read
#-----------------------------
# ruby -040 -e 'word = gets; puts "First word is #{word}"'
#-----------------------------
# ruby -ne 'BEGIN { $/="%%\n" }; $_.chomp; puts $_ if( $_=~/Unix/i)' fortune.dat
#-----------------------------
handle.print "one", "two", "three" # "onetwothree"
puts "Baa baa black sheep."        # sent to $stdout
#-----------------------------
buffer = handle.read(4096)
rv     = buffer.length
#-----------------------------
handle.truncate(length)
open("/tmp#{$$}.pid", 'w') { |handle| handle.truncate(length) }
#-----------------------------
pos = datafile.pos  # tell is an alias of pos
puts "I'm #{pos} bytes from the start of datafile"
#-----------------------------
logfile.seek(0, IO::SEEK_END)
datafile.seek(pos)  #  IO::SEEK_SET is the default
out.seek(-20, IO::SEEK_CUR)
#-----------------------------
written = datafile.syswrite(mystring)
raise RunTimeError unless written == mystring.length
block = infile.sysread(256)   # no equivalent to perl offset parameter in sysread
puts "only read #{block.length} bytes" if 256 != block.length
#-----------------------------
pos = handle.sysseek(0, IO::SEEK_CUR)  # don't change position


# @@PLEAC@@_8.1
while (line = fh.gets)
		line.chomp!
		nextline = nil
		line.gsub!(/\\$/) { |match| nextline = fh.gets; '' }
		if (nextline != nil)
				line += nextline 
				redo
		end
		# process full record in line here
end
#-----------------------------
# DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) \
#         $(TEXINFOS) $(INFOS) $(MANS) $(DATA)
# DEP_DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) \
#         $(TEXINFOS) $(INFO_DEPS) $(MANS) $(DATA) \
#         $(EXTRA_DIST)
#-----------------------------
line.gsub!(/\\\s*$/, '') {
		# as before
}


# @@PLEAC@@_8.2
#-----------------------------
count = `wc -l < #{filename}`
fail "wc failed: #{$?}" if $? != 0
count.chomp!
#-----------------------------
count = 0
File.open(file, 'r') { |fh|
		count += 1 while fh.gets
}
# count now holds the number of lines read
#-----------------------------
count = 0
while (chunk = file.sysread(2**16)) 
		count += chunk.count("\n")
end rescue EOFError
#-----------------------------
File.open(filename,'r') { |fh|
		count += 1 while fh.gets
}
# count now holds the number of lines read
#-----------------------------
# As ruby doesn't quite have an equivalent to using a for
# statement as in perl, I threw this in
count = File.readlines(filename).size
#-----------------------------
1 while file.gets
count = $.
#-----------------------------
$/ = ''
open(filename, 'r') { |fh|
		1 while fh.gets
		para_count = $.
} rescue fail("can't open #{filename}: $!") 
#-----------------------------


# ^^PLEAC^^_8.3
#-----------------------------
while (gets)
		split.each { |chunk|
				# do something with chunk
		}
end
#-----------------------------
while (gets)
		gsub(/(\w[\w'-]*)/) { |word|
				# do something with word
		}
end
#-----------------------------
# Make a word frequency count
# normally hashes can be created using {} or just Hash.new
# but we want the default value of an entry to be 0 instead 
# of nil. (nil can't be incremented)
seen = Hash.new(0)
while (gets)
		gsub(/(\w[\w'-]*)/) { |word|
				seen[word.downcase] += 1
		}
end
# output hash in a descending numeric sort of its values
seen.sort { |a,b| b[1] <=> a[1] }.each do |k,v|
		printf("%5d %s\n", v, k )
end

#-----------------------------
# Line frequency count
seen = Hash.new(0)
while (gets)
		seen[$_.downcase] += 1
end
seen.sort { |a,b| b[1] <=> a[1] }.each do |k,v|
		printf("%5d %s\n", v, k )
end
#-----------------------------


# @@PLEAC@@_8.4
#-----------------------------
# instead of file handle FILE, we can just
# use a string containing the filename
File.readlines(file).each { |line|
		# do something with line
}
#-----------------------------
File.readlines(file).reverse_each { |line|
		# do something with line
}
#-----------------------------
# the variable lines might have been created
# this way
# lines = File.readlines(file)
#
# normally one would use the reverse_each, but
# if you insist on using a numerical index to
# iterate over the lines array...
(lines.size - 1).downto(0) { |i|
		line = lines[i]
}
#-----------------------------
# the second readlines argument is a the 
# record separator $/, just like perl, a blank
# separator splits the records into paragraphs
File.readlines(file, '').each { |paragraph|
		# do something with paragraph
		puts "->Paragraph #{paragraph}"
}
#-----------------------------


# @@PLEAC@@_8.5
# This shows both reading the growing file and a fall back (exit) when the file is deleted.
file = File.open('growing.txt') # Open the file, default mode is reading.
while File.exists?(file.path) # Check if the file exists, exit if not.
		puts file.gets while !file.eof? # Print file contents until the end-of-file is reached.
		sleep(1) # Wait 1 second, so the file might grow in the meantime.
		# No need to seek  - eof will be reset automatically if the file grows.
end

# Another option - reopen the file if current position is greater then the length of the file.
filename = 'growing.txt'
file = File.open(filename)
while File.exists?(file.path)
		if File.size(filename) < file.pos
				puts "File truncated -  reopening."
				file = File.open(filename)
		end
		puts file.gets while !file.eof?
		sleep(1)
end


# @@PLEAC@@_8.6
$/ = "%\n"
srand

File.open('/usr/share/fortune/humorists').each do |line|
		adage = line if rand($.) < 1
end

puts adage


# @@PLEAC@@_8.7
# Helper function from chapter 4.17: Randomizing an Array
def fisher_yates_shuffle(a)
		(a.size-1).downto(1) { |i|
				j = rand(i+1)
				a[i], a[j] = a[j], a[i] if i != j
		}
end

# Open the file, default mode is reading. Read all lines into an array.
lines = File.open('to_randomize.txt').collect

# Shuffle them.
fisher_yates_shuffle(lines)

# Print the shuffled lines.
puts lines 


# @@PLEAC@@_8.10
begin
		fh = File.open(file, "r+")
		addr = fh.tell unless fh.eof while fh.gets
		fh.truncate(addr)
rescue SystemCallError
		$stderr.puts "#$!"
end


# @@PLEAC@@_9.0
entry = File.stat("/usr/bin/vi")
entry = File.stat("/usr/bin")
entry = File.stat(INFILE)

entry = File.stat("/usr/bin/vi")
ctime = entry.ctime
size  = entry.size

f = File.open(filename, "r")

## There is no -T equivalent in Ruby, but we can still test emptiness
if test(?s, filename)
	puts "#{filename} doesn't have text in it."
	exit
end

Dir.new("/usr/bin").each do |filename|
	puts "Inside /usr/bin is something called #{filename}"
end


# @@PLEAC@@_9.1
file = File.stat("filename")
readtime, writetime = file.atime, file.mtime
file.utime(readtime, writetime)  

SECONDS_PER_DAY = 60 * 60 * 24
file = File.stat("filename")
atime, mtime = file.atime, file.mtime

atime -= 7 * SECONDS_PER_DAY
mtime -= 7 * SECONDS_PER_DAY

File.utime(atime, mtime, file)
mtime = File.stat(file).mtime
File.utime(Time.new, mtime, file)
File.utime(Time.new, File.stat("testfile").mtime, file)

#-----------------------------
#!/usr/bin/ruby -w
## uvi - vi a file without changing it's access times

if ARGV.length != 1
	puts "usage: uvi filename"
	exit
end
file = ARGV[0]
atime, mtime = File.stat(file).atime, File.stat(file).mtime
system(ENV["EDITOR"] || "vi", file)
File.utime(atime, mtime, file)
#-----------------------------


# @@PLEAC@@_9.2
File.unlink(FILENAME)

err_flg = false
filenames.each do |file|
	begin
		File.unlink(file)
	rescue
		err_flg = $!
	end
end
err_flg and raise "Couldn't unlink all of #{filenames.join(" ")}: #{err_flg}"

File.unlink(file)

count = filenames.length
filenames.each do |file|
	begin
		File.unlink(file)
	rescue
		count -= 1
	end
end
if count != filenames.length
	STDERR.puts "could only delete #{count} of #{filenames.length} files"
end


# @@PLEAC@@_9.3
require "ftools"
File.copy(oldfile, newfile)

infile  = File.open(oldfile, "r")
outfile = File.open(newfile, "w")

blksize = infile.stat.blksize
# This doesn't handle partial writes or ^Z
# like the Perl version does.
while (line = infile.read(blksize))
	outfile.write(line)
end

infile.close
outfile.close

system("cp #{oldfile} #{newfile}")    # unix
system("copy #{oldfile} #{newfile}")  # dos, vms

require "ftools"
File.copy("datafile.dat", "datafile.bak")
File.move("datafile.new", "datafile.dat")


# @@PLEAC@@_9.4
$seen = {} # must use global var to be seen inside of method below

def do_my_thing(filename)
		dev, ino = File.stat(filename).dev, File.stat(filename).ino
		unless $seen[[dev, ino]]
				# do something with $filename because we haven't
				# seen it before
		end
		$seen[[dev, ino]] = $seen[[dev, ino]].to_i + 1
end

files.each do |filename|
		dev, ino = File.stat(filename).dev, File.stat(filename).ino
		if !$seen.has_key?([dev, ino])
				$seen[[dev, ino]] = []
		end
		$seen[[dev, ino]].push(filename)
end

$seen.keys.sort.each do |devino|
		ino, dev = devino
		if $seen[devino].length > 1
				# $seen[devino] is a list of filenames for the same file
		end
end


# @@PLEAC@@_9.5
Dir.open(dirname) do |dir|
		dir.each do |file|
				# do something with dirname/file
				puts file
		end
end
# Dir.close is automatic

# No -T equivalent in Ruby

dir.each do |file|
		next if file =~ /^\.\.?$/
		# ...
end

def plainfiles(dir)
		dh = Dir.open(dir)
		dh.entries.grep(/^[^.]/).
				map      {|file| "#{dir}/#{file}"}.
				find_all {|file| test(?f, file)}.
				sort
end


# @@PLEAC@@_9.6
list = Dir.glob("*.c")

dir = Dir.open(path)
files = dir.entries.grep(/\.c$/)
dir.close

files = Dir.glob("*.c")
files = Dir.open(path).entries.grep(/\.[ch]$/i)

dir = Dir.new(path)
files = dir.entries.grep(/\.[ch]$/i)

begin
	d = Dir.open(dir)
rescue Errno::ENOENT
	raise "Couldn't open #{dir} for reading: #{$!}"
end

files = []
d.each do |file|
	puts file
	next unless file =~ /\.[ch]$/i

	filename = "#{dir}/#{file}"
	# There is no -T equivalent in Ruby, but we can still test emptiness
	files.push(filename) if test(?s, filename)
end

dirs.entries.grep(/^\d+$/).
						 map    { |file| [file, "#{path}/#{file}"]} .
						 select { |file| test(?d, file[1]) }.
						 sort   { |a,b|  a[0] <=> b[0] }.
						 map    { |file| file[1] }


# @@PLEAC@@_9.7
require 'find'
Find.find(dirlist) do |file|
	# do whatever
end

require 'find'
argv = ARGV.empty? ? %w{.} : ARGV
Find.find(*argv) do |file|
	print file, (test(?d, file) ? "/\n" : "\n")
end

require 'find'
argv = ARGV.empty? ? %w{.} : ARGV
sum = 0
Find.find(*argv) do |file|
	size = test(?s, file) || 0
	sum += size
end
puts "#{argv.join(' ')} contains #{sum} bytes"

require 'find'
argv = ARGV.empty? ? %w{.} : ARGV
saved_size, saved_name = -1, ""
Find.find(*argv) do |file|
	size = test(?s, file) || 0
	next unless test(?f, file) && size > saved_size
	saved_size = size
	saved_name = file
end
puts "Biggest file #{saved_name} in #{argv.join(' ')} is #{saved_size}"

require 'find'
argv = ARGV.empty? ? %w{.} : ARGV
age, name = nil
Find.find(*argv) do |file|
	mtime = File.stat(file).mtime
	next if age && age > mtime
	age = mtime
	name = file
end
puts "#{name} #{age}"

#-----------------------------
#!/usr/bin/ruby -w
# fdirs - find all directories
require 'find'
argv = ARGV.empty? ? %w{.} : ARGV
File.find(*argv) { |file| puts file if test(?d, file) }
#-----------------------------


# @@PLEAC@@_9.8
require 'fileutils'

puts "Usage #{$0} dir ..." if ARGV.empty?
ARGV.each do |dir|
	FileUtils.rmtree(dir)
end


# @@PLEAC@@_9.9
require 'ftools'
names.each do |file|
	newname = file
	begin
		File.move(file, newname)
	rescue Errno::EPERM
		$stderr.puts "Couldn't rename #{file} to #{newname}: #{$!}"
	end
end

require 'ftools'
op = ARGV.empty? ? (raise "Usage: rename expr [files]\n") : ARGV.shift
argv = ARGV.empty? ? $stdin.readlines.map { |f| f.chomp } : ARGV
argv.each do |file|
	was = file
	file = eval("file.#{op}")
	File.move(was, file) unless was == file
end


# @@PLEAC@@_9.10
base = File.basename(path)
dir  = File.dirname(path)
# ruby has no fileparse equivalent
dir, base = File.split(path)
ext = base.scan(/\..*$/).to_s

path = '/usr/lib/libc.a'
file = File.basename(path)
dir  = File.dirname(path)

puts "dir is #{dir}, file is #{file}"
# dir is /usr/lib, file is libc.a

path = '/usr/lib/libc.a'
dir, filename = File.split(path)
name, ext = filename.split(/(?=\.)/)
puts "dir is #{dir}, name is #{name}, ext is #{ext}"
#   NOTE: The Ruby code prints
#   dir is /usr/lib, name is libc, extension is .a
#     while the Perl code prints a '/' after the directory name
#   dir is /usr/lib/, name is libc, extension is .a

# No fileparse_set_fstype() equivalent in ruby

def extension(path)
		ext = path.scan(/\..*$/).to_s
		ext.sub(/^\./, "")
end


# @@PLEAC@@_9.11
#-----------------------------
#!/usr/bin/ruby -w
# symirror - build spectral forest of symlinks

require 'find'
require 'fileutils'

raise "usage: #{$0} realdir mirrordir" unless ARGV.size == 2

srcdir,dstdir = ARGV
srcmode = File::stat(srcdir).mode
Dir.mkdir(dstdir, srcmode & 07777) unless test(?d, dstdir)

# fix relative paths
Dir.chdir(srcdir) {srcdir = Dir.pwd}
Dir.chdir(dstdir) {dstdir = Dir.pwd}

Find.find(srcdir) do |srcfile| 
		if test(?d, srcfile)
				dest = srcfile.sub(/^#{srcdir}/, dstdir)
				dmode = File::stat(srcfile).mode & 07777
				Dir.mkdir(dest, dmode) unless test(?d, dest)
				a = Dir["#{srcfile}/*"].reject{|f| test(?d, f)}
				FileUtils.ln_s(a, dest)
		end
end


# @@PLEAC@@_9.12
# we use the Getopt/Declare library here for convenience:
#   http://raa.ruby-lang.org/project/getoptdeclare/
#-----------------------------
#!/usr/bin/ruby -w
# lst - list sorted directory contents (depth first)

require 'find'
require 'etc'
require "Getopt/Declare"

# Note: in the option-spec below there must by at least one hard
# tab in between each -option and its description. For example
#    -i <tab> read from stdin

opts = Getopt::Declare.new(<<'EOPARAM')
		============
		Input Format:
				-i      read from stdin
		============
		Output Format:
				-l      long listing
				-r      reverse listing
		============
		Sort on: (one of)
				-m      mtime (modify time - default)
								{$sort_criteria = :mtime}
				-u      atime (access time)
								{$sort_criteria = :atime}
				-c      ctime (inode change time)
								{$sort_criteria = :ctime}
				-s      size
								{$sort_criteria = :size}
				[mutex: -m -u -c -s]

EOPARAM

$sort_criteria ||= :mtime
files = {}
DIRS = opts['-i'] ? $stdin.readlines.map{|f|f.chomp!} : ARGV
DIRS.each do |dir|
		Find.find(dir) do |ent|
				files[ent] = File::stat(ent)
		end
end
entries = files.keys.sort_by{|f| files[f].send($sort_criteria)}
entries = entries.reverse unless opts['-r']

entries.each do |ent|
		unless opts['-l']
				puts ent
				next
		end
		stats = files[ent]
		ftime = stats.send($sort_criteria == :size ? :mtime : $sort_criteria)
		printf "%6d %04o %6d %8s %8s %8d %s %s\n",
				stats.ino,
				stats.mode & 07777,
				stats.nlink,
				ETC::PASSWD[stats.uid].name,
				ETC::GROUP[stats.gid].name,
				stats.size,
				ftime.strftime("%a %b %d %H:%M:%S %Y"),
				ent
end


# @@PLEAC@@_10.0
def hello
		$greeted += 1      # in Ruby, a variable beginning with $ is global (can be any type of course)
		puts "hi there!"
end

# We need to initialize $greeted before it can be used, because "+=" is waiting a Numeric object
$greeted = 0
hello                  # note that appending () is optional to function calls with no parameters


# @@PLEAC@@_10.1
# In Ruby, parameters are named anyway
def hypotenuse(side1, side2)
		Math.sqrt(side1**2 + side2**2)    # the sqrt function comes from the Math module
end
diag = hypotenuse(3, 4)

puts hypotenuse(3, 4)

a = [3, 4]
print hypotenuse(*a)                  # the star operator will magically convert an Array into a "tuple"

both = men + women

# In Ruby, all objects are references, so the same problem arises; we then return a new object
nums = [1.4, 3.5, 6.7]
def int_all(n)
		n.collect { |v| v.to_i }
end
ints = int_all(nums)

nums = [1.4, 3.5, 6.7]
def trunc_em(n)
		n.collect! { |v| v.to_i }         # the bang-version of collect modifies the object
end
trunc_em(nums)

# Ruby has two chomp version:
# ``chomp'' chomps the record separator and returns what's expected
# ``chomp!'' does the same but also modifies the parameter object


# @@PLEAC@@_10.2
def somefunc
		variable = something  # variable is local by default
end

name, age = ARGV
start     = fetch_time

a, b = pair               # will succeed if pair is an Array object (like ARGV is)
c = fetch_time

# In ruby, run_check can't access a, b, or c until they are
# explicitely defined global (using leading $), even if they are
# both defined in the same scope

def check_x(x)
		y = "whatever"
		run_check
		if $condition
				puts "got $x"
		end
end

# The following will keep a reference to the array, though the
# results will be slightly different from perl: the last element
# of $global_array will be itself an array
def save_array(ary)
		$global_array << ary
end

# The following gives the same results as in Perl for $global_array,
# though it doesn't illustrate anymore the way to keep a reference
# to an object: $global_array is extended with the elements of ary
def save_array(ary)
		$global_array += ary
end


# @@PLEAC@@_10.3
# In Ruby, AFAIK a method cannot access "local variables" defined
# upper scope; mostly because everything is an object, so you'll
# do the same by defining an attribute or a static attribute

# In Ruby the BEGIN also exists:
BEGIN { puts "hello from BEGIN" }
puts "hello from main"
BEGIN { puts "hello from 2nd BEGIN" }
# gives:
#   hello from BEGIN
#   hello from 2nd BEGIN
#   hello from main

# In Ruby, it can be written as a static method and a static
# variable
class Counter
		@@counter = 0
		def Counter.next_counter; @@counter += 1; end
end

# There is no need of BEGIN since the variable will get
# initialized when parsing
class Counter
		@@counter = 42
		def Counter.next_counter; @@counter += 1; end
		def Counter.prev_counter; @@counter -= 1; end
end


# @@PLEAC@@_10.4
# You can either get the whole trace as an array of strings, each
# string telling which file, line and method is calling:
caller

# ...or only the last caller
caller[0]

# We need to extract just the method name of the backtrace:
def whoami;  caller()[0] =~ /in `([^']+)'/ ? $1 : '(anonymous)'; end
def whowasi; caller()[1] =~ /in `([^']+)'/ ? $1 : '(anonymous)'; end


# @@PLEAC@@_10.5
# In Ruby, every value is a reference on an object, thus there is
# no such problem
array_diff(array1, array2)

def add_vecpair(a1, a2)
		results = []
		a1.each_index { |i| results << (a1[i] + a2[i]) }
		results
end
a = [1, 2]
b = [5, 8]
c = add_vecpair(a, b)
p c

# Add this to the beginning of the function to check if we were
# given two arrays
a1.type == Array && a2.type == Array or
		raise "usage: add_vecpair array1 array2 (was used with: #{a1.type} #{a2.type})"


# @@PLEAC@@_10.6
# There is no return context in Ruby


# @@PLEAC@@_10.7
# Like in Perl, we need to fake with a hash, but it's dirty :-(
def thefunc(param_args)
		args = { 'INCREMENT' => '10s', 'FINISH' => '0', 'START' => 0 }
		args.update(param_args)
		if (args['INCREMENT']  =~ /m$/ )
				# .....
		end
end

thefunc({ 'INCREMENT' => '20s', 'START' => '+5m', 'FINISH' => '+30m' })
thefunc({})


# @@PLEAC@@_10.8
# there is no "undef" direct equivalent but there is the slice equiv:
a, c = func.indexes(0, 2)


# @@PLEAC@@_10.9
# Ruby has no such limitation:
def somefunc
		ary = []
		hash = {}
		# ...
		return ary, hash
end
arr, dict = somefunc

array_of_hashes = fn
h1, h2, h3      = fn


# @@PLEAC@@_10.10
return
# or (equivalent)
return nil


# @@PLEAC@@_10.11
# You can't prototype in Ruby regarding types :-(
# Though, you can force the number of arguments:
def func_with_no_arg; end
def func_with_no_arg(); end
def func_with_one_arg(a1); end
def func_with_two_args(a1, a2); end
def func_with_any_number_of_args(*args); end


# @@PLEAC@@_10.12
raise "some message"        # raise exception

begin
		val = func
rescue Exception => msg
		$stderr.puts "func raised an exception: #{msg}"
end

# In Ruby the rescue statement uses an exception class, every
# exception which is not matched is still continuing
begin
		val = func
rescue FullMoonError
		...
end


# @@PLEAC@@_10.13
# Saving Global Values
# Of course we can just save the value and restore it later:
def print_age
		puts "Age is #{$age}"
end

$age = 18         # global variable
print_age()
if condition
		safeage = $age
		$age = 23
		print_age()
		$age = safeage
end

# We can also use a method that saves the global variable and
# restores it automatically when the block is left:

def local(var)
		eval("save = #{var.id2name}")
		begin
				result = yield
		ensure
				# we want to call this even if we got an exception
				eval("#{var.id2name} = save")
		end
		result
end

condition = true
$age = 18
print_age()
if condition
		local(:$age) {
				$age = 23
				print_age()
		}
end
print_age()

# There is no need to use local() for filehandles or directory
# handles in ruby because filehandles are normal objects.


# @@PLEAC@@_10.14
# In Ruby you may redefine a method [but not overload it :-(]
# just by defining again with the same name.
def foo; puts 'foo'; end
def foo; puts 'bar'; end
foo
#=> bar

# You can also take a reference to an existing method before
# redefining a new one, using the `alias' keyword
def foo; puts 'foo'; end
alias foo_orig foo
def foo; puts 'bar'; end
foo_orig
foo
#=> foo
#=> bar

# AFAIK, there is no direct way to create a new method whose name
# comes from a variable, so use "eval"
colors = %w(red blue green yellow orange purple violet)
colors.each { |c|
		eval <<-EOS
		def #{c}(*a)
				"<FONT COLOR='#{c}'>" + a.to_s + "</FONT>"
		end
		EOS
} 


# @@PLEAC@@_10.15
def method_missing(name, *args)
		"<FONT COLOR='#{name}'>" + args.join(' ') + "</FONT>"
end
puts chartreuse("stuff")


# @@PLEAC@@_10.16
def outer(arg)
		x = arg + 35
		inner = proc { x * 19 }
		x + inner.call()
end


# @@PLEAC@@_10.17
#!/usr/bin/ruby -w
# mailsort - sort mbox by different criteria
require 'English'
require 'Date'

# Objects of class Mail represent a single mail.
class Mail
		attr_accessor :no
		attr_accessor :subject
		attr_accessor :fulltext
		attr_accessor :date

		def initialize
				@fulltext = ""
				@subject = ""
		end

		def append(para)
				@fulltext << para
		end

		# this is called if you call puts(mail)
		def to_s
				@fulltext
		end
end

# represents a list of mails.
class Mailbox < Array

		Subjectpattern = Regexp.new('Subject:\s*(?:Re:\s*)*(.*)\n')
		Datepattern = Regexp.new('Date:\s*(.*)\n')

		# reads mails from open file and stores them
		def read(file)
				$INPUT_RECORD_SEPARATOR = ''  # paragraph reads
				msgno = -1
				file.each { |para|
						if para =~ /^From/
								mail = Mail.new
								mail.no = (msgno += 1)
								md = Subjectpattern.match(para)
								if md
										mail.subject = md[1]
								end
								md = Datepattern.match(para)
								if md
										mail.date = DateTime.parse(md[1])
								else
										mail.date = DateTime.now
								end
								self.push(mail)
						end
						mail.append(para) if mail
				}
		end

		def sort_by_subject_and_no
				self.sort_by { |m|
						[m.subject, m.no]
				}
		end

		# sorts by a list of attributs of mail, given as symbols
		def sort_by_attributs(*attrs)
				# you can sort an Enumerable by an array of
				# values, they would be compared
				# from ary[0] to ary[n]t, say:
				# ['b',1] > ['a',10] > ['a',9]
				self.sort_by { |elem|
						attrs.map { |attr|
								elem.send(attr)
						}
				}
		end

end

mailbox = Mailbox.new
mailbox.read(ARGF)

# print only subjects sorted by subject and number
for m in mailbox.sort_by_subject_and_no
		puts(m.subject)
end

# print complete mails sorted by date, then subject, then number
for m in mailbox.sort_by_attributs(:date, :subject)
		puts(m)
end


# @@PLEAC@@_11.2
# In Ruby, everything is an object (i.e. reference), including arrays.
# Arrays are, thus, directly supported as values of a hash.
#-----------------------------
# Assumes an array was already put into hash["KEYNAME"], e.g.:
# hash = {}
# hash["KEYNAME"] = [5, 10, 15]
hash["KEYNAME"] << "new value"
#-----------------------------
# Join is used to separate elements of the array with commas.
hash.each { |key, value|
		puts "#{key}: #{value.join(', ')}"
}
#-----------------------------
hash["a key"] = [3, 4, 5]
#-----------------------------
values = hash["a key"]
#-----------------------------
hash["a key"] << value
#-----------------------------
# Example hash:
# phone2name = { 123555888 => ["Joe", "Jenny"], 888555444 => ["Anne", "Mark"] }
residents = phone2name[number]
#-----------------------------
residents = phone2name.has_key?(number) ? phone2name[number] : []
#-----------------------------


# @@PLEAC@@_11.9
#-----------------------------
record = {
		:NAME   => "Jason",
		:EMPNO  => 132,
		:TITLE  => "deputy peon",
		:AGE    => 23,
		:SALARY => 37.000,
		:PALS   => [ "Norbert", "Rhys", "Phineas"]
}

puts "I am #{record[:NAME]}, and my pals are #{record[:PALS].join(', ')}."
#-----------------------------
# store record
byname = {}
byname[record[:NAME]] = record

# later on, look up by name
rp = byname["Aron"]
puts "Aron is employee #{rp[:EMPNO]}." if rp

# give jason a new pal
byname["Jason"][:PALS] << "Theodore"
puts "Jason now has #{byname["Jason"][:PALS].length} pals"
#-----------------------------
# Go through all records
byname.each do |name, record|
		puts "#{name} is employee number #{record[:EMPNO]}"
end    
#-----------------------------
# store record
employees = {}
employees[record[:EMPNO]] = record

# lookup by id
rp = employees[132]
puts "employee number 132 is #{rp[:NAME]}" if rp
#-----------------------------
byname["Jason"][:SALARY] *= 1.035
#-----------------------------
peons = employees.values.select { |record| record[:TITLE] =~ /peon/i }
tsevens = employees.values.select { |record| record[:AGE] == 27 }
#-----------------------------
# Go through all records
byname.values.sort { |a, b| a[:AGE] <=> b[:AGE] }.each do |rp|
				puts "#{rp[:NAME]} is age #{rp[:AGE]}."
end
#-----------------------------
# A little different then Perl: we can use hash in Ruby.
# use @byage, _a hash_ of arrays of records
byage = {}
byage[record[:AGE]] = [] if byage[record[:AGE]] == nil
byage[record[:AGE]] << record
#-----------------------------
byage.each do |age, rps|
		print "Age #{age}: "
		rps.each do |rp|
				print rp[:NAME], " "
		end
		print "\n"
end
#-----------------------------
byage.each do |age, rps|
		puts "Age #{age}: #{byage[age].collect { |e| e[:NAME] }.join(', ')}"
end
#-----------------------------


# @@PLEAC@@_11.7
def mkcounter(count)
		start  = count 
		bundle = { 
				"NEXT"   => proc { count += 1 },
				"PREV"   => proc { count -= 1 },
				"RESET"  => proc { count = start }
		}
		bundle["LAST"] = bundle["PREV"]
		return bundle
end

c1 = mkcounter(20)
c2 = mkcounter(77)

puts "next c1: #{c1["NEXT"].call}"  # 21 
puts "next c2: #{c2["NEXT"].call}"  # 78 
puts "next c1: #{c1["NEXT"].call}"  # 22 
puts "last c1: #{c1["PREV"].call}"  # 21 
puts "last c1: #{c1["LAST"].call}"  # 20 
puts "old  c2: #{c2["RESET"].call}" # 77 


# @@PLEAC@@_11.15
class Binary_tree
		def initialize(val)
				@value = val
				@left = nil
				@right = nil
		end
		
		# insert given value into proper point of
		# provided tree.  If no tree provided, 
		# use implicit pass by reference aspect of @_
		# to fill one in for our caller.
		def insert(val)
				if val < @value then
						if @left then
								@left.insert(val)
						else
								@left = Binary_tree.new(val)
						end
				elsif val > @value then
						if @right then
								@right.insert(val)
						else
								@right = Binary_tree.new(val)
						end
				else
						puts "double"
						# do nothing, no double values
				end
		end

		# recurse on left child, 
		# then show current value, 
		# then recurse on right child.  
		def in_order
				@left.in_order if @left
				print @value, " "
				@right.in_order if @right
		end
		
		# show current value, 
		# then recurse on left child, 
		# then recurse on right child.
		def pre_order
				print @value, " "
				@left.pre_order if @left
				@right.pre_order if @right
		end

		# recurse on left child, 
		# then recurse on right child,
		# then show current value.
		def post_order
				@left.post_order if @left
				@right.post_order if @right
				print @value, " "
		end

		# find out whether provided value is in the tree.
		# if so, return the node at which the value was found.
		# cut down search time by only looking in the correct
		# branch, based on current value.
		def search(val)
				if val == @value then
						return self
				elsif val < @value then
						return @left.search(val) if @left
						return nil
				else
						return @right.search(val) if @right
						return nil
				end
		end
end

# first generate 20 random inserts
test = Binary_tree.new(0)
for a in 0..20
		test.insert(rand(1000)) 
end

# now dump out the tree all three ways
print "Pre order:  ";  test.pre_order;  puts ""
print "In order:  ";  test.in_order;  puts ""
print "Post order:  ";  test.post_order;  puts ""

print "search?"
while gets
		print test.search($_.to_i)
		print "\nsearch?"
end


# @@PLEAC@@_12.0
# class and module names need to have the first letter capitalized
module Alpha
		NAME = 'first'
end
module Omega
		NAME = 'last'
end
puts "Alpha is #{Alpha::NAME}, Omega is #{Omega::NAME}"

# ruby doesn't differentiate beteen compile-time and run-time
require 'getoptlong.rb'
require 'getoptlong'     # assumes the .rb
require 'cards/poker.rb'
require 'cards/poker'    # assumes the .rb
load    'cards/poker'    # require only loads the file once

module Cards
		module Poker
				@card_deck = Array.new # or @card_deck = []
				def shuffle
				end
		end
end


# @@PLEAC@@_12.1
# a module exports all of its functions
module Your_Module
		def self.function
				# this would be called as Your_Module.function
		end
		
		def Your_Module.another
				# this is the same as above, but more specific
		end
end

# @@PLEAC@@_12.2
begin
		require 'nonexistent'
rescue LoadError
		puts "Couldn't load #{$!}"  # $! contains the last error string
end

# @@PLEAC@@_12.4
# module variables are private unless access functions are defined
module Alpha
		@aa = 10
		@bb = 11
		
		def self.put_aa
				puts @aa
		end
		
		def self.bb=(val)
				@bb = val
		end
end

Alpha.bb = 12
# Alpha.aa = 10 # error, no aa=method


# @@PLEAC@@_12.5
# caller provides a backtrace of the call stack
module MyModule
		def find_caller
				caller
		end

		def find_caller2(i)
				caller(i) # an argument limits the size of the stack returned
		end
end


# @@PLEAC@@_12.6
BEGIN {
		$logfile = '/tmp/mylog' unless defined? $logfile
		$LF = File.open($logfile, 'a')
}

module Logger
		def self.logmsg(msg)
				$LF.puts msg
		end

		logmsg('startup')
end

END {
		Logger::logmsg('shutdown')
		$LF.close
}


# @@PLEAC@@_12.7
#-----------------------------
# results may be different on your system
# % ruby -e "$LOAD_PATH.each_index { |i| printf("%d %s\n", i, $LOAD_PATH[i] }
#0 /usr/local/lib/site_ruby/1.6
#1 /usr/local/lib/site_ruby/1.6/i386-linux
#2 /usr/local/lib/site_ruby/
#3 /usr/lib/ruby/1.6
#4 /usr/lib/ruby/1.6/i136-linux
#5 .
#-----------------------------
# syntax for sh, bash, ksh, or zsh
#$ export RUBYLIB=$HOME/rubylib

# syntax for csh or tcsh
# % setenv RUBYLIB ~/rubylib
#-----------------------------
$LOAD_PATH.unshift "/projects/spectre/lib";


# @@PLEAC@@_12.8
# equivalents in ruby are mkmf, SWIG, or Ruby/DL depending on usage


# @@PLEAC@@_12.9
# no equivalent in ruby


# @@PLEAC@@_12.10
# no equivalent in ruby


# @@PLEAC@@_12.11
module FineTime
		def self.time
				# to be defined later
		end
end


module FineTime
		def self.time
				"its a fine time"
		end
end

puts FineTime.time #=> "its a fine time"


# @@PLEAC@@_12.12
def even_only(n)
		raise "#{n} is not even" if (n & 1) != 0  # one way to test
		# ...
end
def even_only(n)
		$stderr.puts "#{n} is not even" if (n & 1) != 0
		# ...
end


# @@PLEAC@@_12.17
# The library archive for ruby is called Ruby Application archive,
# or shorter RAA, and can be found at http://raa.ruby-lang.org.
# A typical library is installed like this:
# % gunzip some-module-4.54.tar.gz
# % tar xf some-module-4.54.tar
# % cd some-module-4.54.tar
# % ruby install.rb config
# % ruby install.rb setup
# get superuser previleges here if needed for next step
# % ruby install.rb install

# Some modules use a different process,
# you should find details in the documentation
# Here is an example of such a different process
# % ruby extconf.rb
# % make
# % make install

# If you want the module installed in your own directory:
# For ruby version specific libraries
# % ruby install.rb config --site-ruby=~/lib
# For version independent libraries
# % ruby install.rb config --site-ruby-common=~/lib

# Information about possible options for config
# % ruby install.rb --help

# If you have your own complete distribution
# % ruby install.rb --prefix=path=~/ruby-private


# @@PLEAC@@_13.0
# Classes and objects in Ruby are rather straigthforward
class Person
		# Class variables (also called static attributes) are prefixed by @@
		@@person_counter=0
		
		# object constructor
		def initialize(age, name, alive = true)     # Default arg like in C++
				@age, @name, @alive = age, name, alive  # Object attributes are prefixed by '@'
				@@person_counter += 1
					# There is no '++' operator in Ruby. The '++'/'--'  operators are in fact 
					# hidden assignments which affect variables, not objects. You cannot accomplish
					# assignment via method. Since everything in Ruby is object, '++' and '--' 
					# contradict Ruby OO ideology. Instead '-=' and '+=' are used.
		end
		
		attr_accessor :name, :age   # This creates setter and getter methods for @name
																# and @age. See 13.3 for detailes.
		
		# methods modifying the receiver object usually have the '!' suffix
		def die!
				@alive = false
				puts "#{@name} has died at the age of #{@age}."
				@alive
		end
		
		def kill(anotherPerson)
				print @name, ' is killing ', anotherPerson.name, ".\n"
				anotherPerson.die!
		end

		# methods used as queries
		# usually have the '?' suffix    
		def alive?
				@alive && true
		end
		
		def year_of_birth
				Time.now.year - @age
		end
		
		# Class method (also called static method)
		def Person.number_of_people
				@@person_counter
		end
end

# Using the class:
# Create objects of class Person
lecter = Person.new(47, 'Hannibal')
starling = Person.new(29, 'Clarice', true)
pazzi = Person.new(40, 'Rinaldo', true)

# Calling a class method
print "There are ", Person.number_of_people, " Person objects\n"

print pazzi.name, ' is ', (pazzi.alive?) ? 'alive' : 'dead', ".\n"
lecter.kill(pazzi)
print pazzi.name, ' is ', (pazzi.alive?) ? 'alive' : 'dead', ".\n"

print starling.name , ' was born in ', starling.year_of_birth, "\n"


# @@PLEAC@@_13.1
# If you don't need any initialisation in the constructor,
# you don't need to write a constructor.
class MyClass
end

class MyClass
		def initialize
				@start = Time.new
				@age = 0
		end
end

class MyClass
		def initialize(inithash)
				@start = Time.new
				@age = 0
				for key, value in inithash
						instance_variable_set("@#{key}", value)
				end
		end
end

# @@PLEAC@@_13.2
# Objects are destroyed by the garbage collector.
# The time of destroying is not predictable.
# The ruby garbage collector can handle circular references,
# so there is no need to write destructor for that.

# There is no direct support for destructor.
# You can call a custom function, or more specific a proc object, when the
# garbage collector is about to destruct the object, but it is unpredictable
# when this occurs.
# Also if such a finalizer object has a reference to the orignal object,
# this may prevent the original object to get garbage collected.
# Because of this problem the finalize method below is
# a class method and not a instance method.
# So if you need to free resources for an object, like
# closing a socket or kill a spawned subprocess,
# you should do it explicitly.

class MyClass
		def initialize
				ObjectSpace.define_finalizer(self,
																		 self.class.method(:finalize).to_proc)
		end
		def MyClass.finalize(id)
				puts "Object #{id} dying at #{Time.new}"
		end
end

# test code
3.times {
		MyClass.new
}
ObjectSpace.garbage_collect


# @@PLEAC@@_13.3
# You can write getter and setter methods in a natural way:
class Person
		def name
				@name
		end
		def name=(name)
				@name = name
		end
end

# But there is a better and shorter way
class Person
		attr_reader :age
		attr_writer :name  
		# attr_reader and attr_writer are actually methods in class Class
		# which set getter and setter methods for you.
end

# There is also attr_accessor to create both setters and getters
class Person
		attr_accessor :age, :name
end


# @@PLEAC@@_13.4
class Person
		# Class variables (also called static attributes) are prefixed by @@
		@@person_counter = 0
		
		def Person.population
				@@person_counter
		end
		def initialize
				@@person_counter += 1
				ObjectSpace.define_finalizer(self,
																		 self.class.method(:finalize).to_proc)
		end
		def Person.finalize(id)
				@@person_counter -= 1
		end
end
people = []
10.times {
		people.push(Person.new)
}
printf("There are %d people alive", Person.population)


FixedArray.class_max_bounds = 100
alpha = FixedArray.new
puts "Bound on alpha is #{alpha.max_bounds}"

beta = FixedArray.new
beta.max_bounds = 50                    # calls the instance method
beta.class.class_max_bounds = 50        # alternative, calls the class method
puts "Bound on alpha is #{alpha.max_bounds}"
		
class FixedArray
		@@bounds = 7
		
		def max_bounds
				@@max_bounds
		end
		# instance method, which sets the class variable
		def max_bounds=(value)
				@@max_bounds = value
		end
		# class method. This can only be called on a class,
		# but not on the instances
		def FixedArray.class_max_bounds=(value)
				@@max_bounds = value
		end
end


# @@PLEAC@@_13.5
PersonStruct = Struct.new("Person", :name, :age, :peers)
# creates a class "Person::Struct", which is accessiable with the
# constant "PersonStruct"
p = PersonStruct.new
p = Struct::Person.new                      # alternative using the classname
p.name = "Jason Smythe"
p.age = 13
p.peers = ["Wilbur", "Ralph", "Fred"]
p[:peers] = ["Wilbur", "Ralph", "Fred"]     # alternative access using symbol
p["peers"] = ["Wilbur", "Ralph", "Fred"]    # alternative access using name of field
p[2] = ["Wilbur", "Ralph", "Fred"]          # alternative access using index of field
puts "At age #{p.age}, #{p.name}'s first friend is #{p.peers[0]}"

# The fields of a struct have no special type, like other ruby variables
# you can put any objects in. Therefore the discussions how to specify
# the types of the fields do not apply to ruby.

FamilyStruct = Struct.new("Family", :head, :address, :members)
folks = FamilyStruct.new
folks.head = PersonStruct.new
dad = folks.head
dad.name = "John"
dad.age = 34

# supply of own accessor method for the struct for error checking
class PersonStruct
		def age=(value)
				if !value.kind_of?(Integer)
						raise(ArgumentError, "Age #{value} isn't an Integer")
				elsif value > 150
						raise(ArgumentError, "Age #{value} is unreasonable")
				end
				@age = value
		end
end


# @@PLEAC@@_13.6
# The ruby Object class defines a dup and a clone method.
# The dup method is recommended for prototype object creation.
# The default implementation makes a shallow copy,
# but each class can override it, for example to make a deep copy.

# If you want to call 'new' directly on the instances,
# you can create a instance method "new", which returns a new duplicate.
# This method is distinct from the class method new.
#
class A
		def new
				dup
		end
end

ob1 = A.new
# later on
ob2 = ob1.new


# @@PLEAC@@_13.7
methname = 'flicker'
obj.send(methname, 10)      # calls obj.flicker(10)

# call three methods on the object, by name
['start', 'run', 'stop'].each do |method_string|
		obj.send(method_string)
end

# Another way is to create a Method object
method_obj = obj.method('flicker')
# And then call it
method_obj.call(10)


# @@PLEAC@@_13.8
# All classes in Ruby inherit from class Object
# and thus all objects share methods defined in this class

# the class of the object
puts any_object.type

# Ruby classes are actually objects of class Class and they
# respond to methods defined in Object class as well

# the superclass of this class
puts any_object.class.superclass

# ask an object whether it is an instance of particular class
n = 4.7
puts n.instance_of?(Float)    # true
puts n.instance_of?(Numeric)  # false

# ask an object whether it is an instance of class, one of the
# superclasses of the object, or modules included in it
puts n.kind_of?(Float)       # true (the class)
puts n.kind_of?(Numeric)     # true (an ancestor class)
puts n.kind_of?(Comparable)  # true (a mixin module)
puts n.kind_of?(String)      # false

# ask an object whether it can respond to a particular method
puts n.respond_to?('+')      # true
puts n.respond_to?('length') # false

# all methods an object can respond to
'just a string'.methods.each { |m| puts m }


# @@PLEAC@@_13.9
# Actually any class in Ruby is inheritable
class Person        
		attr_accessor :age, :name
		def initialize
				@name
				@age
		end
end
#-----------------------------
dude = Person.new
dude.name = 'Jason'
dude.age = 23
printf "%s is age %d.\n", dude.name, dude.age
#-----------------------------
# Inheriting from Person
class Employee < Person
		attr_accessor :salary
end
#-----------------------------
empl = Employee.new
empl.name = 'Jason'
empl.age = 23
empl.salary = 200
printf "%s is age %d, the salary is %d.\n", empl.name, empl.age, empl.salary
#-----------------------------
# Any built-in class can be inherited the same way
class WeirdString < String  
		def initialize(obj)
				super obj
		end
		def +(anotherObj)   # + method in this class is overridden
				# to return the sum of string lengths
				self.length + anotherObj.length  # 'self' can be omitted
		end  
end
#-----------------------------
a = WeirdString.new('hello')
b = WeirdString.new('bye')

puts a + b    # the overridden +
#=> 8
puts a.length # method from the superclass, String
#=> 5


# @@PLEAC@@_13.11
# In ruby you can override the method_missing method
# to have a solution similar to perls AUTOLOAD.
class Person

		def initialize
				@ok_fields = %w(name age peers parent)
		end

		def valid_attribute?(name)
				@ok_fields.include?(name)
		end

		def method_missing(namesymbol, *params)
				name = namesymbol.to_s
				return if name =~ /^A-Z/
				if name.to_s[-1] == ('='[0])       # we have a setter
						isSetter = true
						name.sub!(/=$/, '')
				end
				if valid_attribute?(name)
						if isSetter
								instance_variable_set("@#{name}", *params)
						else
								instance_variable_get("@#{name}", *params)
						end
				else
						# if no annestor is responsible,
						# the Object class will throw a NoMethodError exception
						super(namesymbol, *params)
				end
		end

		def new
				kid = Person.new
				kid.parent = self
				kid
		end

end

dad = Person.new
dad.name = "Jason"
dad.age = 23
kid = dad.new
kid.name = "Rachel"
kid.age = 2
puts "Kid's parent is #{kid.parent.name}"
puts dad
puts kid

class Employee < Person
		def initialize
				super
				@ok_fields.push("salary", "boss")
		end
		def ok_fields
				@ok_fields
		end
end


# @@PLEAC@@_13.13
# The ruby garbage collector pretends to cope with circular structures.
# You can test it with this code:
class RingNode
		attr_accessor :next
		attr_accessor :prev
		attr_reader :name

		def initialize(aName)
				@name = aName
				ObjectSpace.define_finalizer(self,
																		 self.class.method(:finalize).to_proc)
		end

		def RingNode.finalize(id)
				puts "Node #{id} dying"
		end

		def RingNode.show_all_objects
				ObjectSpace.each_object {|id|
						puts id.name if id.class == RingNode
				}
		end
end

def create_test
		a = RingNode.new("Node A")
		b = RingNode.new("Node B")
		c = RingNode.new("Node C")
		a.next = b
		b.next = c
		c.next = a
		a.prev = c
		c.prev = b
		b.prev = a

		a = nil
		b = nil
		c = nil
end

create_test
RingNode.show_all_objects
ObjectSpace.garbage_collect
puts "After garbage collection"
RingNode.show_all_objects


# @@PLEAC@@_13.14
class String
		def <=>(other)
				self.casecmp other
		end
end

# There is no way to directly overload the '""' (stringify) 
# operator in Ruby.  However, by convention, classes which 
# can reasonably be converted to a String will define a 
# 'to_s' method as in the TimeNumber class defined below.
# The 'puts' method will automatcally call an object's
# 'to_s' method as is demonstrated below.
# Furthermore, if a class defines a to_str method, an object of that
# class can be used most any place where the interpreter is looking 
# for a String value.

#---------------------------------------
# NOTE: Ruby has a builtin Time class which would usually be used 
# to manipulate time objects, the following is supplied for
# educational purposes to demonstrate operator overloading.
#
class TimeNumber
		attr_accessor  :hours,:minutes,:seconds
		def initialize( hours, minutes, seconds)
				@hours = hours
				@minutes = minutes
				@seconds = seconds
		end
		
		def to_s
				return sprintf( "%d:%02d:%02d", @hours, @minutes, @seconds)
		end

		def to_str
				to_s
		end

		def +( other)
				seconds = @seconds + other.seconds
				minutes = @minutes + other.minutes
				hours = @hours + other.hours
				if seconds >= 60
						seconds %= 60
						minutes += 1
				end
				if minutes >= 60
						minutes %= 60
						hours += 1
				end
				return TimeNumber.new(hours, minutes, seconds)
		end

		def -(other)
				raise NotImplementedError
		end

		def *(other)
				raise NotImplementedError
		end

		def /( other)
				raise NotImplementedError
		end
end

t1 = TimeNumber.new(0, 58, 59)
sec = TimeNumber.new(0, 0, 1)
min = TimeNumber.new(0, 1, 0)
puts t1 + sec + min + min

#-----------------------------
# StrNum class example: Ruby's builtin String class already has the 
# capabilities outlined in StrNum Perl example, however the '*' operator
# on Ruby's String class acts differently: It creates a string which
# is the original string repeated N times.
#
# Using Ruby's String class as is in this example:
x = "Red"; y = "Black"
z = x+y
r = z*3 # r is "RedBlackRedBlackRedBlack"
puts "values are #{x}, #{y}, #{z}, and #{r}"
print "#{x} is ", x < y ? "LT" : "GE", " #{y}\n"
# prints:
# values are Red, Black, RedBlack, and RedBlackRedBlackRedBlack
# Red is GE Black

#-----------------------------
class FixNum
		REGEX = /(\.\d*)/
		DEFAULT_PLACES = 0
		attr_accessor :value, :places
		def initialize(value, places = nil)
				@value = value
				if places
						@places = places
				else
						m = REGEX.match(value.to_s) 
						if m
								@places = m[0].length - 1
						else
								@places = DEFAULT_PLACES
						end
				end
		end

		def +(other)
				FixNum.new(@value + other.value, max(@places, other.places))
		end

		def *(other)
				FixNum.new(@value * other.value, max(@places, other.places))
		end

		def /(other)
				puts "Divide: #{@value.to_f/other.value.to_f}"
				result = FixNum.new(@value.to_f/other.value.to_f)
				result.places = max(result.places,other.places) 
				result
		end

		def to_s
				sprintf("STR%s: %.*f", self.class.to_s , @places, @value)   #.
		end  

		def to_str
				to_s
		end

		def to_i #convert to int
				@value.to_i
		end

		def to_f #convert to float`
				@value.to_f
		end

		private
		def max(a,b)
				a > b ? a : b
		end
end

def demo()
		x = FixNum.new(40)
		y = FixNum.new(12, 0)

		puts "sum of #{x} and #{y} is  #{x+y}"
		puts "product of #{x} and #{y} is #{x*y}"

		z = x/y
		puts "#{z} has #{z.places} places"
		unless z.places
				z.places = 2
		end

		puts "div of #{x} by #{y} is #{z}"
		puts "square of that is  #{z*z}"
end

if __FILE__ == $0
		demo()
end


# @@PLEAC@@_14.1
# There are dbm, sdbm, gdbm modules
# and the bdb module for accessing the berkeley db
# sdbm seem to be available on the most systems,
# so we use it here
#
require "sdbm"
SDBM.open("filename", 0666) { |dbobj|
		# raises exception if open error
		
		# the returned sdbm-dbobj has most of the methods of a hash
		v = dbobj["key"]
		dbobj["key"] = "newvalue"
		if dbobj.has_key?("key")
				# ...
		end
		dbobj.delete("key2")
}
# database is open only inside the block.

# It is also possible to use a open .. close pair:
dbobj = SDBM.open("filename", 0666)
#.. do something with dbobj
dbobj.close

#!/usr/bin/ruby -w
# userstats - generate statistics on who is logged in
# call with usernames as argument to display the totals
# for the given usernames, call with "ALL" to display all users

require "sdbm"
filename = '/tmp/userstats.db'
SDBM.open(filename, 0666) { |dbobj|
		if ARGV.length > 0
				if ARGV[0] == "ALL"
						# ARGV is constant, so we need the variable userlist
						userlist = dbobj.keys().sort()
				else
						userlist = ARGV
				end
				userlist.each { |user|
						print "#{user}\t#{dbobj[user]}\n"
				}
		else
				who = `who`
				who.split("\n").each { |line|
						md = /^(\S+)/.match(line)
						raise "Bad line from who: #{line}" unless md
						# sdbm stores only strings, so "+=" doesn't work,
						# we need to convert them expicitly back to integer.
						if dbobj.has_key?(md[0])
								dbobj[md[0]] = dbobj[md[0]].to_i + 1
						else
								dbobj[md[0]] = "1"
						end
				}
		end
}


# @@PLEAC@@_14.2
# using open and clear
dbobj = SDBM.open("filename", 0666)
dbobj.clear()
dbobj.close()
# deleting file and recreating it
# the filenames depend on the flavor of dbm you use,
# for example sdbm has two files named filename.pag and filename.dir,
# so you need to delete both files
begin
		File.delete("filename")
		# raises Exception if not exist
		dbobj = SDBM.open("filename", 0666)
rescue
		# add error handling here
end


# @@PLEAC@@_14.3
# sdbm2gdbm: converts sdbm database to a gdbm database
require "sdbm"
require "gdbm"

unless ARGV.length == 2
		fail "usage: sdbm2gdbm infile outfile"
end
infile = ARGV[0]
outfile = ARGV[1]

sdb = SDBM.open(infile)
gdb = GDBM.open(outfile, 0666)
sdb.each { |key, val|
		gdb[key] = val
}
gdb.close
sdb.close


# @@PLEAC@@_14.4
#!/usr/bin/ruby -w
# dbmmerge: merges two dbm databases
require "sdbm"

unless ARGV.length == 3
		fail "usage: dbmmerge indb1 indb2 outdb"
end
infile1 = ARGV[0]
infile2 = ARGV[0]
outfile = ARGV[2]

in1 = SDBM.open(infile1, nil)
in2 = SDBM.open(infile2, nil)
outdb = SDBM.open(outfile, 0666)

[in1, in2].each { |indb|
		indb.each { |key, val|
				if outdb.has_key?(key)
						# decide which value to set.
						# set outdb[key] if necessary
				else
						outdb[key] = val
				end
		}
}
in1.close
in2.close
outdb.close


# @@PLEAC@@_14.7
# we write a tie method that extends the Array class.
# It reads the file into the memory, executes the code block
# in which you can manipulate the array as needed, and writes
# the array back to the file after the end of the block execution
class Array
		def tie(filename, flags)
				File.open(filename, flags) { |f|
						f.each_line { |line|
								self.push(line.chomp)
						}
						yield
						f.rewind
						each { |line|
								if line
										f.puts(line)
								else
										f.puts ""
								end
						}
				}
		end
end

array = Array.new
array.tie("/tmp/textfile.txt", File::RDWR|File::CREAT) {
		array[4] = "a new line 4"
}

# The tied array can be manipulated like a normal array,
# so there is no need for a special API, and the recno_demo program
# to demonstrate is API is useless


# tied array demo: show how to use array with a tied file
filename = "db_file.txt"
lines = Array.new
File.unlink(filename) if File.exists?(filename)
lines.tie(filename, File::RDWR | File::CREAT) {
		# first create a textfile to play with
		lines[0] = "zero"
		lines[1] = "one"
		lines[2] = "two"
		lines[3] = "three"
		lines[4] = "four"

		# print the records in order.
		# Opposed to perl, the tied array behaves exactly as a normal array
		puts "\nOriginal"
		for i in 0..(lines.length-1)
				puts "#{i}: #{lines[i]}"
		end

		#use push and pop
		a = lines.pop
		lines.push("last")
		puts("The last line was [#{a}]")

		#use shift and unshift
		a = lines.shift
		lines.unshift("first")
		puts("The first line was [#{a}]")

		# add record after record 2
		i = 2
		lines.insert(i + 1, "Newbie")

		# add record before record one
		i = 1
		lines.insert(i, "New One")

		# delete record 3
		lines.delete_at(3)

		#now print the records in reverse order
		puts "\nReverse"
		(lines.length - 1).downto(0){ |i|
				puts "#{i}: #{lines[i]}"
		}

}


# @@PLEAC@@_14.8
# example to store complex data in a database
# uses marshall from the standard library
require "sdbm"
db = SDBM.open("pleac14-8-database", 0666)

# convert the Objects into strings and back by using the Marshal module.
# Most normal objects can be converted out of the box,
# but not special things like procedure objects,
# IO instance variables, singleton objects

db["Tom Christiansen"] = Marshal.dump(["book author",  "tchrist@perl.com"])
db["Tom Boutell"] = Marshal.dump(["shareware author",
"boutell@boutell.com"])

name1 = "Tom Christiansen"
name2 = "Tom Boutell"

tom1 = Marshal.load(db[name1])
tom2 = Marshal.load(db[name2])

puts "Two Toming: #{tom1} #{tom2}"

if tom1[0] == tom2[0] && tom1[1] == tom2[1]
	 puts "You're having runtime fun with one Tom made two."
else
	 puts "No two Toms are ever alike"
end

# To change parts of an entry, get the whole entry, change the parts,
# and save the whole entry back
entry = Marshal.load(db["Tom Boutell"])
entry[0] = "Poet Programmer"
db["Tom Boutell"] = Marshal.dump(entry)
db.close


# @@PLEAC@@_14.9
# example to make data persistent
# uses Marshal from the standard lib
# Stores the data in a simple file,
# see 14.8 on how to store it in a dbm file

# The BEGIN block is executed before the rest of the script
# we use global variables here because local variables
# will go out of scope and are not accessible from the main script

BEGIN {
	 $persistent_store = "persitence.dat"
	 begin
		 File.open($persistent_store) do |f|
			 $stringvariable1 = Marshal.load(f)
			 $arrayvariable2 = Marshal.load(f)
		 end
	 rescue
		 puts "Can not open #{$persistent_store}"
		 # Initialisation if this script runs the first time
		 $stringvariable1 = ""
		 $arrayvariable2 = []
	 end
}

END {
	 File.open($persistent_store, "w+") do |f|
		 Marshal.dump($stringvariable1, f)
		 Marshal.dump($arrayvariable2, f)
	 end
}

# simple test program
puts $stringvariable1
puts $arrayvariable2
$stringvariable1 = "Hello World"
$arrayvariable2.push(5)
puts $stringvariable1
puts $arrayvariable2


# @@PLEAC@@_14.10
#!/usr/bin/ruby -w
# Ruby has a dbi module with an architecture similar
# to the Perl dbi module: the dbi module provides an unified
# interface and uses specialized drivers for each dbms vendor
#
begin
		DBI.connect("DBI:driver:driverspecific", "username", "auth") {
				|dbh|

				dbh.do(SQL1)

				dbh.prepare(SQL2){ |sth|
						sth.execute
						sth.fetch {|row|
								# ...
						}
				} # end of block finishes the statement handle
		} # end of block closes the database connection
rescue DBI::DatabaseError => e
		puts "dbi error occurred"
		puts "Error code: #{e.err}"
		puts "Error message: #{e.errstr}"
end

#!/usr/bin/ruby -w
# dbusers - example for mysql which creates a table,
# fills it with values, retrieves the values back,
# and finally destroys the table.

require "dbi"

# replacement for the User::pwnt module
def getpwent
		result = []
		File.open("/etc/passwd") {|file|
				file.each_line {|line|
						next if line.match(/^#/)
						cols = line.split(":")
						result.push([cols[2], cols[0]])
				}
		}
		result
end

begin
		DBI.connect("DBI:Mysql:pleacdatabase", "pleac", "pleacpassword") {
				|conn|

				conn.do("CREATE TABLE users (uid INT, login CHAR(8))")

				users = getpwent

				conn.prepare("INSERT INTO users VALUES (?,?)") {|sth|
						users.each {|entry|
								sth.execute(entry[0], entry[1])
						}
				}

				conn.execute("SELECT uid, login FROM users WHERE uid < 50") {|sth|
						sth.fetch {|row|
								puts row.collect {|col|
										if col.nil?
												"(null)"
										else
												col
										end
								}.join(", ")
						}
				}

				conn.do("DROP TABLE users")
		}
rescue DBI::DatabaseError => e
		puts "dbi error occurred"
		puts "Error code: #{e.err}"
		puts "Error message: #{e.errstr}"
end


# @@PLEAC@@_15.1
# This test program demonstrates parsing program arguments.
# It uses the optparse library, which is included with ruby 1.8
# It handles classic unix style and gnu style options
require 'optparse'

@debugmode = false
@verbose = false

ARGV.options do |opts|
		opts.banner = "Usage: ruby #{$0} [OPTIONS] INPUTFILES"

		opts.on("-h", "--help", "show this message") {
				puts opts
				exit
		}
		# The OptionParser#on method is called with a specification of short
		# options, of long options, a data type spezification and user help
		# messages for this option.
		# The method analyses the given parameter and decides what it is,
		# so you can leave out the long option if you don't need it
		opts.on("-v", "--[no-]verbose=[FLAG]", TrueClass, "run verbosly") {
				|@verbose|   # sets @verbose to true or false
		}
		opts.on("-D", "--DEBUG", TrueClass, "turns on debug mode" ){
				|@debugmode|   # sets @debugmode to true
		}
		opts.on("-c", "--count=NUMBER", Integer, "how many times we do it" ){
				|@count|      # sets @count to given integer
		}
		opts.on("-o", "--output=FILE", String, "file to write output to"){
				|@outputfile|   # sets @outputfile to given string
		}
		opts.parse!
end

# example to use the options in the main program
puts "Verbose is on" if @verbose
puts "Debugmode is on" if @debugmode
puts "Outfile is #{@outputfile}" if defined? @outputfile
puts "Count is #{@count}" if defined? @count
ARGV.each { |param|
		puts "Got parameter #{param}"
}


# @@PLEAC@@_15.4
buf = "\0" * 8
$stdout.ioctl(0x5413, buf)
ws_row, ws_col, ws_xpixel, ws_ypixel = buf.unpack("S4")

raise "You must have at least 20 characters" unless ws_col >= 20
max = 0
values = (1..5).collect { rand(20) }  # generate an array[5] of rand values
for i in values
		max = i if max < i
end
ratio = Float(ws_col-12)/max          # chars per unit
for i in values
		printf "%8.1f %s\n", i, "*" * (ratio*i)
end

# gives, for example:
#   15.0 *******************************
#   10.0 *********************
#    5.0 **********
#   14.0 *****************************
#   18.0 **************************************


# @@PLEAC@@_15.5
# Ruby's standard distribution doesn't have an ANSI color module, but we can use
# Term::ANSIColor (http://term-ansicolor.rubyforge.org/) instead.
#-----------------------------
require 'term/ansicolor'
include Term::ANSIColor

# Text can be colored using constants
print red, "Danger Will Robinson!", reset, "\n"
print "This is just normal text\n"
print blink, "Do you hurt yet?", reset, "\n"
#-----------------------------
# Or by using functions. Functions automatically reset colors at the end.
print red("Danger Will Ronbinson!"), "\n"
print red( on_black( "venom lack" )), "\n"
print red( on_yellow( "kill that fellow" )), "\n"
print green( on_cyan( blink( "garish!" ))), "\n"
#-----------------------------
# Or by using block forms. Block forms automatically reset colors at the end.
print red { "Danger Will Robinson!" }, "\n"
print red { on_black { "venom lack" } }, "\n"
print red { on_yellow { "kill that fellow" } }, "\n"
#-----------------------------
# Or by using a String Mixin
class String
		include Term::ANSIColor
end

print "Danger Will Robinson!".red, "\n"
print "venom lack".red.on_black, "\n"
print "kill that fellow".red.on_yellow, "\n"

#-----------------------------
# To color text without using a third party library, constants can be created
# manually using ANSI escape codes. (A complete list of all codes can be found
# at http://en.wikipedia.org/wiki/Ansi_escape_codes)
# Note that \e means \033 (The escape character)
#-----------------------------
# Foreground constants
BLACK = "\e[30m"
RED = "\e[31m"
GREEN = "\e[32m"
WHITE = "\e[37m"

# Background constants
ON_BLACK = "\e[40m"
ON_WHITE = "\e[47m"
ON_YELLOW = "\e[43m"
ON_CYAN = "\e[46m"

# Style constants
BLINK = "\e[5m"
NOBLINK = "\e[25m"
BOLD = "\e[1m"
NOBOLD = "\e[22m"

RESET = "\e[0m"
#-----------------------------
puts "#{RED}Danger Will Ronbinson!#{RESET}"
puts "This is just normal text."
puts "#{BLINK}Do you hurt yet?#{NOBLINK}"
#-----------------------------
puts "#{RED}Danger Will Ronbinson!#{RESET}"
puts "#{RED}#{ON_BLACK}venom lack"
puts "#{RED}#{ON_YELLOW}kill that fellow"
puts "#{GREEN}#{ON_CYAN}#{BLINK}garish!"
#-----------------------------
print BLACK, ON_WHITE, "black on white\n"
print WHITE, ON_BLACK, "white on black\n"
print GREEN, ON_CYAN, BLINK, "garish!\n"

print RESET
#-----------------------------


# @@PLEAC@@_16.1
output = `program args`       # collect output into one multiline string
output = `program args`.to_a  # collect output into array, one line per element

output = ""
IO.popen("ls") do |readme|
	readme.each do |line|
		output << line
	end
end

`fsck -y /dev/rsd1a`  # BAD AND SCARY in Perl because it's managed by the shell
											# I donna in Ruby ...

# so the "clean and secure" version
readme, writeme = IO.pipe
pid = fork {
		# child
		$stdout.reopen writeme
		readme.close
		exec('find', '..')
}
# parent
writeme.close
readme.each do |line|
		# do something with 'line'
end
Process.waitpid(pid)


# @@PLEAC@@_16.2
status = system("xemacs #{myfile}")

status = system("xemacs", myfile)

system("cmd1 args | cmd2 | cmd3 >outfile")
system("cmd args <infile >outfile 2>errfile")

# stop if the command fails
abort "$program exited funny: #{$?}" unless system("cmd", "args1", "args2")

# get the value of the signal sent to the child
# even if it is a SIGINT or SIGQUIT
arglist = ['ruby', '-e', '5.times {|i| p i}']
system(*arglist)
raise "program killed by signal #{$?}" if ($? & 127) != 0

pid = fork {
		trap("SIGINT", "IGNORE")
		exec("sleep", "10")
}
trap ("SIGINT") {
		puts "Tsk tsk, no process interruptus"
}
Process.waitpid(pid, 0)

# Ruby permits to lie to the program called by a 'system'.
# (ie specify what return argv[0] in C, $0 in Perl/Ruby ...)
system ['bash', 'fake'], '-c', 'echo $0'


# @@PLEAC@@_16.3
exec("archive *.data")

exec("archive", "accounting.data")

exec("archive accounting.data")


# @@PLEAC@@_16.4
# read the output of a program
IO.popen("ls") {|readme|
		while readme.gets do
				# ...
		end
}
# or
readme = IO.popen("ls")
while readme.gets do
		# ...
end
readme.close

# "write" in a program
IO.popen("cmd args","w") {|pipe|
		pipe.puts("data")
		pipe.puts("foo")
}

# close wait for the end of the process
read = IO.popen("sleep 10000") # child goes to sleep
read.close                     # and the parent goes to lala land

writeme = IO.popen("cmd args", "w")
writeme.puts "hello" # program will get hello\n on STDIN
writeme.close        # program will get EOF on STDIN

# send in a pager (eg less) all output
$stdout = IO.popen("/usr/bin/less","w")
print "huge string\n" * 10000


# @@PLEAC@@_16.5
#-----------------------------
def head(lines = 20)
		pid = open("|-","w")
		if pid == nil
				return
		else
				while gets() do
						pid.print
						lines -= 1
						break if lines == 0
				end
		end
		exit
end

head(100)
while gets() do
		print
end
#-----------------------------
1: > Welcome to Linux, version 2.0.33 on a i686

2: > 

3: >     "The software required `Windows 95 or better', 

4: >      so I installed Linux."  
#-----------------------------
> 1: Welcome to Linux, Kernel version 2.0.33 on a i686

> 2: 

> 3:     "The software required `Windows 95 or better', 

> 4:      so I installed Linux."  
#-----------------------------
#!/usr/bin/ruby
# qnumcat - demo additive output filters

def number()
		pid = open("|-","w")
		if pid == nil
				return
		else
				while gets() do pid.printf("%d: %s", $., $_); end
		end
		exit
end

def quote()
		pid = open("|-","w")
		if pid == nil
				return
		else
				while gets() do pid.print "> #{$_}" end
		end
		exit
end

number()
quote()

while gets() do
		print
end
$stdout.close
exit


# @@PLEAC@@_16.6
ARGV.map! { |arg|
		arg =~ /\.(gz|Z)$/ ? "|gzip -dc #{arg}" : arg
}
for file in ARGV
		fh = open(file)
		while fh.gets() do
				# .......
		end
end
#-----------------------------
ARGV.map! { |arg|
		arg =~ %r#^\w+://# ? "|GET #{arg}" : arg   #
}
for file in ARGV
		fh = open(file)
		while fh.gets() do
				# .......
		end
end
#-----------------------------
pwdinfo = (`domainname` =~ /^(\(none\))?$/) ? '/etc/passwd' : '|ypcat  passwd';
pwd = open(pwdinfo);
#-----------------------------
puts "File, please? ";
file = gets().chomp();
fh = open(file);


# @@PLEAC@@_16.7
output = `cmd 2>&1`                            # with backticks
# or
ph = open("|cmd 2>&1")                         # with an open pipe
while ph.gets() { }                            # plus a read
#-----------------------------
output = `cmd 2>/dev/null`                     # with backticks
# or
ph = open("|cmd 2>/dev/null")                  # with an open pipe
while ph.gets() { }                            # plus a read
#-----------------------------
output = `cmd 2>&1 1>/dev/null`                # with backticks
# or
ph = open("|cmd 2>&1 1>/dev/null")             # with an open pipe
while ph.gets() { }                            # plus a read
#-----------------------------
output = `cmd 3>&1 1>&2 2>&3 3>&-`             # with backticks
# or
ph = open("|cmd 3>&1 1>&2 2>&3 3>&-")          # with an open pipe
while ph.gets() { }                            # plus a read
#-----------------------------
system("program args 1>/tmp/program.stdout 2>/tmp/program.stderr") 
#-----------------------------
output = `cmd 3>&1 1>&2 2>&3 3>&-`  
#-----------------------------
fd3 = fd1 
fd1 = fd2 
fd2 = fd3 
fd3 = undef 
#-----------------------------
system("prog args 1>tmpfile 2>&1") 
system("prog args 2>&1 1>tmpfile") 
#-----------------------------
# system ("prog args 1>tmpfile 2>&1") 
fd1 = "tmpfile"          # change stdout destination first
fd2 = fd1                # now point stderr there, too
#-----------------------------
# system("prog args 2>&1 1>tmpfile") 
fd2 = fd1                # stderr same destination as stdout
fd1 = "tmpfile"          # but change stdout destination 
#-----------------------------
# It is often better not to rely on the shell, 
# because of portability, possible security problems 
# and bigger resource usage. So, it is often better to use the open3 library. 
# See below for an example.
# opening stdin, stdout, stderr
require "open3"
stdin, stdout, stderr = Open3.popen('cmd')


# @@PLEAC@@_16.8
#-----------------------------
# Contrary to perl, we don't need to use a module in Ruby
fh = Kernel.open("|" + program, "w+")
fh.puts "here's your input\n"
output = fh.gets()
fh.close()
#-----------------------------
Kernel.open("|program"),"w+")    # RIGHT !
#-----------------------------
# Ruby has already object methods for I/O handles
#-----------------------------
begin
		fh = Kernel.open("|" + program_and_options, "w+")
rescue
		if ($@ ~= /^open/)
				$stderr.puts "open failed : #{$!} \n #{$@} \n"
				break
		end
		raise      # reraise unforseen exception
end


# @@PLEAC@@_16.13
#% kill -l
#HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE
#ALRM TERM CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM
#PROF WINCH POLL PWR
#-----------------------------
#% ruby -e 'puts Signal.list.keys.join(" ")'
#PWR USR1 BUS USR2 TERM SEGV KILL POLL STOP SYS TRAP IOT HUP INT                                                                          #
#WINCH XCPU TTIN CLD TSTP FPE IO TTOU PROF CHLD CONT PIPE ABRT
#VTALRM QUIT ILL XFSZ URG ALRM
#-----------------------------
# After that, the perl script create an hash equivalent to Signal.list, 
# and an array. The array can be obtained by :
signame = []
Signal.list.each { |name, i| signame[i] = name }


# @@PLEAC@@_16.14
Process.kill(9, pid)                    # send $pid a signal 9
Process.kill(-1, Process.getpgrp())     # send whole job a signal 1
Process.kill("USR1", $$)                # send myself a SIGUSR1
Process.kill("HUP", pid1, pid2, pid3)   # send a SIGHUP to processes in @pids
#-----------------------------
begin
		Process.kill(0, minion)
		puts "#{minion} is alive!"
rescue Errno::EPERM                     # changed uid
		puts "#{minion} has escaped my control!";
rescue Errno::ESRCH
		puts "#{minion} is deceased.";      # or zombied
rescue
		puts "Odd; I couldn't check the status of #{minion} : #{$!}"
end


# @@PLEAC@@_16.15
Kernel.trap("QUIT", got_sig_quit)       # got_sig_quit = Proc.new { puts "Quit\n" }
trap("PIPE", "got_sig_quit")            # def got_sig_pipe ...
trap("INT") { ouch++ }                  # increment ouch for every SIGINT
#-----------------------------
trap("INT", "IGNORE")                   # ignore the signal INT
#-----------------------------
trap("STOP", "DEFAULT")                 # restore default STOP signal handling


# @@PLEAC@@_16.16
# the signal handler
def ding
		trap("INT", "ding")
		puts "\aEnter your name!"
end

# prompt for name, overriding SIGINT
def get_name
		save = trap("INT", "ding")

		puts "Kindly Stranger, please enter your name: "
		name = gets().chomp()
		trap("INT", save)
		name
end


# @@PLEAC@@_16.21
# implemented thanks to http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/1760
require 'timeout'

# we'll do something vastly more useful than cookbook to demonstrate timeouts
begin
		timeout(5) {
				waitsec = rand(10)
				puts "Let's see if a sleep of #{waitsec} seconds is longer than 5 seconds..."
				system("sleep #{waitsec}")
		}
		puts "Timeout didn't occur"
rescue Timeout::Error    
		puts "Timed out!"
end


# @@PLEAC@@_17.1
# A basic TCP client connection
require 'socket'
begin
		t = TCPSocket.new('www.ruby-lang.org', 'www')
rescue
		puts "error: #{$!}"
else
		# ... do something with the socket
		t.print "GET / HTTP/1.0\n\n"
		answer = t.gets(nil)
		# and terminate the connection when we're done
		t.close
end

# Using the evil low level socket API
require 'socket'
# create a socket
s = Socket.new(Socket::AF_INET, Socket::SOCK_STREAM, 0)
# build the address of the remote machine
sockaddr_server = [Socket::AF_INET, 80,
		Socket.gethostbyname('www.ruby-lang.org')[3],
		0, 0].pack("snA4NN")
# connect
begin
		s.connect(sockaddr_server)
rescue
		puts "error: #{$!}"
else
		# ... do something with the socket
		s.print "GET / HTTP/1.0\n\n"
		# and terminate the connection when we're done
		s.close
end

# TCP connection with management of error (DNS)
require 'socket'
begin
		client = TCPSocket.new('does not exists', 'www')
rescue
		puts "error: #{$!}"
end

# TCP connection with a time out
require 'socket'
require 'timeout'
begin
		timeout(1) do #the server has one second to answer
				client = TCPSocket.new('www.host.com', 'www')
		end
rescue
		puts "error: #{$!}"
end


# @@PLEAC@@_17.12
require 'socket'

class Preforker 
		attr_reader (:child_count)
		
		def initialize(prefork, max_clients_per_child, port, client_handler)
				@prefork = prefork
				@max_clients_per_child = max_clients_per_child
				@port = port
				@child_count = 0
				
				@reaper = proc {
						trap('CHLD', @reaper)
						pid = Process.wait
						@child_count -= 1
				}
				
				@huntsman = proc {
						trap('CHLD', 'IGNORE')
						trap('INT', 'IGNORE')
						Process.kill('INT', 0)
						exit
				}
				
				@client_handler=client_handler
		end
		
		def child_handler
				trap('INT', 'EXIT')
				@client_handler.setUp
				# wish: sigprocmask UNblock SIGINT
				@max_clients_per_child.times {
						client = @server.accept or break
						@client_handler.handle_request(client)
						client.close
				}
				@client_handler.tearDown
		end
		
		def make_new_child
				# wish: sigprocmask block SIGINT
				@child_count += 1
				pid = fork do
						child_handler
				end
				# wish: sigprocmask UNblock SIGINT
		end
		
		def run
				@server = TCPserver.open(@port)
				trap('CHLD', @reaper)
				trap('INT', @huntsman)
				loop {
						(@prefork - @child_count).times { |i|
								make_new_child
						}
						sleep .1
				}
		end
end

#-----------------------------
#!/usr/bin/ruby

require 'Preforker'

class ClientHandler
		def setUp
		end
		
		def tearDown
		end
		
		def handle_request(client)
				# do stuff
		end
end

server = Preforker.new(1, 100, 3102, ClientHandler.new)
server.run


# @@PLEAC@@_18.2
require 'net/ftp'

begin
		ftp = Net::FTP::new("ftp.host.com")
		ftp.login(username,password)
		ftp.chdir(directory)
		ftp.get(filename)
		ftp.put(filename)
rescue Net::FTPError
		$stderr.print "FTP failed: " + $!
ensure
		ftp.close() if ftp
end

# A better solution for a local use could be :
Net::FTP::new("ftp.host.com") do |ftp|
		ftp.login(username,password)
		ftp.chdir(directory)
		ftp.get(filename)
		ftp.put(filename)
end

# If you have only one file to get, there is a simple solution :
require 'open-uri'
open("ftp://www.ruby-lang.org/path/filename") do |fh|
		# read from filehandle fh
end 
#--------------------------------------------
# to wait a defined time for the connection, 
# use the timeout module
require 'timeout'
begin 
		timeout(30){
				ftp = Net::FTP::new("ftp.host.com")
				ftp.debug_mode = true
		}
rescue Net::FTPError
		$stderr.puts "Couldn't connect."
rescue Timeout::Error
		$stderr.puts "Timeout while connecting to server."
end

begin
		ftp.login()
rescue Net::FTPError
		$stderr.print "Couldn't authentificate.\n"
end

begin
		ftp.login(username)
rescue Net::FTPError
		$stderr.print "Still couldn't authenticate.\n"
end

begin
		ftp.login(username, password)
rescue Net::FTPError
		$stderr.print "Couldn't authenticate, even with explicit
		username and password.\n"
end

begin
		ftp.login(username, password, account)
rescue Net::FTPError
		$stderr.print "No dice. It hates me.\n"
end
#-----------------------------
ftp.put(localfile, remotefile)
#-----------------------------
# Sending data from STDIN is not directly supported 
# by the ftp library module. A possible way to do it is to use the 
# storlines method directly to send raw commands to the ftp server.
#-----------------------------
ftp.get(remotefile, localfile)
#-----------------------------
ftp.get(remotefile) { |data| puts data }
#-----------------------------
ftp.chdir("/pub/ruby") 
print "I'm in the directory ", ftp.pwd(), "\n"
#-----------------------------
ftp.mkdir("/pub/ruby/new_dir")
#-----------------------------
lines = ftp.ls("/pub/ruby/")
# => ["drwxr-xr-x 2 matz users 4096 July 17 1998 1.0", ... ]

latest = ftp.dir("/pub/ruby/*.tgz").sort.last

ftp.nlst("/pub/ruby")
# => ["/pub/ruby/1.0", ... ]
#-----------------------------
ftp.quit()


# @@PLEAC@@_18.6
require 'net/telnet'
t = Net::Telnet::new( "Timeout" => 10,
											"Prompt"  => /%/,
											"Host"    => host )
t.login(username, password)
files = t.cmd("ls")
t.print("top")
process_string = t.waitfor(/\d+ processes/)
t.close
#-----------------------------
/[$%#>] \z/n
#-----------------------------
# In case of an error, the telnet module throws an exception.
# For control of the behavior in case of an error,
# you just need to catch the exceptions and do your custom
# error handling.
#-----------------------------
begin
		telnet.login(username, password)
rescue TimeoutError
		fail "Login failed !\n"
end
#-----------------------------
telnet.waitfor('/--more--/')
#-----------------------------
telnet.waitfor(String => 'greasy smoke', Timeout => 30)


# @@PLEAC@@_18.7
require 'ping'

puts "#{host} is alive.\n" if Ping.pingecho(host);
#-----------------------------
# the ping module only use TCP ping, not ICMP even if we are root
if Ping.pingecho("kingkong.com")
		puts "The giant ape lives!\n";
else
		puts "All hail mighty Gamera, friend of children!\n";
end


# @@PLEAC@@_19.0
#-----------------------------
# http://www.perl.com/CPAN/
# http://www.perl.com:8001/bad/mojo.html
# ftp://gatekeeper.dec.com/pub/misc/netlib.tar.Z
# ftp://anonymous@myplace:gatekeeper.dec.com/pub/misc/netlib.tar.Z
# file:///etc/motd
#-----------------------------
# http://mox.perl.com/cgi-bin/program?name=Johann&born=1685
#-----------------------------
# http://mox.perl.com/cgi-bin/program
#-----------------------------


# @@PLEAC@@_19.1
#!/usr/local/bin/ruby -w
# hiweb - load CGI class to decode information given by web server

require 'cgi'

cgi = CGI.new('html3')

# get a parameter from a form
value = cgi.params['PARAM_NAME'][0]

# output a document
cgi.out {
		cgi.html {
				cgi.head { cgi.title { "Howdy there!" } } +
						cgi.body { cgi.p { "You typed: " + cgi.tt {
										CGI.escapeHTML(value) } } }
		}
}

require 'cgi'
cgi = CGI.new
who   = cgi.param["Name"][0]     # first param in list
phone = cgi.param["Number"][0]
picks = cgi.param["Choices"]     # complete list

print cgi.header( 'type' => 'text/plain',
									'expires' => Time.now + (3 * 24 * 60 * 60) )


# @@PLEAC@@_19.3
#!/usr/local/bin/ruby -w
# webwhoami - show web user's id
require 'etc'
print "Content-Type: text/plain\n\n"
print "Running as " + Etc.getpwuid.name + "\n"

# % ruby -wc cgi-script     # just check syntax

# % ruby -w  cgi-script     # params from stdin
# (offline mode: enter name=value pairs on standard input)
# name=joe
# number=10
# ^D

# % ruby -w  cgi-script name=joe number=10     # run with mock form input
# % ruby -d  cgi-script name=joe number=10     # ditto, under the debugger

# POST method script in csh
# % (setenv HTTP_METHOD POST; ruby -w cgi-script name=joe number=10)
# POST method script in sh
# % HTTP_METHOD=POST perl -w cgi-script name=joe number=10


# @@PLEAC@@_19.4
# ruby has several security levels, the level "1" is similar to perls taint mode.
# It can be switched on by providing the -T command line parameter
# or by setting $SAFE to 1. Setting $SAFE to 2,3 or 4 restricts possible
# harmful operations further.

#!/usr/bin/ruby -T
$SAFE = 1
File.open(ARGV[0], "w")
# ruby warns with:
# taint1.rb:2:in `initialize': Insecure operation - initialize (SecurityError)

$SAFE = 1
file = ARGV[0]
unless /^([\w.-]+)$/.match(file)
		raise "filename #{file} has invalid characters"
end
file = $1
# In ruby, even the back reference from a regular expression stays tainted.
# you need to explicitly untaint the variable:
file.untaint
File.open(file, "w")

# Race condition exists like in perl:
unless File.exists(filename)        # Wrong because of race condition
		File.open(filename, "w")
end


# @@PLEAC@@_19.8
url = "http://pleac.sourceforge.net/pleac_ruby/"
print "Location: #{url}\r\n\r\n"
exit

#!/usr/bin/ruby
require 'cgi'

cgi = CGI.new
oreo = CGI::Cookie.new('name' => 'filling',
											 'value' => 'vanilla creme',
											 'expires' => Time.now + (3 * 30 * 24 * 60 * 60),
											 'domain' => '.pleac.sourceforge.net')

whither = 'http://pleac.sourceforge.net/pleac_ruby/cgiprogramming.html'

cgi.out('cookie' => oreo,
				'Location' => whither){""}

#!/usr/bin/ruby
# os_snipe - redirect to a Jargon File entry about current OS
dir = 'http://www.elsewhere.org/jargon/html/entry'

agent = ENV['HTTP_USER_AGENT']

page = case
		when agent =~ /Mac/: 'Macintrash.html'
		when agent =~ /Win(dows )?NT/: 'evil_and_rude.html'
		when agent =~ /Win|MSIE|WebTV/: 'Microsloth_Windows.html'
		when agent =~ /Linux/: 'Linux.html'
		when agent =~ /HP-UX/: 'HP-SUX.html'
		when agent =~ /SunOS/: 'ScumOS.html'
		else 'Appendix_B.html'
end

print "Location: #{dir}/#{page}\n\n"

require 'cgi'
cgi = CGI.new
cgi.out('status' => '204 No response'){""}
# this produces:
# Status: 204 No response
# Content-Type: text/html
# Content-Length: 0
# <blank line here>


# @@PLEAC@@_19.10
preference_value = cgi.cookies["preference name"][0]

packed_cookie = CGI::Cookie.new("name" => "preference name",
																"value" => "whatever you'd like",
																"expires" => Time.local(Time.now.year + 2,
		Time.now.mon, Time.now.day, Time.now.hour, Time.now.min, Time.now.sec) )

cgi.header("cookie" => [packed_cookie])

#!/usr/local/bin/ruby -w
# ic_cookies - sample CGI script that uses a cookie
require 'cgi'

cgi = CGI.new('html3')

cookname = "favorite ice cream"
favorite = cgi.params["flavor"][0]
tasty    = cgi.cookies[cookname][0] || 'mint'

unless favorite
		cgi.out {
				cgi.html {
						cgi.head { cgi.title { "Ice Cookies" } } +
						cgi.body {
								cgi.h1 { "Hello Ice Cream" } +
								cgi.hr +
								cgi.form {
										cgi.p { "Please select a flavor: " +
														cgi.text_field("flavor", tasty ) }
								} +
								cgi.hr
						}
				}
		}
else
		cookie = CGI::Cookie.new( "name"    => cookname,
															"value"   => favorite,
															"expires" => Time.local(Time.now.year + 2,
Time.now.mon, Time.now.day, Time.now.hour, Time.now.min, Time.now.sec) )
		cgi.out("cookie" => [cookie]) {
				cgi.html {
						cgi.head { cgi.title { "Ice Cookies" } } +
						cgi.body {
								cgi.h1 { "Hello Ice Cream" } +
								cgi.p { "You chose as your favorite flavor `#{favorite}'." }
						}
				}
		}
end


# @@PLEAC@@_20.9
def templatefile(filename, fillings)
		aFile = File.new(filename, "r")
		text = aFile.read()
		aFile.close()
		pattern = Regexp.new('%%(.*?)%%')
		text.gsub!(pattern) {
				fillings[$1] || ""
		}
		text
end

fields = {
		'username' => whats_his_name,
		'count' => login_count,
		'total' => minutes_used
}
puts templatefile('simple.template', fields)

# @@INCOMPLETE@@
# An example using databases is missing

[end]

[Python]
[start]
# -*- python -*-
# vim:set ft=python:

# @@PLEAC@@_NAME
# @@SKIP@@ Python

# @@PLEAC@@_WEB
# @@SKIP@@ http://www.python.org

# @@PLEAC@@_INTRO
# @@SKIP@@ The latest version of Python is 2.4 but users of 2.3 and 2.2 (and
# @@SKIP@@ in some cases earlier versions) can use the code herein.
# @@SKIP@@ Users of 2.2 and 2.3 should install or copy code from utils.py 
# @@SKIP@@ (http://aima.cs.berkeley.edu/python/utils.py)
# @@SKIP@@ [the first section provides compatability code with 2.4]
# @@SKIP@@ Users of 2.2 should install optik (http://optik.sourceforge.com) 
# @@SKIP@@ [for optparse and textwrap]
# @@SKIP@@ Where a 2.3 or 2.4 feature is unable to be replicated, an effort
# @@SKIP@@ has been made to provide a backward-compatible version in addition
# @@SKIP@@ to one using modern idioms.
# @@SKIP@@ Examples which translate the original Perl closely but which are
# @@SKIP@@ unPythonic are prefixed with a comment stating "DON'T DO THIS".
# @@SKIP@@ In some cases, it may be useful to know the techniques in these, 
# @@SKIP@@ though it's a bad solution for the specific problem.

# @@PLEAC@@_1.0
#-----------------------------
mystr = "\n"   # a newline character
mystr = r"\n"  # two characters, \ and n
#-----------------------------
mystr = "Jon 'Maddog' Orwant"  # literal single quote inside double quotes
mystr = 'Jon "Maddog" Orwant'  # literal double quote inside single quotes
#-----------------------------
mystr = 'Jon \'Maddog\' Orwant'  # escaped single quote
mystr = "Jon \"Maddog\" Orwant"  # escaped double quote
#-----------------------------
mystr = """
This is a multiline string literal
enclosed in triple double quotes.
"""
mystr = '''
And this is a multiline string literal
enclosed in triple single quotes.
'''
#-----------------------------

# @@PLEAC@@_1.1
#-----------------------------

# get a 5-char string, skip 3, then grab 2 8-char strings, then the rest
# Note that struct.unpack cannot use * for an unknown length.
# See http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/65224
import struct
(lead, s1, s2), tail = struct.unpack("5s 3x 8s 8s", data[:24]), data[24:]

# split at five-char boundaries
fivers = struct.unpack("5s" * (len(data)//5), data)
fivers = print [x[i*5:i*5+5] for i in range(len(x)/5)]

# chop string into individual characters
chars = list(data)
#-----------------------------
mystr = "This is what you have"
#       +012345678901234567890  Indexing forwards  (left to right)
#        109876543210987654321- Indexing backwards (right to left)
#         note that 0 means 10 or 20, etc. above

first = mystr[0]                            # "T"
start = mystr[5:7]                          # "is"
rest = mystr[13:]                           # "you have"
last = mystr[-1]                            # "e"
end = mystr[-4:]                            # "have"
piece = mystr[-8:-5]                        # "you"
#-----------------------------
# Python strings are immutable.
# In general, you should just do piecemeal reallocation:
mystr = "This is what you have"
mystr = mystr[:5] + "wasn't" + mystr[7:]

# Or replace and reallocate
mystr = "This is what you have"
mystr = mystr.replace(" is ", " wasn't ")

# DON'T DO THIS: In-place modification could be done using character arrays
import array
mystr = array.array("c", "This is what you have")
mystr[5:7] = array.array("c", "wasn't")
# mystr is now array('c', "This wasn't what you have")

# DON'T DO THIS: It could also be done using MutableString 
from UserString import MutableString
mystr = MutableString("This is what you have")
mystr[-12:] = "ondrous"
# mystr is now "This is wondrous"
#-----------------------------
# you can test simple substrings with "in" (for regex matching see ch.6):
if txt in mystr[-10:]:
		print "'%s' found in last 10 characters"%txt

# Or use the startswith() and endswith() string methods:
if mystr.startswith(txt):
		print "%s starts with %s."%(mystr, txt)
if mystr.endswith(txt):
		print "%s ends with %s."%(mystr, txt)

#-----------------------------

# @@PLEAC@@_1.2
#-----------------------------
# Introductory Note: quite a bit of this section is not terribly Pythonic
# as names must be set before being used. For instance, unless myvar has 
# been previously defined, these next lines will all raise NameError:
myvar = myvar or some_default
myvar2 = myvar or some_default
myvar |= some_default          # bitwise-or, not logical-or - for demo

# The standard way of setting a default is often:
myvar = default_value
if some_condition:
		pass                     # code which may set myvar to something else

# if myvar is returned from a function and may be empty/None, then use:
myvar = somefunc()
if not myvar:
		myvar = default_value

# If you want a default value that can be overridden by the person calling 
# your code, you can often wrap it in a function with a named parameter:
def myfunc(myvar="a"):
	 return myvar + "b"
print myfunc(), myfunc("c")
#=> ab cb

# Note, though, that this won't work for mutable objects such as lists or
# dicts that are mutated in the function as the object is only created once 
# and repeated calls to the same function will return the same object.  This
# can be desired behaviour however - see section 10.3, for instance.
def myfunc(myvar=[]):
		myvar.append("x")
		return myvar
print myfunc(), myfunc()
#=> ['x'] ['x', 'x']

# You need to do:
def myfunc(myvar=None):
		if myvar is None:
				myvar = []
		myvar.append("x")
		return myvar
print myfunc(), myfunc()
#=> ['x'] ['x']

#=== Perl Equivalencies start here
# use b if b is true, otherwise use c
a = b or c

# as that is a little tricksy, the following may be preferred:
if b:
		a = b
else:
		a = c

# set x to y unless x is already true
if not x:
		x = y
#-----------------------------
# use b if b is defined, else c
try:
		a = b
except NameError:
		a = c
#-----------------------------
foo = bar or "DEFAULT VALUE"
#-----------------------------
# To get a user (for both UNIX and Windows), use:
import getpass
user = getpass.getuser()

# DON'T DO THIS: find the user name on Unix systems 
import os
user = os.environ.get("USER")
if user is None:
		user = os.environ.get("LOGNAME")
#-----------------------------
if not starting_point:
		starting_point = "Greenwich"
#-----------------------------
if not a:         # copy only if empty
		a = b

if b:             # assign b if nonempty, else c
		a = b
else:
		a = c
#-----------------------------

# @@PLEAC@@_1.3
#-----------------------------
v1, v2 = v2, v1
#-----------------------------
# DON'T DO THIS:
temp = a
a = b
b = temp
#-----------------------------
a = "alpha"
b = "omega"
a, b = b, a   # the first shall be last -- and versa vice 
#-----------------------------
alpha, beta, production = "January March August".split()
alpha, beta, production = beta, production, alpha
#-----------------------------

# @@PLEAC@@_1.4
#-----------------------------
num = ord(char)
char = chr(num)
#-----------------------------
char = "%c" % num
print "Number %d is character %c" % (num, num)
print "Number %(n)d is character %(n)c" % {"n": num}
print "Number %(num)d is character %(num)c" % locals()
#=> Number 101 is character e
#-----------------------------
ascii_character_numbers = [ord(c) for c in "sample"]
print ascii_character_numbers
#=> [115, 97, 109, 112, 108, 101]

word = "".join([chr(n) for n in ascii_character_numbers])
word = "".join([chr(n) for n in [115, 97, 109, 112, 108, 101]])
print word
#=> sample
#-----------------------------
hal = "HAL"
ibm = "".join([chr(ord(c)+1) for c in hal]) # add one to each ASCII value
print ibm   
#=> IBM
#-----------------------------

# @@PLEAC@@_1.5
#-----------------------------
mylist = list(mystr)
#-----------------------------
for char in mystr:
		pass # do something with char
#-----------------------------
mystr = "an apple a day"
uniq = sorted(set(mystr))
print "unique chars are: '%s'" % "".join(uniq)
#=> unique chars are: ' adelnpy'
#-----------------------------
ascvals = [ord(c) for c in mystr]
print "total is %s for '%s'."%(sum(ascvals), mystr)
#=> total is 1248 for 'an apple a day'.
#-----------------------------
# sysv checksum
def checksum(myfile):
		values = [ord(c) for line in myfile for c in line]
		return sum(values)%(2**16) - 1

import fileinput
print checksum(fileinput.input())   # data from sys.stdin

# Using a function means any iterable can be checksummed:
print checksum(open("C:/test.txt")  # data from file
print checksum("sometext")          # data from string
#-----------------------------
#!/usr/bin/python
# slowcat - emulate a   s l o w  line printer
# usage: slowcat [- DELAY] [files ...]
import sys, select
import re
DELAY = 1
if re.match("^-\d+$",sys.argv[1]):
		DELAY=-int(sys.argv[1])
		del sys.argv[1]
for ln in fileinput.input():
		for c in ln:
				sys.stdout.write(c)
				sys.stdout.flush()
				select.select([],[],[], 0.005 * DELAY)
#-----------------------------

# @@PLEAC@@_1.6
#-----------------------------
# 2.3+ only
revchars = mystr[::-1]  # extended slice - step is -1
revwords = " ".join(mystr.split(" ")[::-1])

# pre 2.3 version:
mylist = list(mystr)
mylist.reverse()
revbytes = "".join(mylist)

mylist = mystr.split()
mylist.reverse()
revwords = ' '.join(mylist)

# Alternative version using reversed():
revchars = "".join(reversed(mystr))
revwords = " ".join(reversed(mystr.split(" ")))

# reversed() makes an iterator, which means that the reversal
# happens as it is consumed.  This means that "print reversed(mystr)" is not
# the same as mystr[::-1].  Standard usage is:
for char in reversed(mystr):
	 pass  # ... do something
#-----------------------------
# 2.3+ only
word = "reviver"
is_palindrome = (word == word[::-1])
#-----------------------------
# Generator version
def get_palindromes(fname):
		for line in open(fname):
				word = line.rstrip()
				if len(word) > 5 and word == word[::-1]:
						yield word
long_palindromes = list(get_palindromes("/usr/share/dict/words"))

# Simpler old-style version using 2.2 string reversal
def rev_string(mystr):
		mylist = list(mystr)
		mylist.reverse()
		return "".join(mylist)

long_palindromes=[]
for line in open("/usr/share/dict/words"):
		word = line.rstrip()
		if len(word) > 5 and word == rev_string(word):
				long_palindromes.append(word)
print long_palindromes
#-----------------------------

# @@PLEAC@@_1.7
#-----------------------------
mystr.expandtabs()
mystr.expandtabs(4)
#-----------------------------

# @@PLEAC@@_1.8
#-----------------------------
text = "I am %(rows)s high and %(cols)s long"%{"rows":24, "cols":80)
print text
#=> I am 24 high and 80 long

rows, cols = 24, 80
text = "I am %(rows)s high and %(cols)s long"%locals()
print text
#=> I am 24 high and 80 long
#-----------------------------
import re
print re.sub("\d+", lambda i: str(2 * int(i.group(0))), "I am 17 years old")
#=> I am 34 years old
#-----------------------------
# expand variables in text, but put an error message in
# if the variable isn't defined
class SafeDict(dict):
		def __getitem__(self, key):
				return self.get(key, "[No Variable: %s]"%key)
		
hi = "Hello"
text = "%(hi)s and %(bye)s!"%SafeDict(locals())
print text
#=> Hello and [No Variable: bye]!

#If you don't need a particular error message, just use the Template class:
from string import Template
x = Template("$hi and $bye!")
hi = "Hello"
print x.safe_substitute(locals())
#=> Hello and $bye!
print x.substitute(locals()) # will throw a KeyError

#-----------------------------

# @@PLEAC@@_1.9
#-----------------------------
mystr = "bo peep".upper()  # BO PEEP
mystr = mystr.lower()      # bo peep
mystr = mystr.capitalize() # Bo peep
#-----------------------------
beast = "python"
caprest = beast.capitalize().swapcase() # pYTHON
#-----------------------------
print "thIS is a loNG liNE".title()
#=> This Is A Long Line
#-----------------------------
if a.upper() == b.upper():
		print "a and b are the same"
#-----------------------------
import random
def randcase_one(letter):
		if random.randint(0,5):   # True on 1, 2, 3, 4
				return letter.lower()
		else:
				return letter.upper()

def randcase(myfile):
		for line in myfile:
				yield "".join(randcase_one(letter) for letter in line[:-1])

for line in randcase(myfile):
		print line
#-----------------------------

# @@PLEAC@@_1.10
#-----------------------------
"I have %d guanacos." % (n + 1)
print "I have", n+1, "guanacos."
#-----------------------------
#Python templates disallow in-string calculations (see PEP 292)
from string import Template

email_template = Template("""\
To: $address
From: Your Bank
CC: $cc_number
Date: $date

Dear $name,

Today you bounced check number $checknum to us.
Your account is now closed.

Sincerely,
the management
""")

import random
import datetime

person = {"address":"Joe@somewhere.com",
					"name": "Joe",
					"cc_number" : 1234567890,
					"checknum" : 500+random.randint(0,99)}

print email_template.substitute(person, date=datetime.date.today())
#-----------------------------

# @@PLEAC@@_1.11
#-----------------------------
# indenting here documents
#
# in python multiline strings can be used as here documents
var = """
			your text
			goes here
			"""

# using regular expressions
import re
re_leading_blanks = re.compile("^\s+",re.MULTILINE)
var1 = re_leading_blanks.sub("",var)[:-1]

# using string methods 
# split into lines, use every line except first and last, left strip and rejoin.
var2 = "\n".join([line.lstrip() for line in var.split("\n")[1:-1]])

poem = """
			 Here's your poem:
			 Now far ahead the Road has gone,
					And I must follow, if I can,
			 Pursuing it with eager feet,
					Until it joins some larger way
			 Where many paths and errand meet.
					And whither then? I cannot say.
							 --Bilbo in /usr/src/perl/pp_ctl.c  
			 """

import textwrap
print textwrap.dedent(poem)[1:-1]
#-----------------------------
		

# @@PLEAC@@_1.12
#-----------------------------
from textwrap import wrap 
output = wrap(para,
							initial_indent=leadtab
							subsequent_indent=nexttab)
#-----------------------------
#!/usr/bin/env python
# wrapdemo - show how textwrap works

txt = """\
Folding and splicing is the work of an editor,
not a mere collection of silicon
and
mobile electrons!
"""

from textwrap import TextWrapper

wrapper = TextWrapper(width=20,
											initial_indent=" "*4,
											subsequent_indent=" "*2)

print "0123456789" * 2
print wrapper.fill(txt)

#-----------------------------
"""Expected result:

01234567890123456789
		Folding and
	splicing is the
	work of an editor,
	not a mere
	collection of
	silicon and mobile
	electrons!
"""

#-----------------------------
# merge multiple lines into one, then wrap one long line

from textwrap import fill
import fileinput

print fill("".join(fileinput.input()))

#-----------------------------
# Term::ReadKey::GetTerminalSize() isn't in the Perl standard library. 
# It isn't in the Python standard library either. Michael Hudson's 
# recipe from python-list #530228 is shown here.
# (http://aspn.activestate.com/ASPN/Mail/Message/python-list/530228)
# Be aware that this will work on Unix but not on Windows.

from termwrap import wrap
import struct, fcntl
def getheightwidth():
		height, width = struct.unpack(
				"hhhh", fcntl.ioctl(0, TERMIOS.TIOCGWINSZ ,"\000"*8))[0:2]
		return height, width

# PERL <>, $/, $\ emulation
import fileinput
import re

_, width = getheightwidth()
for para in re.split(r"\n{2,}", "".join(fileinput.input())):
		print fill(para, width)


# @@PLEAC@@_1.13
#-----------------------------
mystr = '''Mom said, "Don't do that."'''  #"
re.sub("['\"]", lambda i: "\\" + i.group(0), mystr)
re.sub("[A-Z]", lambda i: "\\" + i.group(0), mystr)
re.sub("\W", lambda i: "\\" + i.group(0), "is a test!") # no function like quotemeta?


# @@PLEAC@@_1.14
#-----------------------------
mystr = mystr.lstrip() # left
mystr = mystr.rstrip() # right
mystr = mystr.strip()  # both ends


# @@PLEAC@@_1.15
#-----------------------------
import csv
def parse_csv(line):
		reader = csv.reader([line], escapechar='\\')
		return reader.next()

line = '''XYZZY,"","O'Reilly, Inc","Wall, Larry","a \\"glug\\" bit,",5,"Error, Core Dumped,",''' #"

fields = parse_csv(line)

for i, field in enumerate(fields):
		print "%d : %s" % (i, field)

# pre-2.3 version of parse_csv
import re
def parse_csv(text):
		pattern = re.compile('''"([^"\\\]*(?:\\\.[^"\\\]*)*)",?|([^,]+),?|,''')
		mylist = ["".join(elem) 
							for elem in re.findall(pattern, text)]
		if text[-1] == ",": 
				mylist += ['']
		return mylist

# cvs.reader is meant to work for many lines, something like:
# (NB: in Python default, quotechar is *not* escaped by backslash,
#      but doubled instead. That's what Excel does.)
for fields in cvs.reader(lines, dialect="some"):
		for num, field in enumerate(fields):
				print num, ":", field
#-----------------------------

# @@PLEAC@@_1.16
#-----------------------------
def soundex(name, len=4):
		""" soundex module conforming to Knuth's algorithm
				implementation 2000-12-24 by Gregory Jorgensen
				public domain
		"""

		# digits holds the soundex values for the alphabet
		digits = '01230120022455012623010202'
		sndx = ''
		fc = ''

		# translate alpha chars in name to soundex digits
		for c in name.upper():
				if c.isalpha():
						if not fc: 
								fc = c   # remember first letter
						d = digits[ord(c)-ord('A')]
						# duplicate consecutive soundex digits are skipped
						if not sndx or (d != sndx[-1]):
								sndx += d

		# replace first digit with first alpha character
		sndx = fc + sndx[1:]

		# remove all 0s from the soundex code
		sndx = sndx.replace('0','')

		# return soundex code padded to len characters
		return (sndx + (len * '0'))[:len]

user = raw_input("Lookup user: ")
if user == "":
		raise SystemExit

name_code = soundex(user)
for line in open("/etc/passwd"):
		line = line.split(":")
		for piece in line[4].split():
				if name_code == soundex(piece):
						print "%s: %s\n" % line[0], line[4])
#-----------------------------

# @@PLEAC@@_1.17
#-----------------------------
import sys, fileinput, re

data = """\
analysed        => analyzed
built-in        => builtin
chastized       => chastised
commandline     => command-line
de-allocate     => deallocate
dropin          => drop-in
hardcode        => hard-code
meta-data       => metadata
multicharacter  => multi-character
multiway        => multi-way
non-empty       => nonempty
non-profit      => nonprofit
non-trappable   => nontrappable
pre-define      => predefine
preextend       => pre-extend
re-compiling    => recompiling
reenter         => re-enter
turnkey         => turn-key
"""
mydict = {}
for line in data.split("\n"):
		if not line.strip():
				continue
		k, v = [word.strip() for word in line.split("=>")]
		mydict[k] = v
pattern_text = "(" + "|".join([re.escape(word) for word in mydict.keys()]) + ")"
pattern = re.compile(pattern_text)

args = sys.argv[1:]
verbose = 0
if args and args[0] == "-v":
		verbose = 1
		args = args[1:]

if not args:
		sys.stderr.write("%s: Reading from stdin\n" % sys.argv[0])

for line in fileinput.input(args, inplace=1, backup=".orig"):
		output = ""
		pos = 0
		while True:
				match = pattern.search(line, pos)
				if not match:
						output += line[pos:]
						break
				output += line[pos:match.start(0)] + mydict[match.group(1)]
				pos = match.end(0)
		sys.stdout.write(output)
#-----------------------------

# @@PLEAC@@_1.18
#-----------------------------
#!/usr/bin/python
# psgrep - print selected lines of ps output by
#          compiling user queries into code.
#
# examples :
# psgrep "uid<10"
import sys, os, re

class PsLineMatch:
		# each field from the PS header
		fieldnames = ("flags","uid","pid","ppid","pri","nice","size", \
									"rss","wchan","stat","tty","time","command")
		numeric_fields = ("flags","uid","pid","ppid","pri","nice","size","rss")
		def __init__(self):
				self._fields = {}

		def new_line(self, ln):
				self._ln = ln.rstrip()
				# ps header for option "wwaxl" (different than in the perl code)
				"""
					F   UID   PID  PPID PRI  NI   VSZ  RSS WCHAN  STAT TTY        TIME COMMAND"
				004     0     1     0  15   0   448  236 schedu S    ?          0:07 init"
				.   .     .     .     .   .   .     .    .      .    .    .          .
				"""
				# because only the last entry might contain blanks, splitting
				# is safe
				data = self._ln.split(None,12)
				for fn, elem in zip(self.fieldnames, data):
						if fn in self.numeric_fields:  # make numbers integer 
								self._fields[fn] = int(elem)
						else:
								self._fields[fn] = elem

		def set_query(self, args):
				# assume args: "uid==500", "command ~ ^wm"
				conds=[]
				m = re.compile("(\w+)([=<>]+)(.+)")
				for a in args:
						try:
								(field,op,val) = m.match(a).groups()
						except:
								print "can't understand query \"%s\"" % (a)
								raise SystemExit
						if field in self.numeric_fields:
								conds.append(a)
						else:
								conds.append("%s%s'%s'",(field,op,val))
				self._desirable = compile("(("+")and(".join(conds)+"))", "<string>","eval")

		def is_desirable(self):
				return eval(self._desirable, {}, self._fields)

		def __str__(self):
				# to allow "print".
				return self._ln

if len(sys.argv)<=1:
		print """usage: %s criterion ...
		Each criterion is a Perl expression involving: 
		%s
		All criteria must be met for a line to be printed.""" \
		% (sys.argv[0], " ".join(PsLineMatch().fieldnames))
		raise SystemExit

psln = PsLineMatch()
psln.set_query(sys.argv[1:])
p = os.popen("ps wwaxl")
print p.readline()[:-1]        # emit header line
for ln in p.readlines():
		psln.new_line(ln)
		if psln.is_desirable():
				print psln
p.close()

# alternatively one could consider every argument being a string and
# support wildcards: "uid==500" "command~^wm" by means of re, but this
# does not show dynamic python code generation, although re.compile
# also precompiles.
#-----------------------------


# @@PLEAC@@_2.1
#-----------------------------
# The standard way of validating numbers is to convert them and catch
# an exception on failure

try:
		myfloat = float(mystr)
		print "is a decimal number" 
except TypeError:
		print "is not a decimal number"

try:
		myint = int(mystr)
		print "is an integer"
except TypeError:
		print "is not an integer"

# DON'T DO THIS. Explicit checking is prone to errors:
if mystr.isdigit():                         # Fails on "+4"
		print 'is a positive integer'   
else:
		print 'is not'

if re.match("[+-]?\d+$", mystr):            # Fails on "- 1" 
		print 'is an integer'           
else:
		print 'is not'

if re.match("-?(?:\d+(?:\.\d*)?|\.\d+)$", mystr):  # Opaque, and fails on "- 1"
		print 'is a decimal number'
else:
		print 'is not'

#-----------------------------

# @@PLEAC@@_2.2
#-----------------------------
# equal(num1, num2, accuracy) : returns true if num1 and num2 are
#   equal to accuracy number of decimal places

def equal(num1, num2, accuracy):
		return abs(num1 - num2) < 10**(-accuracy)
#-----------------------------
from __future__ import division  # use / for float div and // for int div

wage = 536                                      # $5.36/hour
week = 40 * wage                                # $214.40
print "One week's wage is: $%.2f" % (week/100)
#=> One week's wage is: $214.40
#-----------------------------

# @@PLEAC@@_2.3
#-----------------------------
rounded = round(num)            # rounds to integer
#-----------------------------
a = 0.255
b = "%.2f" % a
print "Unrounded: %f\nRounded: %s" % (a, b)
print "Unrounded: %f\nRounded: %.2f" % (a, a)
#=> Unrounded: 0.255000
#=> Rounded: 0.26
#=> Unrounded: 0.255000
#=> Rounded: 0.26
#-----------------------------
from math import floor, ceil

print "number\tint\tfloor\tceil"
a = [3.3, 3.5, 3.7, -3.3]
for n in a:
		print "% .1f\t% .1f\t% .1f\t% .1f" % (n, int(n), floor(n), ceil(n))
#=> number  int   floor ceil
#=>  3.3     3.0   3.0   4.0
#=>  3.5     3.0   3.0   4.0
#=>  3.7     3.0   3.0   4.0
#=> -3.3    -3.0  -4.0  -3.0
#-----------------------------

# @@PLEAC@@_2.4
#-----------------------------
# To convert a string in any base up to base 36, use the optional arg to int():
num = int('0110110', 2)   # num is 54

# To convert an int to an string representation in another base, you could use
# <http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/111286>:
import baseconvert 
def dec2bin(i):
		return baseconvert.baseconvert(i, baseconvert.BASE10, baseconvert.BASE2)

binstr = dec2bin(54)      # binstr is 110110
#-----------------------------

# @@PLEAC@@_2.5
#-----------------------------
for i in range(x,y):
		pass # i is set to every integer from x to y, excluding y

for i in range(x, y, 7):
		pass # i is set to every integer from x to y, stepsize = 7

print "Infancy is:",
for i in range(0,3):
		print i,
print

print "Toddling is:",
for i in range(3,5):
		print i,
print

# DON'T DO THIS:
print "Childhood is:",
i = 5
while i <= 12:
		print i
		i += 1

#=> Infancy is: 0 1 2
#=> Toddling is: 3 4
#=> Childhood is: 5 6 7 8 9 10 11 12
#-----------------------------

# @@PLEAC@@_2.6
#-----------------------------
# See http://www.faqts.com/knowledge_base/view.phtml/aid/4442
# for a module that does this
#-----------------------------

# @@PLEAC@@_2.7
#-----------------------------
import random          # use help(random) to see the (large) list of funcs

rand = random.randint(x, y)
#-----------------------------
rand = random.randint(25, 76)
print rand
#-----------------------------
elt = random.choice(mylist)
#-----------------------------
import string
chars = string.letters + string.digits + "!@$%^&*"
password = "".join([random.choice(chars) for i in range(8)])
#-----------------------------

# @@PLEAC@@_2.8
#-----------------------------
# Changes the default RNG
random.seed()

# Or you can create independent RNGs
gen1 = random.Random(6)
gen2 = random.Random(6)
gen3 = random.Random(10)
a1, b1 = gen1.random(), gen1.random()
a2, b2 = gen2.random(), gen2.random()
a3, b3 = gen3.random(), gen3.random()
# a1 == a2 and b1 == b2
#-----------------------------

# @@PLEAC@@_2.9
#-----------------------------
# see http://www.sbc.su.se/~per/crng/ or http://www.frohne.westhost.com/rv11reference.htm
#-----------------------------

# @@PLEAC@@_2.10
#-----------------------------
import random
mean = 25
sdev = 2
salary = random.gauss(mean, sdev)
print "You have been hired at %.2f" % salary
#-----------------------------

# @@PLEAC@@_2.11
#-----------------------------
radians = math.radians(degrees)
degrees = math.degrees(radians)

# pre-2.3:
from __future__ import division
import math
def deg2rad(degrees):
		return (degrees / 180) * math.pi
def rad2deg(radians):
		return (radians / math.pi) * 180
#-----------------------------
# Use deg2rad instead of math.radians if you have pre-2.3 Python.
import math
def degree_sine(degrees):
		radians = math.radians(degrees)
		return math.sin(radians)
#-----------------------------

# @@PLEAC@@_2.12
#-----------------------------
import math

# DON'T DO THIS.  Use math.tan() instead.
def tan(theta):
		return math.sin(theta) / math.cos(theta)
#----------------
# NOTE: this sets y to 16331239353195370.0
try:
	y = math.tan(math.pi/2)
except ValueError:
	y = None
#-----------------------------

# @@PLEAC@@_2.13
#-----------------------------
import math
log_e = math.log(VALUE)
#-----------------------------
log_10 = math.log10(VALUE)
#-----------------------------
def log_base(base, value):
		return math.log(value) / math.log(base)
#-----------------------------
# log_base defined as above
answer = log_base(10, 10000)
print "log10(10,000) =", answer
#=> log10(10,000) = 4.0
#-----------------------------

# @@PLEAC@@_2.14
#-----------------------------
# NOTE: must have NumPy installed.  See
#   http://www.pfdubois.com/numpy/

import Numeric
a = Numeric.array( ((3, 2, 3),
										(5, 9, 8) ), "d")
b = Numeric.array( ((4, 7),
										(9, 3),
										(8, 1) ), "d")
c = Numeric.matrixmultiply(a, b)

print c
#=> [[  54.   30.]
#=>  [ 165.   70.]]

print a.shape, b.shape, c.shape
#=> (2, 3) (3, 2) (2, 2)
#-----------------------------

# @@PLEAC@@_2.15
#-----------------------------
a = 3+5j
b = 2-2j
c = a * b
print "c =", c
#=> c = (16+4j)

print c.real, c.imag, c.conjugate()
#=> 16.0 4.0 (16-4j)
#-----------------------------
import cmath
print cmath.sqrt(3+4j)
#=> (2+1j)
#-----------------------------

# @@PLEAC@@_2.16
#-----------------------------
number = int(hexadecimal, 16)
number = int(octal, 8)
s = hex(number)
s = oct(number)

num = raw_input("Gimme a number in decimal, octal, or hex: ").rstrip()
if num.startswith("0x"):
		num = int(num[2:], 16)
elif num.startswith("0"):
		num = int(num[1:], 8)
else:
		num = int(num)
print "%(num)d %(num)x %(num)o\n" % { "num": num }
#-----------------------------


# @@PLEAC@@_2.17
#-----------------------------
def commify(amount):
		amount = str(amount)
		firstcomma = len(amount)%3 or 3  # set to 3 if would make a leading comma
		first, rest = amount[:firstcomma], amount[firstcomma:]
		segments = [first] + [rest[i:i+3] for i in range(0, len(rest), 3)]
		return ",".join(segments)

print commify(12345678) 
#=> 12,345,678

# DON'T DO THIS. It works on 2.3+ only and is slower and less straightforward
# than the non-regex version above.
import re
def commify(amount):
		amount = str(amount)
		amount = amount[::-1]
		amount = re.sub(r"(\d\d\d)(?=\d)(?!\d*\.)", r"\1,", amount)
		return amount[::-1]

# @@PLEAC@@_2.18
# Printing Correct Plurals
#-----------------------------
def pluralise(value, root, singular="", plural="s"):
		if value == 1:
				return root + singular
		else:
				return root + plural

print "It took", duration, pluralise(duration, 'hour')

print "%d %s %s enough." % (duration, 
														pluralise(duration, 'hour'), 
														pluralise(duration, '', 'is', 'are'))
#-----------------------------
import re
def noun_plural(word):
		endings = [("ss", "sses"),
							 ("([psc]h)", r"\1es"),
							 ("z", "zes"),
							 ("ff", "ffs"),
							 ("f", "ves"),
							 ("ey", "eys"),
							 ("y", "ies"),
							 ("ix", "ices"),
							 ("([sx])", r"\1es"),
							 ("", "s")]
		for singular, plural in endings:
				ret, found = re.subn("%s$"%singular, plural, word)
				if found:
						return ret
		
verb_singular = noun_plural;       # make function alias
#-----------------------------

# @@PLEAC@@_2.19
# Program: Calculating Prime Factors
#-----------------------------
#% bigfact 8 9 96 2178
#8          2**3
#
#9          3**2
#
#96         2**5 3
#
#2178       2 3**2 11**2
#-----------------------------
#% bigfact 239322000000000000000000
#239322000000000000000000 2**19 3 5**18 39887 
#
#
#% bigfact 25000000000000000000000000
#25000000000000000000000000 2**24 5**26
#-----------------------------
import sys

def factorise(num):
		factors = {}
		orig = num
		print num, '\t',

		# we take advantage of the fact that (i +1)**2 = i**2 + 2*i +1
		i, sqi = 2, 4
		while sqi <= num:
				while not num%i:
						num /= i
						factors[i] = factors.get(i, 0) + 1

				sqi += 2*i + 1
				i += 1

		if num != 1 and num != orig:
				factors[num] = factors.get(num, 0) + 1

		if not factors:
				print "PRIME"

		for factor in sorted(factors):
				if factor:
						tmp = str(factor)
						if factors[factor]>1: tmp += "**" + str(factors[factor])
						print tmp,
		print
		
#--------
if __name__ == '__main__':
		if len(sys.argv) == 1:
				print "Usage:", sys.argv[0], " number [number, ]"
		else:
				for strnum in sys.argv[1:]:
						try:
								num = int(strnum)
								factorise(num)
						except ValueError:
								print strnum, "is not an integer"
#-----------------------------
# A more Pythonic variant (which separates calculation from printing):
def format_factor(base, exponent):
		if exponent > 1:
				return "%s**%s"%(base, exponent)
		return str(base)

def factorise(num):
		factors = {}
		orig = num

		# we take advantage of the fact that (i+1)**2 = i**2 + 2*i +1
		i, sqi = 2, 4
		while sqi <= num:
				while not num%i:
						num /= i
						factors[i] = factors.get(i, 0) + 1
				sqi += 2*i + 1
				i += 1

		if num not in (1, orig):
				factors[num] = factors.get(num, 0) + 1

		if not factors:
				return ["PRIME"]

		out = [format_factor(base, exponent)
					 for base, exponent in sorted(factors.items())]
		return out

def print_factors(value):
		try:
				num = int(value)
				if num != float(value):
						raise ValueError
		except (ValueError, TypeError):
				raise ValueError("Can only factorise an integer")
		factors = factorise(num) 
		print num, "\t", " ".join(factors)

# @@PLEAC@@_3.0
#----------------------------- 
#introduction
# There are three common ways of manipulating dates in Python
# mxDateTime - a popular third-party module (not discussed here) 
# time - a fairly low-level standard library module 
# datetime - a new library module for Python 2.3 and used for most of these samples 
# (I will use full names to show which module they are in, but you can also use
# from datetime import datetime, timedelta and so on for convenience) 

import time
import datetime

print "Today is day", time.localtime()[7], "of the current year" 
# Today is day 218 of the current year

today = datetime.date.today()
print "Today is day", today.timetuple()[7], "of ", today.year
# Today is day 218 of 2003

print "Today is day", today.strftime("%j"), "of the current year" 
# Today is day 218 of the current year
 

# @@PLEAC@@_3.1
#----------------------------- 
# Finding todays date

today = datetime.date.today()
print "The date is", today 
#=> The date is 2003-08-06

# the function strftime() (string-format time) produces nice formatting
# All codes are detailed at http://www.python.org/doc/current/lib/module-time.html
print t.strftime("four-digit year: %Y, two-digit year: %y, month: %m, day: %d") 
#=> four-digit year: 2003, two-digit year: 03, month: 08, day: 06


# @@PLEAC@@_3.2
#----------------------------- 
# Converting DMYHMS to Epoch Seconds
# To work with Epoch Seconds, you need to use the time module

# For the local timezone
t = datetime.datetime.now()
print "Epoch Seconds:", time.mktime(t.timetuple())
#=> Epoch Seconds: 1060199000.0

# For UTC
t = datetime.datetime.utcnow()
print "Epoch Seconds:", time.mktime(t.timetuple())
#=> Epoch Seconds: 1060195503.0


# @@PLEAC@@_3.3
#----------------------------- 
# Converting Epoch Seconds to DMYHMS

now = datetime.datetime.fromtimestamp(EpochSeconds)
#or use datetime.datetime.utcfromtimestamp()
print now
#=> datetime.datetime(2003, 8, 6, 20, 43, 20)
print now.ctime()
#=> Wed Aug  6 20:43:20 2003

# or with the time module
oldtimetuple = time.localtime(EpochSeconds)
# oldtimetuple contains (year, month, day, hour, minute, second, weekday, yearday, daylightSavingAdjustment) 
print oldtimetuple 
#=> (2003, 8, 6, 20, 43, 20, 2, 218, 1)


# @@PLEAC@@_3.4
#----------------------------- 
# Adding to or Subtracting from a Date
# Use the rather nice datetime.timedelta objects

now = datetime.date(2003, 8, 6)
difference1 = datetime.timedelta(days=1)
difference2 = datetime.timedelta(weeks=-2)

print "One day in the future is:", now + difference1
#=> One day in the future is: 2003-08-07

print "Two weeks in the past is:", now + difference2
#=> Two weeks in the past is: 2003-07-23

print datetime.date(2003, 8, 6) - datetime.date(2000, 8, 6)
#=> 1095 days, 0:00:00

#----------------------------- 
birthtime = datetime.datetime(1973, 01, 18, 3, 45, 50)   # 1973-01-18 03:45:50

interval = datetime.timedelta(seconds=5, minutes=17, hours=2, days=55) 
then = birthtime + interval

print "Then is", then.ctime()
#=> Then is Wed Mar 14 06:02:55 1973

print "Then is", then.strftime("%A %B %d %I:%M:%S %p %Y")
#=> Then is Wednesday March 14 06:02:55 AM 1973

#-----------------------------
when = datetime.datetime(1973, 1, 18) + datetime.timedelta(days=55) 
print "Nat was 55 days old on:", when.strftime("%m/%d/%Y").lstrip("0")
#=> Nat was 55 days old on: 3/14/1973


# @@PLEAC@@_3.5
#----------------------------- 
# Dates produce timedeltas when subtracted.

diff = date2 - date1
diff = datetime.date(year1, month1, day1) - datetime.date(year2, month2, day2)
#----------------------------- 

bree = datetime.datetime(1981, 6, 16, 4, 35, 25)
nat  = datetime.datetime(1973, 1, 18, 3, 45, 50)

difference = bree - nat
print "There were", difference, "minutes between Nat and Bree"
#=> There were 3071 days, 0:49:35 between Nat and Bree

weeks, days = divmod(difference.days, 7)

minutes, seconds = divmod(difference.seconds, 60)
hours, minutes = divmod(minutes, 60)

print "%d weeks, %d days, %d:%d:%d" % (weeks, days, hours, minutes, seconds)
#=> 438 weeks, 5 days, 0:49:35

#----------------------------- 
print "There were", difference.days, "days between Bree and Nat." 
#=> There were 3071 days between bree and nat


# @@PLEAC@@_3.6
#----------------------------- 
# Day in a Week/Month/Year or Week Number

when = datetime.date(1981, 6, 16)

print "16/6/1981 was:"
print when.strftime("Day %w of the week (a %A). Day %d of the month (%B).")
print when.strftime("Day %j of the year (%Y), in week %W of the year.")

#=> 16/6/1981 was:
#=> Day 2 of the week (a Tuesday). Day 16 of the month (June).
#=> Day 167 of the year (1981), in week 24 of the year.


# @@PLEAC@@_3.7
#----------------------------- 
# Parsing Dates and Times from Strings

time.strptime("Tue Jun 16 20:18:03 1981")
# (1981, 6, 16, 20, 18, 3, 1, 167, -1)

time.strptime("16/6/1981", "%d/%m/%Y")
# (1981, 6, 16, 0, 0, 0, 1, 167, -1)
# strptime() can use any of the formatting codes from time.strftime()

# The easiest way to convert this to a datetime seems to be; 
now = datetime.datetime(*time.strptime("16/6/1981", "%d/%m/%Y")[0:5])
# the '*' operator unpacks the tuple, producing the argument list.


# @@PLEAC@@_3.8
#----------------------------- 
# Printing a Date
# Use datetime.strftime() - see helpfiles in distro or at python.org

print datetime.datetime.now().strftime("The date is %A (%a) %d/%m/%Y") 
#=> The date is Friday (Fri) 08/08/2003

# @@PLEAC@@_3.9
#----------------------------- 
# High Resolution Timers

t1 = time.clock()
# Do Stuff Here
t2 = time.clock()
print t2 - t1

# 2.27236813618
# Accuracy will depend on platform and OS,
# but time.clock() uses the most accurate timer it can

time.clock(); time.clock()
# 174485.51365466841
# 174485.55702610247

#----------------------------- 
# Also useful;
import timeit
code = '[x for x in range(10) if x % 2 == 0]'
eval(code)
# [0, 2, 4, 6, 8]

t = timeit.Timer(code)
print "10,000 repeats of that code takes:", t.timeit(10000), "seconds" 
print "1,000,000 repeats of that code takes:", t.timeit(), "seconds"

# 10,000 repeats of that code takes: 0.128238644856 seconds
# 1,000,000 repeats of that code takes:  12.5396490336 seconds

#----------------------------- 
import timeit
code = 'import random; l = random.sample(xrange(10000000), 1000); l.sort()' 
t = timeit.Timer(code)

print "Create a list of a thousand random numbers. Sort the list. Repeated a thousand times." 
print "Average Time:", t.timeit(1000) / 1000
# Time taken: 5.24391507859


# @@PLEAC@@_3.10
#----------------------------- 
# Short Sleeps

seconds = 3.1
time.sleep(seconds)
print "boo"

# @@PLEAC@@_3.11
#----------------------------- 
# Program HopDelta
# Save a raw email to disk and run "python hopdelta.py FILE"
# and it will process the headers and show the time taken
# for each server hop (nb: if server times are wrong, negative dates
# might appear in the output).

import datetime, email, email.Utils
import os, sys, time

def extract_date(hop):
		# According to RFC822, the date will be prefixed with
		# a semi-colon, and is the last part of a received
		# header.
		date_string = hop[hop.find(';')+2:]
		date_string = date_string.strip()
		time_tuple = email.Utils.parsedate(date_string)

		# convert time_tuple to datetime
		EpochSeconds = time.mktime(time_tuple) 
		dt = datetime.datetime.fromtimestamp(EpochSeconds)
		return dt

def process(filename):
		# Main email file processing
		# read the headers and process them
		f = file(filename, 'rb')
		msg = email.message_from_file(f)

		hops = msg.get_all('received')
		
		# in reverse order, get the server(s) and date/time involved
		hops.reverse()
		results = []
		for hop in hops:
				hop = hop.lower()
				
				if hop.startswith('by'):  # 'Received: by' line
						sender = "start"
						receiver = hop[3:hop.find(' ',3)]
						date = extract_date(hop)

				else:  # 'Received: from' line
						sender = hop[5:hop.find(' ',5)]
						by = hop.find('by ')+3
						receiver = hop[by:hop.find(' ', by)]
						date = extract_date(hop)

				results.append((sender, receiver, date))
		output(results)

def output(results):
		print "Sender, Recipient, Time, Delta"
		print
		previous_dt = delta = 0
		for (sender, receiver, date) in results:
				if previous_dt:
						delta = date - previous_dt
				
				print "%s, %s, %s, %s" % (sender,
															 receiver,
															 date.strftime("%Y/%d/%m %H:%M:%S"),
															 delta)
				print
				previous_dt = date   
						
def main():
		# Perform some basic argument checking
		if len(sys.argv) != 2:
				print "Usage: mailhop.py FILENAME"

		else:
				filename = sys.argv[1]
				if os.path.isfile(filename):
						process(filename)
				else:
						print filename, "doesn't seem to be a valid file."

if __name__ == '__main__':
		main()


# @@PLEAC@@_4.0
#-----------------------------
# Python does not automatically flatten lists, in other words
# in the following, non-nested contains four elements and
# nested contains three elements, the third element of which
# is itself a list containing two elements:
non_nested = ["this", "that", "the", "other"]
nested = ["this", "that", ["the", "other"]]
#-----------------------------
tune = ["The", "Star-Spangled", "Banner"]
#-----------------------------

# @@PLEAC@@_4.1
#-----------------------------
a = ["quick", "brown", "fox"]
a = "Why are you teasing me?".split()

text = """
		The boy stood on the burning deck,
		It was as hot as glass.
"""
lines = [line.lstrip() for line in text.strip().split("\n")]
#-----------------------------
biglist = [line.rstrip() for line in open("mydatafile")]
#-----------------------------
banner = "The Mines of Moria"
banner = 'The Mines of Moria'
#-----------------------------
name = "Gandalf"
banner = "Speak, " + name + ", and enter!"
banner = "Speak, %s, and welcome!" % name
#-----------------------------
his_host = "www.python.org"
import os
host_info = os.popen("nslookup " + his_host).read()

# NOTE: not really relevant to Python (no magic '$$' variable)
python_info = os.popen("ps %d" % os.getpid()).read()
shell_info = os.popen("ps $$").read()
#-----------------------------
# NOTE: not really relevant to Python (no automatic interpolation)
banner = ["Costs", "only", "$4.95"]
banner = "Costs only $4.95".split()
#-----------------------------
brax = """ ' " ( ) < > { } [ ] """.split()            #"""
brax = list("""'"()<>{}[]""")                         #"""
rings = '''They're  "Nenya Narya Vilya"'''.split()    #'''
tags   = 'LI TABLE TR TD A IMG H1 P'.split()
sample = r'The backslash (\) is often used in regular expressions.'.split()

#-----------------------------
banner = "The backslash (\\) is often used in regular expressions.".split()
#-----------------------------
ships = u"Niña Pinta Santa María".split()          # WRONG (only three ships)
ships = [u"Niña", u"Pinta", u"Santa María"]        # right
#-----------------------------

# @@PLEAC@@_4.2
#-----------------------------
def commify_series(args):
		n = len(args)
		if n == 0: 
				return ""
		elif n == 1: 
				return args[0]
		elif n == 2: 
				return args[0] + " and " + args[1]
		return ", ".join(args[:-1]) + ", and " + args[-1]

commify_series([])
commify_series(["red"])
commify_series(["red", "yellow"])
commify_series(["red", "yellow", "green"])
#-----------------------------
mylist = ["red", "yellow", "green"]
print "I have", mylist, "marbles."
print "I have", " ".join(mylist), "marbles."
#=> I have ['red', 'yellow', 'green'] marbles.
#=> I have red yellow green marbles.

#-----------------------------
#!/usr/bin/env python
# commify_series - show proper comma insertion in list output
data = (
		( 'just one thing', ),
		( 'Mutt Jeff'.split() ),
		( 'Peter Paul Mary'.split() ),
		( 'To our parents', 'Mother Theresa', 'God' ),
		( 'pastrami', 'ham and cheese', 'peanut butter and jelly', 'tuna' ),
		( 'recycle tired, old phrases', 'ponder big, happy thoughts' ),
		( 'recycle tired, old phrases',
			'ponder big, happy thoughts',
			'sleep and dream peacefully' ),
		)

def commify_series(terms):
		for term in terms:
				if "," in term:
						sepchar = "; "
						break
		else:
				sepchar = ", "

		n = len(terms)
		if n == 0: 
				return ""
		elif n == 1:
				return terms[0]
		elif n == 2:
				return " and ".join(terms)
		return "%s%sand %s" % (sepchar.join(terms[:-1]), sepchar, terms[-1])

for item in data:
		print "The list is: %s." % commify_series(item)

#=> The list is: just one thing.
#=> The list is: Mutt and Jeff.
#=> The list is: Peter, Paul, and Mary.
#=> The list is: To our parents, Mother Theresa, and God.
#=> The list is: pastrami, ham and cheese, peanut butter and jelly, and tuna.
#=> The list is: recycle tired, old phrases and ponder big, happy thoughts.
#=> The list is: recycle tired, old phrases; ponder big, happy thoughts; and
#   sleep and dream peacefully.
#-----------------------------

# @@PLEAC@@_4.3
#-----------------------------
# Python allocates more space than is necessary every time a list needs to
# grow and only shrinks lists when more than half the available space is
# unused.  This means that adding or removing an element will in most cases
# not force a reallocation.

del mylist[size:]         # shrink mylist
mylist += [None] * size   # grow mylist by appending 'size' None elements

# To add an element to the end of a list, use the append method:
mylist.append(4)

# To insert an element, use the insert method:
mylist.insert(0, 10) # Insert 10 at the beginning of the list

# To extend one list with the contents of another, use the extend method:
list2 = [1,2,3]
mylist.extend(list2)

# To insert the contents of one list into another, overwriting zero or 
# more elements, specify a slice:
mylist[1:1] = list2   # Don't overwrite anything; grow mylist if needed
mylist[2:3] = list2   # Overwrite mylist[2] and grow mylist if needed

# To remove one element from the middle of a list:
# To remove elements from the middle of a list:
del mylist[idx1:idx2]  # 0 or more
x = mylist.pop(idx)    # remove mylist[idx] and assign it to x

# You cannot assign to or get a non-existent element:
# >>> x = []
# >>> x[4] = 5
#
# Traceback (most recent call last):
#   File "<pyshell#1>", line 1, in -toplevel-
#     x[4] = 5
# IndexError: list assignment index out of range
#
# >>> print x[1000]
#
# Traceback (most recent call last):
#  File "<pyshell#16>", line 1, in -toplevel-
#    print x[1000]
# IndexError: list index out of range
#-----------------------------
def what_about_that_list(terms):
		print "The list now has", len(terms), "elements."
		print "The index of the last element is", len(terms)-1, "(or -1)."
		print "Element #3 is %s." % terms[3]

people = "Crosby Stills Nash Young".split()
what_about_that_list(people)
#-----------------------------
#=> The list now has 4 elements.
#=> The index of the last element is 3 (or -1).
#=> Element #3 is Young.
#-----------------------------
people.pop()
what_about_that_list(people)
#-----------------------------
people += [None] * (10000 - len(people))
#-----------------------------
#>>> people += [None] * (10000 - len(people))
#>>> what_about_that_list(people)
#The list now has 10000 elements.
#The index of the last element is 9999 (or -1).
#Element #3 is None.
#-----------------------------

# @@PLEAC@@_4.4
#-----------------------------
for item in mylist:
		pass # do something with item
#-----------------------------
for user in bad_users:
		complain(user)
#-----------------------------
import os
for (key, val) in sorted(os.environ.items()):
		print "%s=%s" % (key, val)
#-----------------------------
for user in all_users:
		disk_space = get_usage(user)    # find out how much disk space in use
		if disk_space > MAX_QUOTA:      # if it's more than we want ...
				complain(user)              # ... then object vociferously
#-----------------------------
import os
for line in os.popen("who"):
		if "dalke" in line:
				print line,  # or print line[:-1]

# or:
print "".join([line for line in os.popen("who")
									 if "dalke" in line]),

#-----------------------------
for line in myfile:
		for word in line.split(): # Split on whitespace
				print word[::-1],     # reverse word
		print

# pre 2.3:
for line in myfile:
		for word in line.split(): # Split on whitespace
				chars = list(word)    # Turn the string into a list of characters
				chars.reverse()
				print "".join(chars),
		print
#-----------------------------
for item in mylist:
		print "i =", item
#-----------------------------
# NOTE: you can't modify in place the way Perl does:
# data = [1, 2, 3]
# for elem in data:
#     elem -= 1
#print data
#=>[1, 2, 3]

data = [1, 2, 3]
data = [i-1 for i in data]
print data
#=>[0, 1, 2]

# or
for i, elem in enumerate(data):
		data[i] = elem - 1
#-----------------------------
# NOTE: strings are immutable in Python so this doesn't translate well.
s = s.strip()
data = [s.strip() for s in data]
for k, v in mydict.items():
		mydict[k] = v.strip()
#-----------------------------

# @@PLEAC@@_4.5
#-----------------------------
fruits = ["Apple", "Blackberry"]
for fruit in fruits:
		print fruit, "tastes good in a pie."
#=> Apple tastes good in a pie.
#=> Blackberry tastes good in a pie.
#-----------------------------
# DON'T DO THIS:
for i in range(len(fruits)):
		print fruits[i], "tastes good in a pie."

# If you must explicitly index, use enumerate():
for i, fruit in enumerate(fruits):
		print "%s) %s tastes good in a pie."%(i+1, fruit)
#-----------------------------
rogue_cats = ["Morris", "Felix"]
namedict = { "felines": rogue_cats }
for cat in namedict["felines"]:
		print cat, "purrs hypnotically."
print "--More--\nYou are controlled."
#-----------------------------
# As noted before, if you need an index, use enumerate() and not this:
for i in range(len(namedict["felines"])):
		print namedict["felines"][i], "purrs hypnotically."
#-----------------------------

# @@PLEAC@@_4.6
#-----------------------------
uniq = list(set(mylist))
#-----------------------------
# See http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/259174
# for a more heavyweight version of a bag
seen = {}
for item in mylist:
		seen[item] = seen.get(item, 0) + 1

uniq = seen.keys()
#-----------------------------
seen = {}
uniq = []
for item in mylist:
		count = seen.get(item, 0)
		if count == 0:
				uniq.append(item)
		seen[item] = count + 1
#-----------------------------
# generate a list of users logged in, removing duplicates
import os
usernames = [line.split()[0] for line in os.popen("who")]
uniq = sorted(set(usernames))
print "users logged in:", " ".join(uniq)

# DON'T DO THIS:
import os
ucnt = {}
for line in os.popen("who"):
		username = line.split()[0]  # Get the first word
		ucnt[username] = ucnt.get(username, 0) + 1 # record the users' presence

# extract and print unique keys
users = ucnt.keys()
users.sort()
print "users logged in:", " ".join(users)
#-----------------------------

# @@PLEAC@@_4.7
#-----------------------------
# assume a_list and b_list are already loaded
aonly = [item for item in a_list if item not in b_list]

# A slightly more complex Pythonic version using sets - if you had a few
# lists, subtracting sets would be clearer than the listcomp version above
a_set = set(a_list)
b_set = set(b_list)
aonly = list(a_set - b_set)  # Elements in a_set but not in b_set

# DON'T DO THIS.
seen = {}                 # lookup table to test membership of B
aonly = []                # answer

#    build lookup table
for item in b_list:
		seen[item] = 1

#    find only elements in a_list and not in b_list
for item in a_list:
		if not item not in seen:
				# it's not in 'seen', so add to 'aonly'
				aonly.append(item)
#-----------------------------
# DON'T DO THIS.  There's lots of ways not to do it.
seen = {}   # lookup table
aonly = []  # answer

#     build lookup table - unnecessary and poor Python style
[seen.update({x: 1}) for x in b_list]

aonly = [item for item in a_list if item not in seen]

#-----------------------------
aonly = list(set(a_list))

# DON'T DO THIS.
seen = {}
aonly = []
for item in a_list:
		if item not in seen:
				aonly.append(item)
		seen[item] = 1                    # mark as seen
#-----------------------------
mydict["key1"] = 1
mydict["key2"] = 2
#-----------------------------
mydict[("key1", "key2")] = (1,2)
#-----------------------------
# DON'T DO THIS:
seen = dict.fromkeys(B.keys())

# DON'T DO THIS pre-2.3:
seen = {}
for term in B:
		seen[term] = None
#-----------------------------
# DON'T DO THIS:
seen = {}
for k, v in B:
		seen[k] = 1
#-----------------------------

# @@PLEAC@@_4.8
#-----------------------------
a = (1, 3, 5, 6, 7, 8)
b = (2, 3, 5, 7, 9)

a_set = set(a)
b_set = set(b)

union = a_set | b_set   # or a_set.union(b_set)
isect = a_set & b_set   # or a_set.intersection(b_set) 
diff = a_set ^ b_set    # or a_set.symmetric_difference(b_set)


# DON'T DO THIS:
union_list = []; isect_list = []; diff = []
union_dict = {}; isect_dict = {}
count = {}
#-----------------------------
# DON'T DO THIS:
for e in a:
		union_dict[e] = 1

for e in b:
		if union_dict.has_key(e):
				isect_dict[e] = 1
		union_dict[e] = 1

union_list = union_dict.keys()
isect_list = isect_dict.keys()
#-----------------------------
# DON'T DO THIS:
for e in a + b:
		if union.get(e, 0) == 0:
				isect[e] = 1
		union[e] = 1

union = union.keys()
isect = isect.keys()
#-----------------------------
# DON'T DO THIS:
count = {}
for e in a + b:
		count[e] = count.get(e, 0) + 1

union = []; isect = []; diff = []

for e in count.keys():
		union.append(e)
		if count[e] == 2:
				isect.append(e)
		else:
				diff.append(e)
#-----------------------------
# DON'T DO THIS:
isect = []; diff = []; union = []
count = {}
for e in a + b:
		count[e] = count.get(e, 0) + 1

for e, num in count.items():
		union.append(e)
		[None, diff, isect][num].append(e)
#-----------------------------

# @@PLEAC@@_4.9
#-----------------------------
# "append" for a single term and
# "extend" for many terms
mylist1.extend(mylist2)
#-----------------------------
mylist1 = mylist1 + mylist2
mylist1 += mylist2
#-----------------------------
members = ["Time", "Flies"]
initiates = ["An", "Arrow"]
members.extend(initiates)
# members is now ["Time", "Flies", "An", "Arrow"]
#-----------------------------
members[2:] = ["Like"] + initiates
print " ".join(members)
members[:1] = ["Fruit"]           # or members[1] = "Fruit"
members[-2:] = ["A", "Banana"]
print " ".join(members)
#-----------------------------
#=> Time Flies Like An Arrow
#=> Fruit Flies Like A Banana
#-----------------------------

# @@PLEAC@@_4.10
#-----------------------------
# reverse mylist into revlist

revlist = mylist[::-1]

# or
revlist = list(reversed(mylist))

# or pre-2.3
revlist = mylist[:]    # shallow copy
revlist.reverse()
#-----------------------------
for elem in reversed(mylist):
		pass # do something with elem

# or
for elem in mylist[::-1]:
		pass # do something with elem

# if you need the index and the list won't take too much memory:
for i, elem in reversed(list(enumerate(mylist))):
		pass

# If you absolutely must explicitly index:
for i in range(len(mylist)-1, -1, -1):
		pass
#-----------------------------
descending = sorted(users, reverse=True)
#-----------------------------

# @@PLEAC@@_4.11
#-----------------------------
# remove n elements from the front of mylist
mylist[:n] = []       # or del mylist[:n]

# remove n elements from front of mylist, saving them into front
front, mylist[:n] = mylist[:n], []

# remove 1 element from the front of mylist, saving it in front:
front = mylist.pop(0)

# remove n elements from the end of mylist
mylist[-n:] = []      # or del mylist[-n:]

# remove n elements from the end of mylist, saving them in end
end, mylist[-n:] = mylist[-n:], []

# remove 1 element from the end of mylist, saving it in end:
end = mylist.pop()

#-----------------------------
def shift2(terms):
		front = terms[:2]
		terms[:2] = []
		return front

def pop2(terms):
		back = terms[-2:]
		terms[-2:] = []
		return back
#-----------------------------
friends = "Peter Paul Mary Jim Tim".split()
this, that = shift2(friends)
# 'this' contains Peter, 'that' has Paul, and
# 'friends' has Mary, Jim, and Tim

beverages = "Dew Jolt Cola Sprite Fresca".split()
pair = pop2(beverages)
# pair[0] contains Sprite, pair[1] has Fresca,
# and 'beverages' has (Dew, Jolt, Cola)

# In general you probably shouldn't do things that way because it's 
# not clear from these calls that the lists are modified.
#-----------------------------

# @@PLEAC@@_4.12
for item in mylist:
		if criterion:
				pass    # do something with matched item
				break
else:
		pass     # unfound
#-----------------------------
for idx, elem in enumerate(mylist):
		if criterion:
				pass    # do something with elem found at mylist[idx]
				break
else:
		pass ## unfound
#-----------------------------
# Assuming employees are sorted high->low by wage.
for employee in employees:
		if employee.category == 'engineer':
				highest_engineer = employee
				break

print "Highest paid engineer is:", highest_engineer.name
#-----------------------------
# If you need the index, use enumerate:
for i, employee in enumerate(employees):
		if employee.category == 'engineer':
				highest_engineer = employee
				break
print "Highest paid engineer is: #%s - %s" % (i, highest_engineer.name)


# The following is rarely appropriate:
for i in range(len(mylist)):
		if criterion:
				pass    # do something
				break
else:
		pass ## not found
#-----------------------------


# @@PLEAC@@_4.13
matching = [term for term in mylist if test(term)]
#-----------------------------
matching = []
for term in mylist:
		if test(term):
				matching.append(term)
#-----------------------------
bigs = [num for num in nums if num > 1000000]
pigs = [user for (user, val) in users.items() if val > 1e7]
#-----------------------------
import os
matching = [line for line in os.popen("who") 
								if line.startswith("gnat ")]
#-----------------------------
engineers = [employee for employee in employees
								 if employee.position == "Engineer"]
#-----------------------------
secondary_assistance = [applicant for applicant in applicants
														if 26000 <= applicant.income < 30000]
#-----------------------------

# @@PLEAC@@_4.14
sorted_list = sorted(unsorted_list)
#-----------------------------
# pids is an unsorted list of process IDs
import os, signal, time
for pid in sorted(pids):
		print pid

pid = raw_input("Select a process ID to kill: ")
try:
		pid = int(pid)
except ValueError:
		raise SystemExit("Exiting ... ")
os.kill(pid, signal.SIGTERM)
time.sleep(2)
try:
		os.kill(pid, signal.SIGKILL)
except OSError, err:
		if err.errno != 3:  # was it already killed?
				raise
#-----------------------------
descending = sorted(unsorted_list, reverse=True)
#-----------------------------
allnums = [4, 19, 8, 3]
allnums.sort(reverse=True)              # inplace
#-----------------------------
# pre 2.3
allnums.sort()                          # inplace
allnums.reverse()                       # inplace
#or
allnums = sorted(allnums, reverse=True) # reallocating
#-----------------------------

# @@PLEAC@@_4.15
ordered = sorted(unordered, cmp=compare)
#-----------------------------
ordered = sorted(unordered, key=compute)

# ...which is somewhat equivalent to: 
precomputed = [(compute(x), x) for x in unordered]
precomputed.sort(lambda a, b: cmp(a[0], b[0]))
ordered = [v for k,v in precomputed.items()]
#-----------------------------
# DON'T DO THIS.
def functional_sort(mylist, function):
		mylist.sort(function)
		return mylist

ordered = [v for k,v in functional_sort([(compute(x), x) for x in unordered],
																				lambda a, b: cmp(a[0], b[0]))]
#-----------------------------
ordered = sorted(employees, key=lambda x: x.name)
#-----------------------------
for employee in sorted(employees, key=lambda x: x.name):
		print "%s earns $%s" % (employee.name, employee.salary)
#-----------------------------
sorted_employees = sorted(employees, key=lambda x: x.name):
for employee in sorted_employees:
		print "%s earns $%s" % (employee.name, employee.salary)

# load bonus
for employee in sorted_employees:
		if bonus(employee.ssn):
				print employee.name, "got a bonus!"
#-----------------------------
sorted_employees = sorted(employees, key=lambda x: (x.name, x.age)):
#-----------------------------
# NOTE: Python should allow access to the pwd fields by name
# as well as by position.
import pwd
# fetch all users
users = pwd.getpwall()
for user in sorted(users, key=lambda x: x[0]):
		print user[0]
#-----------------------------
sorted_list = sorted(names, key=lambda x: x[:1])
#-----------------------------
sorted_list = sorted(strings, key=len)
#-----------------------------
# DON'T DO THIS.
temp = [(len(s), s) for s in strings]
temp.sort(lambda a, b: cmp(a[0], b[0]))
sorted_list = [x[1] for x in temp]
#-----------------------------
# DON'T DO THIS.
def functional_sort(mylist, function):
		mylist.sort(function)
		return mylist

sorted_fields = [v for k,v in functional_sort(
							[(int(re.search(r"(\d+)", x).group(1)), x) for x in fields],
																	 lambda a, b: cmp(a[0], b[0]))]
#-----------------------------
entries = [line[:-1].split() for line in open("/etc/passwd")]

for entry in sorted(entries, key=lambda x: (x[3], x[2], x[0])):
		print entry
#-----------------------------

# @@PLEAC@@_4.16
#-----------------------------
import itertools
for process in itertools.cycle([1, 2, 3, 4, 5]):
		print "Handling process", process
		time.sleep(1)

# pre 2.3:
import time
class Circular(object):
		def __init__(self, data):
				assert len(data) >= 1, "Cannot use an empty list"
				self.data = data

		def __iter__(self):
				while True:
						for elem in self.data:
								yield elem

circular = Circular([1, 2, 3, 4, 5])

for process in circular:
		print "Handling process", process
		time.sleep(1)

# DON'T DO THIS. All those pops and appends mean that the list needs to be 
# constantly reallocated.  This is rather bad if your list is large:
import time
class Circular(object):
		def __init__(self, data):
				assert len(data) >= 1, "Cannot use an empty list"
				self.data = data

		def next(self):
				head = self.data.pop(0)
				self.data.append(head)
				return head

circular = Circular([1, 2, 3, 4, 5])
while True:
		process = circular.next()
		print "Handling process", process
		time.sleep(1)
#-----------------------------

# @@PLEAC@@_4.17
#-----------------------------
# generate a random permutation of mylist in place
import random
random.shuffle(mylist)
#-----------------------------

# @@PLEAC@@_4.18
#-----------------------------
import sys

def make_columns(mylist, screen_width=78):
		if mylist:
				maxlen = max([len(elem) for elem in mylist])
				maxlen += 1   # to make extra space

				cols = max(1, screen_width/maxlen) 
				rows = 1 + len(mylist)/cols

				# pre-create mask for faster computation
				mask = "%%-%ds " % (maxlen-1)

				for n in range(rows):
						row = [mask%elem
											 for elem in mylist[n::rows]]
						yield "".join(row).rstrip()

for row in make_columns(sys.stdin.readlines(), screen_width=50):
		print row


# A more literal translation
import sys

# subroutine to check whether at last item on line
def EOL(item):
		return (item+1) % cols == 0

# Might not be portable to non-linux systems
def getwinsize():
		# Use the curses module if installed
		try:
				import curses
				stdscr = curses.initscr()
				rows, cols = stdscr.getmaxyx()
				return cols
		except ImportError:
				pass

		# Nope, so deal with ioctl directly.  What value for TIOCGWINSZ?
		try:
				import termios
				TIOCGWINSZ = termios.TIOCGWINSZ
		except ImportError:
				TIOCGWINSZ = 0x40087468  # This is Linux specific

		import struct, fcntl
		s = struct.pack("HHHH", 0, 0, 0, 0)
		try:
				x = fcntl.ioctl(sys.stdout.fileno(), TIOCGWINSZ, s)
		except IOError:
				return 80
		rows, cols = struct.unpack("HHHH", x)[:2]
		return cols

cols = getwinsize()

data = [s.rstrip() for s in sys.stdin.readlines()]
if not data:
		maxlen = 1
else:
		maxlen = max(map(len, data))

maxlen += 1       # to make extra space

# determine boundaries of screen
cols = (cols / maxlen) or 1
rows = (len(data)+cols) / cols

# pre-create mask for faster computation
mask = "%%-%ds " % (maxlen-1)

# now process each item, picking out proper piece for this position
for item in range(rows * cols):
		target = (item % cols) * rows + (item/cols)
		if target < len(data):
				piece = mask % data[target]
		else:
				piece = mask % ""
		if EOL(item):
				piece = piece.rstrip()  # don't blank-pad to EOL
		sys.stdout.write(piece)
		if EOL(item):
				sys.stdout.write("\n")

if EOL(item):
	sys.stdout.write("\n")
#-----------------------------

# @@PLEAC@@_4.19
#-----------------------------
def factorial(n):
		s = 1
		while n:
				s *= n
				n -= 1
		return s   
#-----------------------------
def permute(alist, blist=[]):
		if not alist:
				yield blist
		for i, elem in enumerate(alist):
				for elem in permute(alist[:i] + alist[i+1:], blist + [elem]):
						yield elem

for permutation in permute(range(4)):
		print permutation
#-----------------------------
# DON'T DO THIS
import fileinput

# Slightly modified from
#   http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66463
def print_list(alist, blist=[]):
		if not alist:
				print ' '.join(blist)
		for i in range(len(alist)):
				blist.append(alist.pop(i))
				print_list(alist, blist)
				alist.insert(i, blist.pop())

for line in fileinput.input():
		words = line.split()
		print_list(words)
#-----------------------------
class FactorialMemo(list):
		def __init__(self):
				self.append(1)
				
		def __call__(self, n):
				try:
						return self[n]
				except IndexError:
						ret = n * self(n-1)
						self.append(ret)
						return ret

factorial = FactorialMemo()

import sys
import time
sys.setrecursionlimit(10000)

start = time.time()
factorial(2000)
f1 = time.time() - start
factorial(2100)                 # First 2000 values are cached already
f2 = time.time() - f1 - start
print "Slow first time:", f1
print "Quicker the second time:", f2
#-----------------------------

class MemoizedPermutations(list):
		def __init__(self, alist):
				self.permute(alist, [])
				
		def permute(self, alist, blist):
				if not alist:
						self.append(blist)
				for i, elem in enumerate(alist):
						self.permute(alist[:i] + alist[i+1:], blist + [elem])

		def __call__(self, seq, idx):
				return [seq[n] for n in self[idx]]


p5 = MemoizedPermutations(range(5))

words = "This sentence has five words".split()
print p5(words, 17)
print p5(words, 81)
#-----------------------------

# @@PLEAC@@_5.0
#-----------------------------
# dictionaries
age = {"Nat": 24,
			 "Jules": 24,
			 "Josh": 17}
#-----------------------------
age = {}
age["Nat"] = 24
age["Jules"] = 25
age["Josh"] = 17
#-----------------------------
food_color = {"Apple":  "red",
							"Banana": "yellow",
							"Lemon":  "yellow",
							"Carrot": "orange"
						 }
#-----------------------------
# NOTE: keys must be quoted in Python


# @@PLEAC@@_5.1
mydict[key] = value
#-----------------------------
# food_color defined per the introduction
food_color["Raspberry"] = "pink"
print "Known foods:"
for food in food_color:
		print food

#=> Known foods:
#=> Raspberry
#=> Carrot
#=> Lemon
#=> Apple
#=> Banana
#-----------------------------

# @@PLEAC@@_5.2
# does mydict have a value for key?
if key in mydict:
		pass # it exists
else:
		pass # it doesn't

#-----------------------------
# food_color per the introduction
for name in ("Banana", "Martini"):
		if name in food_color:
				print name, "is a food."
		else:
				print name, "is a drink."

#=> Banana is a food.
#=> Martini is a drink.
#-----------------------------
age = {}
age["Toddler"] = 3
age["Unborn"] = 0
age["Phantasm"] = None

for thing in ("Toddler", "Unborn", "Phantasm", "Relic"):
		print ("%s:"%thing),
		if thing in age:
				print "Exists",
				if age[thing] is not None:
						print "Defined",
				if age[thing]:
						print "True",
		print
#=> Toddler: Exists Defined True
#=> Unborn: Exists Defined
#=> Phantasm: Exists
#=> Relic:
#-----------------------------
# Get file sizes for the requested filenames
import fileinput, os
size = {}
for line in fileinput.input():
		filename = line.rstrip()
		if filename in size:
				continue
		size[filename] = os.path.getsize(filename)


# @@PLEAC@@_5.3
# remove key and its value from mydict
del mydict[key]
#-----------------------------
# food_color as per Introduction
def print_foods():
		foods = food_color.keys()

		print "Keys:", " ".join(foods)
		print "Values:",

		for food in foods:
				color = food_color[food]
				if color is not None:
						print color,
				else:
						print "(undef)",
		print

print "Initially:"
print_foods()

print "\nWith Banana set to None"
food_color["Banana"] = None
print_foods()

print "\nWith Banana deleted"
del food_color["Banana"]
print_foods()

#=> Initially:
#=> Keys: Carrot Lemon Apple Banana
#=> Values: orange yellow red yellow
#=> 
#=> With Banana set to None
#=> Keys: Carrot Lemon Apple Banana
#=> Values: orange yellow red (undef)
#=> 
#=> With Banana deleted
#=> Keys: Carrot Lemon Apple
#=> Values: orange yellow red
#-----------------------------
for key in ["Banana", "Apple", "Cabbage"]:
		del food_color[key]
#-----------------------------


# @@PLEAC@@_5.4
#-----------------------------
for key, value in mydict.items():  
		pass # do something with key and value

# If mydict is large, use iteritems() instead
for key, value in mydict.iteritems():  
		pass # do something with key and value

#-----------------------------
# DON'T DO THIS:
for key in mydict.keys():
		value = mydict[key]
		# do something with key and value
#-----------------------------
# food_color per the introduction
for food, color in food_color.items():
		print "%s is %s." % (food, color)

# DON'T DO THIS:
for food in food_color:
		color = food_color[food]
		print "%s is %s." % (food, color)

#-----------------------------
print """%(food)s

is

%(color)s.
""" % vars()
#-----------------------------
for food, color in sorted(food_color.items()):
		print "%s is %s." % (food, color)

#-----------------------------
#!/usr/bin/env python
# countfrom - count number of messages from each sender

import sys
if len(sys.argv) > 1:
		infile = open(sys.argv[1])
else:
		infile = sys.stdin

counts = {}
for line in infile:
		if line.startswith("From: "):
				name = line[6:-1]
				counts[name] = counts.get(name, 0) + 1

for (name, count) in sorted(counts.items()):
		print "%s: %s" % (name, count)

#-----------------------------


# @@PLEAC@@_5.5
for key, val in mydict.items():
		print key, "=>", val
#-----------------------------
print "\n".join([("%s => %s" % item) for item in mydict.items()])
#-----------------------------
print mydict
#=> {'firstname': 'Andrew', 'login': 'dalke', 'state': 'New Mexico', 'lastname': 'Dalke'}
#-----------------------------
import pprint
pprint.pprint(dict)
#=> {'firstname': 'Andrew',
#=>  'lastname': 'Dalke',
#=>  'login': 'dalke',
#=>  'state': 'New Mexico'}
#-----------------------------


# @@PLEAC@@_5.6
#-----------------------------
class SequenceDict(dict):
		"""
		Dictionary that remembers the insertion order.
		The lists returned by keys(), values() and items() are
		in the insertion order.
		"""
		def __init__(self, *args):
				self._keys={} # key --> id
				self._ids={}      # id  --> key
				self._next_id=0
				
		def __setitem__(self, key, value):
				self._keys[key]=self._next_id
				self._ids[self._next_id]=key
				self._next_id+=1
				return dict.__setitem__(self, key, value)
		
		def __delitem__(self, key):
				id=self._keys[key]
				del(self._keys[key])
				del(self._ids[id])
				return dict.__delitem__(self, key)

		def values(self):
				values=[]
				ids=list(self._ids.items())
				ids.sort()
				for id, key in ids:
						values.append(self[key])
				return values

		def items(self):
				items=[]
				ids=list(self._ids.items())
				ids.sort()
				for id, key in ids:
						items.append((key, self[key]))
				return items

		def keys(self):
				ids=list(self._ids.items())
				ids.sort()
				keys=[]
				for id, key in ids:
						keys.append(key)
				return keys

		def update(self, d):
				for key, value in d.items():
						self[key]=value

		def clear(self):
				dict.clear(self)
				self._keys={}
				self._ids={}
				self._next_id=0
				
def testSequenceDict():
		sd=SequenceDict()

		# First Test
		sd[3]="first"
		sd[2]="second"
		sd[1]="third"
		print sd.keys()
		print sd.items()
		print sd.values()

		del(sd[1])
		del(sd[2])
		del(sd[3])

		print sd.keys(), sd.items(), sd.values()
		print sd._ids, sd._keys

		print "---------------"
		# Second Test
		sd["b"]="first"
		sd["a"]="second"
		sd.update({"c": "third"})
		print sd.keys()
		print sd.items()
		print sd.values()

		del(sd["b"])
		del(sd["a"])
		del(sd["c"])

		print sd.keys(), sd.items(), sd.values()
		print sd._ids, sd._keys

def likePerlCookbook():
		food_color=SequenceDict()
		food_color["Banana"]="Yellow";
		food_color["Apple"]="Green";
		food_color["Lemon"]="Yellow"
		print "In insertion order, the foods' color are:"
		for food, color in food_color.items():
				print "%s is colored %s" % (food, color)

if __name__=="__main__":
		#testSequenceDict()
		likePerlCookbook()
		

# @@PLEAC@@_5.7
import os
ttys = {}

who = os.popen("who")

for line in who:
		user, tty = line.split()[:2]
		ttys.setdefault(user, []).append(tty)

for (user, tty_list) in sorted(ttys.items()):
		print user + ": " + " ".join(tty_list)
#-----------------------------
import pwd
for (user, tty_list) in ttys.items():
		print user + ":", len(tty_list), "ttys."
		for tty in sorted(tty_list):
				try:
						uid = os.stat("/dev/" + tty).st_uid
						user = pwd.getpwuid(uid)[0]
				except os.error:
						user = "(not available)"
				print "\t%s (owned by %s)" % (tty, user)

# @@PLEAC@@_5.8
# lookup_dict maps keys to values
reverse = dict([(val, key) for (key, val) in lookup_dict.items()])
#-----------------------------
surname = {"Mickey": "Mantle", "Babe": "Ruth"}
first_name = dict([(last, first) for (first, last) in surname.items()])

print first_name["Mantle"]
#=> Mickey
#-----------------------------
#!/usr/bin/perl -w
# foodfind - find match for food or color

import sys
if not sys.argv[1:]:
		raise SystemExit("usage: foodfind food_or_color")
given = sys.argv[1]

color_dict = {"Apple":  "red",
							"Banana": "yellow",
							"Lemon":  "yellow",
							"Carrot": "orange",
						 }
food_dict = dict([(color, food) for (food, color) in color_dict.items()])

if given in color_dict:
		print given, "is a food with color", color_dict[given]
elif given in food_dict:
		print food_dict[given], "is a food with color", given
#-----------------------------
# food_color as per the introduction
foods_with_color = {}
for food, color in food_color.items():
		foods_with_color.setdefault(color, []).append(food)

print " ".join(foods_with_color["yellow"]), "were yellow foods."
#-----------------------------

# @@PLEAC@@_5.9
#-----------------------------
# mydict is the hash to sort
for key, value in sorted(mydict.items()):
		# do something with key, value
#-----------------------------
# food_color as per section 5.8
for food, color in sorted(food_color.items()):
		print "%s is %s." % (food, color)
#-----------------------------
# NOTE: alternative version
for item in sorted(food_color.items()):
		print "%s is %s." % item
#-----------------------------
# NOTE: alternative version showing a user-defined function
def food_cmp(x, y):
		return cmp(x, y)

for food, color in sorted(food_color, cmp=food_cmp):
		print "%s is %s." % (food, color)
#-----------------------------
def food_len_cmp(x, y):
		return cmp(len(x), len(y))

for food in sorted(food_color, cmp=food_len_cmp):
		print "%s is %s." % (food, food_color[food])

# In this instance, however, the following is both simpler and faster:
for food in sorted(food_color, key=len):
		print "%s is %s." % (food, food_color[food])
#-----------------------------


# @@PLEAC@@_5.10
#-----------------------------
merged = {}
merged.update(a_dict)
merged.update(b_dict)

#-----------------------------
# NOTE: alternative version
merged = a_dict.copy()
merged.update(b_dict)
#-----------------------------
# DON'T DO THIS:

merged = {}
for k, v in a_dict.items():
		merged[k] = v
for k, v in b_dict.items():
		merged[k] = v
#-----------------------------
# food_color as per section 5.8
drink_color = {"Galliano": "yellow",
							 "Mai Tai": "blue"}

ingested_color = drink_color.copy()
ingested_color.update(food_color)
#-----------------------------
# DON'T DO THIS:
drink_color = {"Galliano": "yellow",
							 "Mai Tai": "blue"}

substance_color = {}
for k, v in food_color.items():
		substance_color[k] = v
for k, v in drink_color.items():
		substance_color[k] = v
#-----------------------------
# DON'T DO THIS:
substance_color = {}
for mydict in (food_color, drink_color):
		for k, v in mydict:
				substance_color[k] = v
#-----------------------------
# DON'T DO THIS:
substance_color = {}
for item in food_color.items() + drink_color.items():
		for k, v in mydict:
				substance_color[k] = v
#-----------------------------
substance_color = {}
for mydict in (food_color, drink_color):
		for k, v in mydict.items():
				if substance_color.has_key(k):
						print "Warning:", k, "seen twice.  Using the first definition."
						continue
				substance_color[k] = v

# I think it's a copy, in which case
all_colors = new_colors.copy()


# @@PLEAC@@_5.11
common = [k for k in dict1 if k in dict2]
#-----------------------------
this_not_that = [k for k in dict1 if k not in dict2]
#-----------------------------
# citrus_color is a dict mapping citrus food name to its color.
citrus_color = {"Lemon":  "yellow",
								"Orange": "orange",
								"Lime":   "green"}

# build up a list of non-citrus foods
non_citrus = [k for k in food_color if k not in citruscolor]
#-----------------------------

# @@PLEAC@@_5.12
#-----------------------------
# references as keys of dictionaries is no pb in python

name = {}
for filename in ("/etc/termcap", "/vmunix", "/bin/cat"):
		try:
				myfile = open(filename)
		except IOError:
				pass
		else:
				names[myfile] = filename

print "open files:", ", ".join(name.values())
for f, fname in name.items():
		f.seek(0, 2)       # seek to the end
		print "%s is %d bytes long." % (fname, f.tell())
#-----------------------------

# @@PLEAC@@_5.13
# Python doesn't allow presizing of dicts, but hashing is efficient -
# it only re-sizes at intervals, not every time an item is added.

# @@PLEAC@@_5.14
count = {}
for element in mylist:
		count[element] = count.get(element, 0) + 1

# @@PLEAC@@_5.15
#-----------------------------
import fileinput

father = {'Cain': 'Adam',
					'Abel': 'Adam',
					'Seth': 'Adam',
					'Enoch': 'Cain',
					'Irad': 'Enoch',
					'Mehujael': 'Irad',
					'Methusael': 'Mehujael',
					'Lamech': 'Methusael',
					'Jabal': 'Lamech',
					'Tubalcain': 'Lamech',
					'Enos': 'Seth',
				 }

for line in fileinput.input():
		person = line.rstrip()
		while person:                    # as long as we have people,
				print person,                # print the current name
				person = father.get(person)  # set the person to the person's father
		print

#-----------------------------
import fileinput

children = {}
for k, v in father.items():
		children.setdefault(v, []).append(k)

for line in fileinput.input():
		person = line.rstrip()
		kids = children.get(person, ["nobody"])
		print person, "begat", ", ".join(kids)

#-----------------------------
import sys, re
pattern = re.compile(r'^\s*#\s*include\s*<([^>]+)')
includes = {}
for filename in filenames:
		try:
				infile = open(filename)
		except IOError, err:
				print>>sys.stderr, err
				continue
		for line in infile:
				match = pattern.match(line)
				if match:
						includes.setdefault(match.group(1), []).append(filename)
#-----------------------------
# list of files that don't include others
mydict = {}
for e in reduce(lambda a,b: a + b, includes.values()):
		if not includes.has_key(e):
				mydict[e] = 1
include_free = mydict.keys()
include_free.sort()

# @@PLEAC@@_5.16
#-----------------------------
#!/usr/bin/env python -w
# dutree - print sorted indented rendition of du output
import os, sys

def get_input(args):
		# NOTE: This is insecure - use only from trusted code!
		cmd = "du " + " ".join(args)
		infile = os.popen(cmd)

		dirsize = {}
		kids = {}
		for line in infile:
				size, name = line[:-1].split("\t", 1)
				dirsize[name] = int(size)
				parent = os.path.dirname(name)
				kids.setdefault(parent, []).append(name)
		# Remove the last field added, which is the root
		kids[parent].pop()
		if not kids[parent]: 
				del kids[parent]

		return name, dirsize, kids

def getdots(root, dirsize, kids):
		size = cursize = dirsize[root]
		if kids.has_key(root):
				for kid in kids[root]:
						cursize -= dirsize[kid]
						getdots(kid, dirsize, kids)
		if size != cursize:
				dot = root + "/."
				dirsize[dot] = cursize
				kids[root].append(dot)

def output(root, dirsize, kids, prefix = "", width = 0):
		path = os.path.basename(root)
		size = dirsize[root]
		fmt = "%" + str(width) + "d %s"
		line = fmt % (size, path)
		print prefix + line

		prefix += (" " * (width-1)) + "| "  + (" " * len(path))

		if kids.has_key(root):
				kid_list = kids[root]
				kid_list.sort(lambda x, y, dirsize=dirsize:
													cmp(dirsize[x], dirsize[y]))
				width = len(str(dirsize[kid_list[-1]]))
				for kid in kid_list:
						output(kid, dirsize, kids, prefix, width)

def main():
		root, dirsize, kids = get_input(sys.argv[1:])
		getdots(root, dirsize, kids)
		output(root, dirsize, kids)

if __name__ == "__main__":
		main()


# @@PLEAC@@_6.0
# Note: regexes are used less often in Python than in Perl as tasks are often
# covered by string methods, or specialised objects, modules, or packages.

import re                   # "re" is the regular expression module.
re.search("sheep",meadow)   # returns a MatchObject is meadow contains "sheep".
if not re.search("sheep",meadow):
		print "no sheep on this meadow only a fat python."
# replacing strings is not done by "re"gular expressions.
meadow = meadow.replace("old","new")   # replace "old" with "new" and assign result.
#-----------------------------
re.search("ovine",meadow)

meadow = """Fine bovines demand fine toreadors.
Muskoxen are polar ovibovine species.
Grooviness went out of fashion decades ago."""

meadow = "Ovines are found typically in ovaries."

if re.search(r"\bovines\b",meadow,re.I) : print "Here be sheep!"
#-----------------------------
# The tricky bit
mystr = "good food"
re.sub("o*","e",mystr,1) # gives 'egood food'

echo ababacaca | python -c "import sys,re; print re.search('(a|ba|b)+(a|ac)+',sys.stdin.read()).group()"
#-----------------------------
# pattern matching modifiers
# assume perl code iterates over some file
import re, fileinput
for ln = fileinput.input():
		fnd = re.findall("(\d+)",ln)
		if len(fnd) > 0:
				print "Found number %s" % (fnd[0])
# ----------------------------
digits = "123456789"
nonlap = re.findall("(\d\d\d)", digits)
yeslap = ["not yet"]
print "Non-overlapping:",",".join(nonlap)
print "Overlapping    :",",".join(yeslap)
# ----------------------------
mystr = "And little lambs eat ivy"
fnd = re.search("(l[^s]*s)", mystr)
print "(%s) (%s) (%s)" % (mystr[:fnd.start()], fnd.group(), mystr[fnd.end():])
# (And ) (little lambs) ( eat ivy)


# @@PLEAC@@_6.1
import re
dst = re.sub("this","that",src)
#-----------------------------
# strip to basename
basename = re.sub(".*/(?=[^/]+)","",progname)

# Make All Words Title-Cased
# DON'T DO THIS - use str.title() instead
def cap(mo): return mo.group().capitalize()
re.sub("(?P<n>\w+)",cap,"make all words title-cased")

# /usr/man/man3/foo.1 changes to /usr/man/cat3/foo.1
manpage = "/usr/man/man3/foo.1"
catpage  = re.sub("man(?=\d)","cat",manpage)
#-----------------------------
bindirs = "/usr/bin /bin /usr/local/bin".split()
libdirs = [d.replace("bin", "lib") for d in bindirs]

print " ".join(libdirs)
#=> /usr/lib /lib /usr/local/lib
#-----------------------------
# strings are never modified in place.
#-----------------------------

# @@PLEAC@@_6.2
##---------------------------

# DON'T DO THIS.  use line[:-1].isalpha() [this probably goes for the
#    remainder of this section too!]
import re
if re.match("^[A-Za-z]+$",line):
		print "pure alphabetic"
##---------------------------
if re.match(r"^[^\W\d_]+$", line, re.LOCALE):
		print "pure alphabetic"
##---------------------------
import re
import locale

try:
		locale.setlocale(locale.LC_ALL, 'fr_CA.ISO8859-1')
except:
		print "couldn't set locale to French Cnadian"
		raise SystemExit

DATA="""
silly
façade
coöperate
niño
Renée
Molière 
hæmoglobin
naïve
tschüß
random!stuff#here
"""

for ln in DATA.split():
		ln = ln.rstrip()
		if re.match(r"^[^\W\d_]+$",ln,re.LOCALE):
				print "%s: alphabetic" % (ln)
		else:
				print "%s: line noise" % (ln)
# although i dont think "coöperate" should be in canadian
##---------------------------

# @@PLEAC@@_6.3
# Matching Words
"\S+"          # as many non-whitespace bytes as possible
"[A-Za-z'-]+"  # as many letters, apostrophes, and hyphens

# string split is similar to splitting on "\s+"
"A text   with some\tseparator".split()

"\b*([A-Za-z]+)\b*"   # word boundaries 
"\s*([A-Za-z]+)\s*"   # might work too as on letters are allowed.

re.search("\Bis\B","this thistle") # matches on thistle not on this
re.search("\Bis\B","vis-a-vis")    # does not match

# @@PLEAC@@_6.4
#-----------------------------
#!/usr/bin/python
# resname - change all "foo.bar.com" style names in the input stream
# into "foo.bar.com [204.148.40.9]" (or whatever) instead

import socket               # load inet_addr
import fileinput
import re

match = re.compile("""(?P<hostname>  # capture hostname
												 (?:         # these parens for grouping only
														[\w-]+   # hostname component
														\.       # ant the domain dot
												 ) +         # now repeat that whole thing a bunch of times
												 [A-Za-z]    # next must be a letter
												 [\w-] +     # now trailing domain part
											)              # end of hostname capture
									 """,re.VERBOSE)   # for nice formatting

def repl(match_obj):
		orig_hostname = match_obj.group("hostname")
		try:
				addr = socket.gethostbyname(orig_hostname)
		except socket.gaierror:
				addr = "???"
		return "%s [%s]" % (orig_hostname, addr)

for ln in fileinput.input():
		print match.sub(repl, ln)
#-----------------------------
re.sub("""(?x)     # nicer formatting
					\#       #   a pound sign
					(\w+)    #   the variable name
					\#       #   another pound sign
					""",
					lambda m: eval(m.group(1)),  # replace with the value of the global variable
					line
			)
##-----------------------------
re.sub("""(?x)     # nicer formatting
					\#       #   a pound sign
					(\w+)    #   the variable name
					\#       #   another pound sign
					""",
					lambda m: eval(eval(m.group(1))),  # replace with the value of *any* variable
					line
			)
##-----------------------------

# @@PLEAC@@_6.5
import re
pond = "one fish two fish red fish blue fish"
fishes = re.findall(r"(?i)(\w+)\s+fish\b",pond)
if len(fishes)>2:
		print "The third fish is a %s one." % (fishes[2])
##-----------------------------
re.findall(r"(?i)(?:\w+\s+fish\s+){2}(\w+)\s+fish",pond)
##-----------------------------
count = 0
for match_object in re.finditer(r"PAT", mystr):
		count += 1   # or whatever you want to do here

# "progressive" matching might be better if one wants match 5 from 50.
# to count use
count = len(re.findall(r"PAT",mystr))
count = len(re.findall(r"aba","abaababa"))

# "count" overlapping matches
count = len(re.findall(r"(?=aba)","abaababa"))

# FASTEST non-overlapping might be str.count
"abaababa".count("aba")
##-----------------------------
pond = "one fish two fish red fish blue fish"
colors = re.findall(r"(?i)(\w+)\s+fish\b",pond)   # get all matches
color = colors[2]                                 # then the one we want

# or without a temporary list
color = re.findall(r"(?i)(\w+)\s+fish\b",pond)[2] # just grab element 3

print "The third fish in the pond is %s." % (color)
##-----------------------------
import re

pond = "one fish two fish red fish blue fish"
matches = re.findall(r"(\w+)\s+fish\b",pond)
evens = [fish for (i, fish) in enumerate(matches) if i%2]
print "Even numbered fish are %s." % (" ".join(evens))
##-----------------------------
count = 0
def four_is_sushi(match_obj):
		global count
		count += 1
		if count==4:
				return "sushi%s" % (match_obj.group(2))
		return "".join(match_obj.groups())

re.sub(r"""(?x)               # VERBOSE
					 \b                 # makes next \w more efficient
					 ( \w+ )            # this is what we'll be changing
					 (
						 \s+ fish \b
					 )""",
					 four_is_sushi,
					 pond)
# one fish two fish red fish sushi fish
##-----------------------------
# greedily
last_fish = re.findall(r"(?i).*\b(\w+)\s+fish\b",pond)
##-----------------------------
pond = "One fish two fish red fish blue fish swim here"
color = re.findall(r"(?i)\b(\w+)\s+fish\b",pond)[-1]
print "Last fish is "+color+"."
# FASTER using string.
lastfish = pond.rfind("fish")
color = pond[:lastfish].split()[-1]
##-----------------------------
r"""(?x)
		A             # find some pattern A
		(?!           # mustn't be able to find
			.*          # something
			A           # and A
		)
		$             # through the end of string
 """

pond = "One fish two fish red fish blue fish swim here"
fnd = re.findall(r"""(?xis)                # VERBOSE, CASEINSENSITIVE, DOTALL
									\b ( \w+ ) \s+ fish \b
									(?! .* \b fish \b )""",
									pond)
if len(fnd):
		print "Last fish is %s." % (fnd[0])
else:
		print "Failed!"


# @@PLEAC@@_6.6
# Matching Multiple Lines
#
#!/usr/bin/python
# killtags - very bad html tag killer
import re
import sys

text = open(sys.argv[1]).read()        # read the whole file
text = re.sub("(?ms)<.*?>","",text)    # strip tags (terrible
print text
## ----------------------------
#!/usr/bin/python
# headerfy: change certain chapter headers to html
import sys, re

match = re.compile(r"""(?xms)          # re.VERBOSE, re.MULTILINE, and re.DOTALL
											 \A              # start of the string
											 (?P<chapter>    # capture in g<chapter>
												 Chapter       # literal string
												 \s+           # mandatory whitespace
												 \d+           # decimal number
												 \s*           # optional whitespace
												 :             # a real colon
												 . *           # anything not a newline till end of line
											 )
										""")
text = open(sys.argv[1]).read()        # read the whole file
for paragraph in text.split("\n"):   # split on unix end of lines
		p = match.sub("<h1>\g<chapter></h1>",paragraph)
		print p
## ----------------------------
# the one liner does not run.
# python -c 'import sys,re; for p in open(sys.argv[1]).read().split("\n\n"): print re.sub(r"(?ms)\A(Chapter\s+\d+\s*:.*)","<h1>\g0</h1>",p)'
## ----------------------------
match = re.compile(r"(?ms)^START(.*?)^END")
		 # s makes . span line boundaries
		 # m makes ^ match at the beginning of the string and at the beginning of each line

chunk = 0
for paragraph in open(sys.argv[1]).read().split("\n\n"):
		chunk += 1
		fnd = match.findall(paragraph)
		if fnd:
				print "chunk %d in %s has <<%s>>" % (chunk,sys.argv[1],">>,<<".join(fnd))
## ----------------------------

# @@PLEAC@@_6.7
import sys
# Read the whole file and split
chunks = open(sys.argv[1]).read().split()      # on whitespace
chunks = open(sys.argv[1]).read().split("\n")  # on line ends

# splitting on pattern
import re
pattern = r"x"
chunks = re.split(pattern, open(sys.argv[1]).read())
##-----------------------------
chunks = re.split(r"(?m)^\.(Ch|Se|Ss)$",open(sys.argv[1]).read())
print "I read %d chunks." % (len(chunks))
# without delimiters
chunks = re.split(r"(?m)^\.(?:Ch|Se|Ss)$",open(sys.argv[1]).read())

# with delimiters
chunks = re.split(r"(?m)^(\.(?:Ch|Se|Ss))$",open(sys.argv[1]).read())

# with delimiters at chunkstart
chunks = re.findall(r"""(?xms)       # multiline, dot matches lineend, allow comments
													((?:^\.)?  # consume the separator if present
													 .*?)      # match everything but not greedy
													(?=        # end the match on this but dont consume it
														(?:                  # dont put into group [1]
															 ^\.(?:Ch|Se|Ss)$  # either end on one of the roff commands
															 |\Z               # or end of text
														)
													)""",
										open(sys.argv[1]).read())
# [1] if "?:" is removed the result holds tuples: ('.Ch\nchapter x','.Ch')
#     which might be more usefull. 

# @@PLEAC@@_6.8
##-----------------------------
# Python doesn't have perl's range operators
# If you want to only use a selected line range, use enumerate
# (though note that indexing starts at zero:
for i, line in enumerate(myfile):
		if firstlinenum <= i < lastlinenum:
				dosomethingwith(line)

# Using patterned ranges is slightly trickier -
# You need to search for the first pattern then
# search for the next pattern:
import re
for line in myfile:
		if re.match(pat1, line):
				break

dosomethingwith(line)    # Only if pat1 can be on same line as pat2

for line in myfile:
		if re.match(pat2, line):
				break
		dosomethingwith(line)
##-----------------------------
# If you need to extract ranges a lot, the following generator funcs
# may be useful:
def extract_range(myfile, start, finish):
		for i, line in enumerate(myfile):
				if start <= i < finish:
						yield line
				elif i == finish:
						break

for line in extract_range(open("/etc/passwd"), 3, 5):
		print line

def patterned_range(myfile, startpat, endpat=None):
		startpat = re.compile(startpat)
		if endpat is not None:
				endpat = re.compile(endpat)
		in_range = False
		for line in myfile:
				if re.match(startpat, line):
						in_range = True
				if in_range:
						yield line
				if endpat is not None and re.match(endpat, line):
						break

# DO NOT DO THIS.  Use the email module instead
for line in patterned_range(msg, "^From:?", "^$"):
		pass #...


# @@PLEAC@@_6.9
tests = (("list.?",r"^list\..$"),
				("project.*",r"^project\..*$"),
				("*old",r"^.*old$"),
				("type*.[ch]",r"^type.*\.[ch]$"),
				("*.*",r"^.*\..*$"),
				("*",r"^.*$"),
				)

# The book says convert "*","?","[","]" all other characters will be quoted.
# The book uses "\Q" which escapes any characters that would otherwise be
# treated as regular expression.
# Escaping every char fails as "\s" is not "s" in a regex.

def glob2pat(globstr):
		pat = globstr.replace("\\",r"\\")
		pat = pat.replace(".",r"\.").replace("?",r".").replace("*",r".*")
		
		return "^"+pat+"$"

for globstr, patstr in tests:
		g2p = glob2pat(globstr)
		if g2p != patstr:
				print globstr, "failed! Should be", patstr, "but was", g2p


# @@PLEAC@@_6.10

# download the following standalone program
#!/usr/bin/python
# popgrep1 - grep for abbreviations of places that say "pop"
# version 1: slow but obvious way
import fileinput
import re
popstates = ["CO","ON","MI","WI","MN"]
for line in fileinput.input():
		for state in popstates:
				if re.search(r"\b"+state+r"\b",line):
						print line



#-----------------------------
# download the following standalone program
#!/usr/bin/python
# popgrep2 - grep for abbreviations of places that say "pop"
# version 2: compile the patterns
import fileinput
import re
popstates = ["CO","ON","MI","WI","MN"]
state_re = []
for state in popstates:
		state_re.append(re.compile(r"\b"+state+r"\b"))
for line in fileinput.input():
		for state in state_re:
				if state.search(line):
						print line


#-----------------------------
# download the following standalone program
#!/usr/bin/python
# popgrep3 - grep for abbreviations of places that say "pop"
# version 3: compile a single pattern
import fileinput
import re
popstates = ["CO","ON","MI","WI","MN"]
state_re = re.compile(r"\b(?:"+"|".join(popstates)+r")\b")
for line in fileinput.input():
		if state_re.search(line):
				print line


#-----------------------------
# download the following standalone program
#!/usr/bin/python
# grepauth - print lines that mention both Tom and Nat
import fileinput
import re

def build_match_any(words):
		return re.compile("|".join(words))
def uniq(arr):
		seen = {}
		for item in arr:
				seen[item] = seen.get(item, 0) + 1
		return seen.keys()
def build_match_all(words):
		r = re.compile("|".join(words))
		c = lambda line: len(uniq(r.findall(line)))>=len(words)
		return c

any = build_match_any(("Tom","Nat"))
all = build_match_all(("Tom","Nat"))
for line in fileinput.input():
		if any.search(line):
				print "any:", line
		if all(line):
				print "all:", line



#-----------------------------


# @@PLEAC@@_6.11
# Testing for a Valid Pattern

import re
while True:
		pat = raw_input("Pattern? ")
		try:
				re.compile(pat)
		except re.error, err:
				print "INVALID PATTERN", err
				continue
		break

# ----
def is_valid_pattern(pat):
		try:
				re.compile(pat)
		except re.error:
				return False
		return True

# ----

# download the following standalone program
#!/usr/bin/python
# paragrep - trivial paragraph grepper
#
# differs from perl version in parano.
# python version displays paragraph in current file.

import sys, os.path, re
if len(sys.argv)<=1:
				print "usage: %s pat [files]\n" % sys.argv[0]
				sys.exit(1)

pat = sys.argv[1]
try:
				pat_re = re.compile(pat)
except:
				print "%s: bad pattern %s: %s" % (sys.argv[1], pat, sys.exc_info()[1])
				sys.exit(1)
for filename in filter(os.path.isfile,sys.argv[2:]):
				parano = 0
				for para in open(filename).read().split("\n\n"):
								parano += 1
								if pat_re.search(para):
												print filename, parano, para, "\n"
												


# ----

# as we dont evaluate patterns the attack ::
#
#   $pat = "You lose @{[ system('rm -rf *']} big here";
#
# does not work.


# @@PLEAC@@_6.12

# download the following standalone program
#!/usr/bin/python
# localeg - demonstrates locale effects
#
# re must be told to respect locale either in the regexp
# "(?L)" or as flag to the call (python 2.4) "re.LOCALE".

import sys
import re, string
from locale import LC_CTYPE, setlocale, getlocale

name = "andreas k\xF6nig"
locale = {"German" : "de_DE.ISO_8859-1", "English" : "en_US"}
# us-ascii is not supported on linux py23
# none works in activestate py24

try:
		setlocale(LC_CTYPE, locale["English"])
except:
		print "Invalid locale %s" % locale["English"]
		sys.exit(1)
english_names = []
for n in re.findall(r"(?L)\b(\w+)\b",name):
		english_names.append(n.capitalize())

try:
		setlocale(LC_CTYPE, locale["German"])
except:
		print "Invalid locale %s" % locale["German"]
		sys.exit(1)
german_names = map(string.capitalize, re.findall(r"(?L)\b(\w+)\b",name))

print "English names: %s" % " ".join(english_names)
print "German names: %s" % " ".join(german_names)


# @@PLEAC@@_6.13
##-----------------------------
import difflib
matchlist = ["ape", "apple", "lapel", "peach", "puppy"]
print difflib.get_close_matches("appel", matchlist)
#=> ['lapel', 'apple', 'ape']
##-----------------------------
# Also see:
#     http://www.personal.psu.edu/staff/i/u/iua1/python/apse/
#     http://www.bio.cam.ac.uk/~mw263/pyagrep.html

# @@PLEAC@@_6.14
##-----------------------------
# To search (potentially) repeatedly for a pattern, use re.finditer():

# DO NOT DO THIS.  Split on commas and convert elems using int()
mystr = "3,4,5,9,120"
for match in re.finditer("(\d+)", mystr):
		n = match.group(0)
		if n == "9":
				break # '120' will never be matched
		print "Found number", n

# matches know their end position
mystr = "The year 1752 lost 10 days on the 3rd of September"
x = re.finditer("(\d+)", mystr)
for match in x:
		n = match.group(0)
		print "Found number", n

tail = re.match("(\S+)", mystr[match.end():])
if tail:
		print "Found %s after the last number."%tail.group(0)


# @@PLEAC@@_6.15
# Python's regexes are based on Perl's, so it has the non-greedy 
# '*?', '+?', and '??' versions of '*', '+', and '?'.
# DO NOT DO THIS. import htmllib, formatter, etc, instead
#-----------------------------
# greedy pattern
txt = re.sub("<.*>", "", txt) # try to remove tags, very badly

# non-greedy pattern
txt = re.sub("<.*?>", "", txt) # try to remove tags, still rather badly
#-----------------------------
txt = "<b><i>this</i> and <i>that</i> are important</b> Oh, <b><i>me too!</i></b>"

print re.findall("<b><i>(.*?)</i></b>", txt
##-----------------------------
print re.findall("/BEGIN((?:(?!BEGIN).)*)END/", txt)
##-----------------------------
print re.findall("<b><i>((?:(?!<b>|<i>).)*)</i></b>", txt)
##-----------------------------
print re.findall("<b><i>((?:(?!<[ib]>).)*)</i></b>", txt)
##-----------------------------
print re.findall("""
		<b><i> 
		[^<]*  # stuff not possibly bad, and not possibly the end.
		(?:    # at this point, we can have '<' if not part of something bad
		 (?!  </?[ib]>  )   # what we can't have
		 <                  # okay, so match the '<'
		 [^<]*              # and continue with more safe stuff
		) *
		</i></b>
		""", re.VERBOSE, txt)
##-----------------------------

# @@PLEAC@@_6.16
##-----------------------------
text = """
This is a test
test of the duplicate word finder.
"""
words = text.split()
for curr, next in zip(words[:-1], words[1:]):
		if curr.upper() == next.upper():
						print "Duplicate word '%s' found." % curr

# DON'T DO THIS
import re
pat = r"""
			\b            # start at a word boundary (begin letters)
			(\S+)         # find chunk of non-whitespace
			\b            # until another word boundary (end letters)
			(
					\s+       # separated by some whitespace
					\1        # and that very same chunk again
					\b        # until another word boundary
			) +           # one or more sets of those
			"""
for match in re.finditer(pat, text, flags=re.VERBOSE|re.IGNORECASE):
		print "Duplicate word '%s' found." % match.group(1)
##-----------------------------
a = 'nobody';
b = 'bodysnatcher';

text = a+" "+b
pat = r"^(\w+)(\w+) \2(\w+)$"
for match in re.finditer(pat, text):
		m1, m2, m3 = match.groups()
		print m2, "overlaps in %s-%s-%s"%(m1, m2, m3)
##-----------------------------
pat = r"^(\w+?)(\w+) \2(\w+)$"
##-----------------------------
try:
		while True:
				factor = re.match(r"^(oo+?)\1+$", n).group(1)
				n = re.sub(factor, "o", n)
				print len(factor)
except AttributeError:
		print len(n)
##-----------------------------
def diaphantine(n, x, y, z):
		pat = r"^(o*)\1{%s}(o*)\2{%s}(o*)\3{%s}$"%(x-1, y-1, z-1)
		text = "o"*n
		try:
				vals = [len(v) for v in re.match(pat, text).groups()]
		except ValueError:
				print "No solutions."
		else:
				print "One solution is: x=%s, y=%s, z=%s."%tuple(vals)
				
diaphantine(n=281, x=12, y=15, z=16)

# @@PLEAC@@_6.17
##-----------------------------
# Pass any of the following patterns to re.match(), etc
pat = "ALPHA|BETA"
pat = "^(?=.*ALPHA)(?=.*BETA)"
pat = "ALPHA.*BETA|BETA.*ALPHA"
pat = "^(?:(?!PAT).)*$"
pat = "(?=^(?:(?!BAD).)*$)GOOD"
##-----------------------------
if not re.match(pattern, text):
		something()
##-----------------------------
if re.match(pat1, text) and re.match(pat2, text):
		something()
##-----------------------------
if re.match(pat1, text) or re.match(pat2, text):
		something()
##-----------------------------
# DON'T DO THIS.
"""minigrep - trivial grep"""
import sys, re

pat = sys.argv[1]
for line in sys.stdin:
		if re.match(pat, line):
				print line[:-1]
##-----------------------------
if re.match(r"^(?=.*bell)(?=.*lab)", "labelled"):
		something()
##-----------------------------
if re.search("bell", s) and re.search("lab", s):
		something()
##-----------------------------
if re.match("""
						 ^              # start of string
						(?=             # zero-width lookahead
								.*          # any amount of intervening stuff
								bell        # the desired bell string
						)               # rewind, since we were only looking
						(?=             # and do the same thing
								.*          # any amount of intervening stuff
								lab         # and the lab part
						)
						""",
						murray_hill,
						re.DOTALL | re.VERBOSE):
		print "Looks like Bell Labs might be in Murray Hill!"
##-----------------------------
if re.match(r"(?:^.*bell.*lab)|(?:^.*lab.*bell)", "labelled"):
		something()
##-----------------------------
brand = "labelled"
if re.match("""
						(?:                 # non-capturing grouper
								^ .*?           # any amount of stuff at the front
								bell            # look for a bell
								.*?             # followed by any amount of anything
								lab             # look for a lab
						)                   # end grouper
						|                   # otherwise, try the other direction
						(?:                 # non-capturing grouper
								^ .*?           # any amount of stuff at the front
								lab             # look for a lab
								.*?             # followed by any amount of anything
								bell            # followed by a bell
						)                   # end grouper
						""",
						brand,
						re.DOTALL | re.VERBOSE):
		print "Our brand has bell and lab separate."
##-----------------------------
x = "odlaw"
if re.match("^(?:(?!waldo).)*$", x):
	 print "There's no waldo here!"
##-----------------------------
if re.match("""
						^                   # start of string
						(?:                 # non-capturing grouper
								(?!             # look ahead negation
										waldo       # is he ahead of us now?
								)               # is so, the negation failed
								.               # any character (cuzza /s)
						) *                 # repeat that grouping 0 or more
						$                   # through the end of the string
						""",
						x,
						re.VERBOSE | re.DOTALL):
		print "There's no waldo here!\n";
##-----------------------------

# @@PLEAC@@_6.18
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_6.19
##-----------------------------
from email._parseaddr import AddressList

print AddressList("fred&barney@stonehenge.com").addresslist[0]

print AddressList("fred&barney@stonehenge.com (Hanna Barbara)").addresslist[0]

name, address = AddressList("Mr Fooby Blah <me@nowhere.com>").addresslist[0]
print "%s's address is '%s'"%(name, address)

# @@PLEAC@@_6.20
##-----------------------------
# Assuming the strings all start with different letters, or you don't
# mind there being precedence, use the startswith string method:

def get_action(answer):
		answer = answer.lower()
		actions = ["send", "stop", "abort", "list", "end"]
		for action in actions:
				if action.startswith(answer):
						return action

print "Action is %s."%get_action("L")
#=> Action is list.
##-----------------------------
#DON'T DO THIS:
import re
answer = "ab"
answer = re.escape(answer.strip())
for action in ("SEND", "STOP", "ABORT", "LIST", "EDIT"):
		if re.match(answer, action, flags=re.IGNORECASE):
				print "Action is %s."%action.lower()
##-----------------------------
import re, sys
def handle_cmd(cmd):    
		cmd = re.escape(cmd.strip())
		for name, action in {"edit": invoke_editor,
												 "send": deliver_message,
												 "list": lambda: system(pager, myfile),
												 "abort": sys.exit,
												 }
				if re.match(cmd, name, flags=re.IGNORECASE):
						action()
						break
		else:
				print "Unknown command:", cmd
handle_cmd("ab")

# @@PLEAC@@_6.21
##-----------------------------
# urlify - wrap HTML links around URL-like constructs
import re, sys, fileinput

def urlify_string(s):
		urls = r'(http|telnet|gopher|file|wais|ftp)'
		
		ltrs = r'\w';
		gunk = r'/#~:.?+=&%@!\-'
		punc = r'.:?\-'
		any  = ltrs + gunk + punc 

		pat = re.compile(r"""
			\b                    # start at word boundary
			(                     # begin \1  {
			 %(urls)s  :          # need resource and a colon
			 [%(any)s] +?         # followed by one or more
														#  of any valid character, but
														#  be conservative and take only
														#  what you need to....
			)                     # end   \1  }
			(?=                   # look-ahead non-consumptive assertion
			 [%(punc)s]*          # either 0 or more punctuation
			 [^%(any)s]           #   followed by a non-url char
			 |                    # or else
			 $                    #   then end of the string
			)
		"""%locals(), re.VERBOSE | re.IGNORECASE)
		return re.sub(pat, r"<A HREF=\1>\1</A>", s)

if __name__ == "__main__":
		for line in fileinput.input():
				print urlify_string(line)


# @@PLEAC@@_6.22
##-----------------------------
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_6.23
# The majority of regexes in this section are either partially
# or completely The Wrong Thing to Do.
##-----------------------------
# DON'T DO THIS.  Use a Roman Numeral module, etc. (since
# you need one anyway to calculate values)
pat = r"^m*(d?c{0,3}|c[dm])(l?x{0,3}|x[lc])(v?i{0,3}|i[vx])$"
re.match(pat, "mcmlxcvii")
##-----------------------------
txt = "one two three four five"

# If the words are cleanly delimited just split and rejoin:
word1, word2, rest = txt.split(" ", 2)
print " ".join([word2, word1, rest])

# Otherwise:
frompat = r"(\S+)(\s+)(\S+)"
topat =  r"\3\2\1"
print re.sub(frompat, topat, txt)

##-----------------------------
print str.split("=")

# DON'T DO THIS
pat = r"(\w+)\s*=\s*(.*)\s*$"
print re.match(pat, "key=val").groups()
##-----------------------------
line = "such a very very very very very very very very very very very very very long line"
if len(line) > 80:
		process(line)

# DON'T DO THIS
pat = ".{80,}"
if re.match(pat, line):
		process(line)
##-----------------------------
dt = time.strptime("12/11/05 12:34:56", "%d/%m/%y %H:%M:%S")

# DON'T DO THIS
pat = r"(\d+)/(\d+)/(\d+) (\d+):(\d+):(\d+)"
dt = re.match(pat, "12/11/05 12:34:56").groups()
##-----------------------------
txt = "/usr/bin/python"
print txt.replace("/usr/bin", "/usr/local/bin")
# Alternatively for file operations use os.path, shutil, etc.

# DON'T DO THIS
print re.sub("/usr/bin", "/usr/local/bin", txt)
##-----------------------------
import re

def unescape_hex(matchobj):
		return chr(int(matchobj.groups(0)[0], 16))
txt = re.sub(r"%([0-9A-Fa-f][0-9A-Fa-f])", unescape_hex, txt)

# Assuming that the hex escaping is well-behaved, an alternative is:
def unescape_hex(seg):
		return chr(int(seg[:2], 16)) + seg[2:]

segs = txt.split("%")
txt = segs[0] + "".join(unescape_hex(seg) for seg in segs[1:])
##-----------------------------
txt = re.sub(r"""
						 /\*                    # Match the opening delimiter
						 .*?                    # Match a minimal number of characters
						 \*/                    # Match the closing delimiter
						 """, "", txt, re.VERBOSE)
##-----------------------------
txt.strip()

# DON'T DO THIS
txt = re.sub(r"^\s+", "", txt)
txt = re.sub(r"\s+$", "", txt)
##-----------------------------
txt.replace("\\n", "\n")

# DON'T DO THIS
txt = re.sub("\\n", "\n", txt)
##-----------------------------
txt = re.sub("^.*::", "")
##-----------------------------
import socket
socket.inet_aton(txt) # Will raise an error if incorrect

# DON'T DO THIS.
octseg =r"([01]?\d\d|2[0-4]\d|25[0-5])"
dot = r"\."
pat = "^" + octseg + dot + octseg + dot + octseg + dot + octseg + "$"

if not re.match(pat, txt, re.VERBOSE)
	 raise ValueError

# Defitely DON'T DO THIS.
pat = r"""^([01]?\d\d|2[0-4]\d|25[0-5])\.([01]?\d\d|2[0-4]\d|25[0-5])\.
					([01]?\d\d|2[0-4]\d|25[0-5])\.([01]?\d\d|2[0-4]\d|25[0-5])$"""
##-----------------------------
fname = os.path.basename(path)

# DON'T DO THIS.
fname = re.sub("^.*/", "", path)
##-----------------------------
import os
try:
		tc = os.environ["TERMCAP"]
except KeyError:
		cols = 80
else:
		cols = re.match(":co#(\d+):").groups(1)
##-----------------------------
# (not quite equivalent to the Perl version)
name = os.path.basename(sys.argv[0])

# DON'T DO THIS.
name = re.sub("^.*/", "", sys.argv[0])
##-----------------------------
if sys.platform != "linux":
		raise SystemExit("This isn't Linux")
##-----------------------------
txt = re.sub(r"\n\s+", " ", txt)

# In many cases you could just use:
txt = txt.replace("\n", " ")
##-----------------------------
nums = re.findall(r"\d+\.?\d*|\.\d+", txt)
##-----------------------------
# If the words are clearly delimited just use:
capwords = [word for word in txt.split() if word.isupper()]

# Otherwise
capwords = [word for word in re.findall(r"\b(\S+)\b", txt) if word.isupper()]

# (probably) DON'T DO THIS. 
capwords = re.findall(r"(\b[^\Wa-z0-9_]+\b)", txt)
##-----------------------------
# If the words are clearly delimited just use:
lowords = [word for word in txt.split() if word.islower()]

# Otherwise
lowords = [word for word in re.findall(r"\b(\S+)\b", txt) if word.islower()]

# (probably) DON'T DO THIS. 
lowords = re.findall(r"(\b[^\WA-Z0-9_]+\b)", txt)
##-----------------------------
# If the words are clearly delimited just use:
icwords = [word for word in txt.split() if word.istitle()]

# Otherwise
icwords = [word for word in re.finditer(r"\b(\S+)\b") if word.istitle()]

# DON'T DO THIS. 
icwords = re.findall(r"(\b[^\Wa-z0-9_][^\WA-Z0-9_]*\b)", txt)
##-----------------------------
# DON'T DO THIS - use HTMLParser, etc.
links = re.findall(r"""<A[^>]+?HREF\s*=\s*["']?([^'" >]+?)[ '"]?>""", txt)
##-----------------------------
names = txt.split()
if len(names) == 3:
		initial = names[1][0]
else:
		initial = ""

# DON'T DO THIS. 
pat = "^\S+\s+(\S)\S*\s+\S"
try:
		initial = re.match(pat, txt).group(1)
except AttributeError:
		initial = ""
##-----------------------------
txt = re.sub('"([^"]*)"', "``\1''", txt)
##-----------------------------
sentences = [elem[0] for elem in re.findall(r"(.*?[!?.])(  |\Z)", s)]
##-----------------------------
import time
dt = time.strptime(txt, "%Y-%m-%d")

# DON'T DO THIS.
year, month, day = re.match(r"(\d{4})-(\d\d)-(\d\d)", txt).groups()
##-----------------------------
pat = r"""
			^
			(?:
			 1 \s (?: \d\d\d \s)?            # 1, or 1 and area code
			 |                               # ... or ...
			 \(\d\d\d\) \s                   # area code with parens
			 |                               # ... or ...
			 (?: \+\d\d?\d? \s)?             # optional +country code
			 \d\d\d ([\s\-])                 # and area code
			)
			\d\d\d (\s|\1)                   # prefix (and area code separator)
			\d\d\d\d                         # exchange
				$
			"""
re.match(pat, txt, re.VERBOSE)
##-----------------------------
re.match(r"\boh\s+my\s+gh?o(d(dess(es)?|s?)|odness|sh)\b", txt, re.IGNORECASE)
##-----------------------------
for line in file(fname, "Ur"):          #Universal newlines
		process(line)

# DON'T DO THIS
lines = [re.sub(r"^([^\012\015]*)(\012\015?|\015\012?)", "", line) 
				 for line in file(fname)]
##-----------------------------


# @@PLEAC@@_7.0
for line in open("/usr/local/widgets/data"):
		if blue in line:
				print line[:-1]
#---------
import sys, re
pattern = re.compile(r"\d")
for line in sys.stdin:
		if not pattern.search(line):
				sys.stderr.write("No digit found.\n")
		sys.stdout.write("Read: " + line)
sys.stdout.close()
#---------
logfile = open("/tmp/log", "w")
#---------
logfile.close()
#---------
print>>logfile, "Countdown initiated ..."
print "You have 30 seconds to reach minimum safety distance."

# DONT DO THIS
import sys
old_output, sys.stdout = sys.stdout, logfile
print "Countdown initiated ..."
sys.stdout = old_output
print "You have 30 seconds to reach minimum safety distance."
#---------

# @@PLEAC@@_7.1
# Python's open() function somewhat covers both perl's open() and 
# sysopen() as it has optional arguments for mode and buffering.
source = open(path)
sink = open(path, "w")
#---------
# NOTE: almost no one uses the low-level os.open and os.fdopen
# commands, so their inclusion here is just silly.  If 
# os.fdopen(os.open(...)) were needed often, it would be turned
# into its own function.  Instead, I'll use 'fd' to hint that
# os.open returns a file descriptor
import os
source_fd = os.open(path, os.O_RDONLY)
source = os.fdopen(fd)
sink_fd = os.open(path, os.O_WRONLY)
sink = os.fdopen(sink_fd)
#---------
myfile = open(filename, "w")
fd = os.open(filename, os.O_WRONLY | os.O_CREAT)
myfile = open(filename, "r+")
#---------
fd = os.open(name, flags)
fd = os.open(name, flags, mode)
#---------
myfile = open(path)
fd = os.open(path, os.O_RDONLY)
#-----------------------------
myfile = open(path, "w")
fd = os.open(path, os.O_WRONLY|os.O_TRUNC|os.O_CREAT)
fd = os.open(path, os.O_WRONLY|os.O_TRUNC|os.O_CREAT, 0600)
#-----------------------------
fd = os.open(path, os.O_WRONLY|os.O_EXCL|os.O_CREAT)
fd = os.open(path, os.O_WRONLY|os.O_EXCL|os.O_CREAT, 0600)
#-----------------------------
myfile = open(path, "a")
fd = os.open(path, os.O_WRONLY|os.O_APPEND|os.O_CREAT)
fd = os.open(path, os.O_WRONLY|os.O_APPEND|s.O_CREAT, 0600)
#-----------------------------
fd = os.open(path, os.O_WRONLY|os.O_APPEND)
#-----------------------------
myfile = open(path, "rw")
fd = os.open(path, os.O_RDWR)
#-----------------------------
fd = os.open(path, os.O_RDWR|os.O_CREAT)
fd = os.open(path, os.O_RDWR|os.O_CREAT, 0600)
#-----------------------------
fd = os.open(path, os.O_RDWR|os.O_EXCL|os.O_CREAT)
fd = os.open(path, os.O_RDWR|os.O_EXCL|os.O_CREAT, 0600)
#-----------------------------

# @@PLEAC@@_7.2
# Nothing different needs to be done with Python

# @@PLEAC@@_7.3
import os
filename = os.path.expanduser(filename)

# @@PLEAC@@_7.4
myfile = open(filename)   # raise an exception on error

try:
		myfile = open(filename)
except IOError, err:
		raise AssertionError("Couldn't open %s for reading : %s" %
												 (filename, err.strerror))

# @@PLEAC@@_7.5
import tempfile

myfile = tempfile.TemporaryFile()

#-----------------------------
# NOTE: The TemporaryFile() call is much more appropriate
# I would not suggest using this code for real work.
import os, tempfile

while True:
		name = os.tmpnam()
		try:
				fd = os.open(name, os.O_RDWR|os.O_CREAT|os.O_EXCL)
				break
		except os.error:
				pass
myfile = tempfile.TemporaryFileWrapper(os.fdopen(fd), name)

# now go on to use the file ...
#-----------------------------
import os
while True:
		tmpname = os.tmpnam()
		fd = os.open(tmpnam, os.O_RDWR | os.O_CREAT | os.O_EXCL)
		if fd:
				tmpfile = os.fdopen(fd)
				break

os.remove(tmpnam)

#-----------------------------
import tempfile

myfile = tempfile.TemporaryFile(bufsize = 0)
for i in range(10):
		print>>myfile, i
myfile.seek(0)
print "Tmp file has:", myfile.read()
#-----------------------------

# @@PLEAC@@_7.6
DATA = """\
your data goes here
"""
for line in DATA.split("\n"):
		pass # process the line

# @@PLEAC@@_7.7

for line in sys.stdin:
		pass # do something with the line

# processing a list of files from commandline
import fileinput
for line in fileinput.input():
		 do something with the line

#-----------------------------
import sys

def do_with(myfile):
		for line in myfile:
				print line[:-1]

filenames = sys.argv[1:]
if filenames:
		for filename in filenames:
				try:
						do_with(open(filename))
				except IOError, err:
						sys.stderr.write("Can't open %s: %s\n" % (filename, err.strerror))
						continue
else:
		do_with(sys.stdin)

#-----------------------------
import sys, glob
ARGV = sys.argv[1:] or glob.glob("*.[Cch]")
#-----------------------------
# NOTE: the getopt module is the prefered mechanism for reading
# command line arguments
import sys
args = sys.argv[1:]
chop_first = 0

if args and args[0] == "-c":
		chop_first += 1
		args = args[1:]

# arg demo 2: Process optional -NUMBER flag

# NOTE: You just wouldn't process things this way for Python,
# but I'm trying to preserve the same semantics.

import sys, re
digit_pattern = re.compile(r"-(\d+)$")

args = sys.argv[1:]
if args:
		match = digit_pattern.match(args[0])
		if match:
				columns = int(match.group(1))
				args = args[1:]

# NOTE: here's the more idiomatic way, which also checks
# for the "--" or a non "-" argument to stop processing

args = sys.argv[1:]
for i in range(len(args)):
		arg = args[i]
		if arg == "--" or not arg.startwith("-"):
				break
		if arg[1:].isdigit():
				columns = int(arg[1:])
				continue



# arg demo 3: Process clustering -a, -i, -n, or -u flags
import sys, getopt
try:
		args, filenames = getopt.getopt(sys.argv[1:], "ainu")
except getopt.error:
		raise SystemExit("usage: %s [-ainu] [filenames] ..." % sys.argv[0])

append = ignore_ints = nostdout = unbuffer = 0
for k, v in args:
		if k == "-a": append += 1
		elif k == "-i": ignore_ints += 1
		elif k == "-n": nostdout += 1
		elif k == "-u": unbuffer += 1
		else:
				raise AssertionError("Unexpected argument: %s" % k)

#-----------------------------
# Note: Idiomatic Perl get translated to idiomatic Python
import fileinput
for line in fileinput.input():
		sys.stdout.write("%s:%s:%s" %
										 (fileinput.filename(), fileinput.filelineno(), line))
#-----------------------------
#!/usr/bin/env python
# findlogin1 - print all lines containing the string "login"
for line in fileinput.input(): # loop over files on command line
		if line.find("login") != -1:
				sys.stdout.write(line)

#-----------------------------
#!/usr/bin/env python
# lowercase - turn all lines into lowercase
### NOTE: I don't know how to do locales in Python
for line in fileinput.input(): # loop over files on command line
		sys.stdout.write(line.lower())

#-----------------------------
#!/usr/bin/env python
# NOTE: The Perl code appears buggy, in that "Q__END__W" is considered
#       to be a __END__ and words after the __END__ on the same line
#       are included in the count!!!
# countchunks - count how many words are used.
# skip comments, and bail on file if __END__
# or __DATA__ seen.
chunks = 0
for line in fileinput.input():
		for word in line.split():
				if word.startswith("#"):
						continue
				if word in ("__DATA__", "__END__"):
						fileinput.close()
						break
				chunks += 1
print "Found", chunks, "chunks"


# @@PLEAC@@_7.8
import shutil

old = open("old")
new = open("new","w")

for line in old:
		new.writeline(line)
new.close()
old.close()

shutil.copyfile("old", "old.orig")
shutil.copyfile("new", "old")

# insert lines at line 20:
for i, line in enumerate(old):
		if i == 20:
				print>>new, "Extra line 1\n"
				print>>new, "Extra line 2\n"
		print>>new, line


# or delete lines 20 through 30:
for i, line in enumerate(old):
		if 20 <= i <= 30:
				continue
		print>>new, line


# @@PLEAC@@_7.9
# modifying with "-i" commandline switch is a perl feature
# python has fileinput
import fileinput, sys, time
today = time.strftime("%Y-%m-%d",time.localtime())
for line in fileinput.input(inplace=1, backup=".orig"):
		sys.stdout.write(line.replace("DATE",today))

# set up to iterate over the *.c files in the current directory,
# editing in place and saving the old file with a .orig extension.
import glob, re
match = re.compile("(?<=[pP])earl")
files = fileinput.FileInput(glob.glob("*.c"), inplace=1, backup=".orig")
while True:
		line = files.readline()
		sys.stderr.write(line)
		if not line:
				break
		if files.isfirstline():
				sys.stdout.write("This line should appear at the top of each file\n")
		sys.stdout.write(match.sub("erl",line))


# @@PLEAC@@_7.10
#-----------------------------
myfile = open(filename, "r+")
data = myfile.read()
# change data here
myfile.seek(0, 0)
myfile.write(data)
myfile.truncate(myfile.tell())
myfile.close()
#-----------------------------
myfile = open(filename, "r+")
data = [process(line) for line in myfile]
myfile.seek(0, 0)
myfile.writelines(data)
myfile.truncate(myfile.tell())
myfile.close()
#-----------------------------

# @@PLEAC@@_7.11
																																																																																																																															 
import fcntl
myfile = open(somepath, 'r+')
fcntl.flock(myfile, fcntl.LOCK_EX)
# update file, then...
myfile.close()
#-----------------------------
fcntl.LOCK_SH
fcntl.LOCK_EX
fcntl.LOCK_NB
fcntl.LOCK_UN
#-----------------------------
import warnings
try:
		fcntl.flock(myfile, fcntl.LOCK_EX|fcntl.LOCK_NB)
except IOError:
		warnings.warn("can't immediately write-lock the file ($!), blocking ...")
		fcntl.flock(myfile, fcntl.LOCK_EX)
#-----------------------------
fcntl.flock(myfile, fcntl.LOCK_UN)
#-----------------------------
# option "r+" instead "w+" stops python from truncating the file on opening
# when another process might well hold an advisory exclusive lock on it.
myfile = open(somepath, "r+")
fcntl.flock(myfile, fcntl.LOCK_EX)
myfile.seek(0, 0)
myfile.truncate(0)
print>>myfile, "\n"   # or myfile.write("\n")
myfile.close()
#-----------------------------

# @@PLEAC@@_7.12
# Python doesn't have command buffering.  Files can have buffering set,
# when opened:
myfile = open(filename, "r", buffering=0)   #Unbuffered
myfile = open(filename, "r", buffering=1)   #Line buffered
myfile = open(filename, "r", buffering=100) #Use buffer of (approx) 100 bytes
myfile = open(filename, "r", buffering=-1)  #Use system default

myfile.flush()  # Flush the I/O buffer

# stdout is treated as a file.  If you ever need to flush it, do so:
import sys
sys.stdout.flush()

# DON'T DO THIS.  Use urllib, etc.
import socket
mysock = socket.socket()
mysock.connect(('www.perl.com', 80))
# mysock.setblocking(True)
mysock.send("GET /index.html http/1.1\n\n")
f = mysock.makefile()
print "Doc is:"
for line in f:
		print line[:-1]

# @@PLEAC@@_7.13
import select
while True:
		rlist, wlist, xlist = select.select([file1, file2, file3], [], [], 0)
		for r in rlist:
				pass # Do something with the file handle

# @@PLEAC@@_7.14
# @@SKIP@@ Use select.poll() on Unix systems.
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_7.15
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_7.16
# NOTE: this is all much easier in Python
def subroutine(myfile):
		print>>myfile, "Hello, file"

variable = myfile
subroutine(variable)

# @@PLEAC@@_7.17
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_7.18
for myfile in files:
		print>>myfile, stuff_to_print

# NOTE: This is unix specific
import os
file = os.popen("tee file1 file2 file3 >/dev/null", "w")
print>>myfile, "whatever"

# NOTE: the "make STDOUT go to three files" is bad programming style
import os, sys
sys.stdout.file = os.popen("tee file1 file2 file3", "w")
print "whatever"
sys.stdout.close()

# You could use a utility object to redirect writes:
class FileDispatcher(object):
		def __init__(self, *files):
				self.files = files

		def write(self, msg):
				for f in self.files:
						f.write(msg)

		def close(self):
				for f in self.files:
						f.close()

x = open("C:/test1.txt", "w")
y = open("C:/test2.txt", "w")
z = open("C:/test3.txt", "w")

fd = FileDispatcher(x, y, z)
print>>fd, "Foo"     # equiv to fd.write("Foo"); fd.write("\n")
print>>fd, "Testing"  
fd.close()

# @@PLEAC@@_7.19
import os
myfile = os.fdopen(fdnum) # open the descriptor itself
myfile = os.fdopen(os.dup(fdnum)) # open to a copy of the descriptor

###
outcopy = os.fdopen(os.dup(sys.stdin.fileno()), "w")
incopy = os.fdopen(os.dup(sys.stdin.fileno()), "r")

# @@PLEAC@@_7.20
original = open("C:/test.txt")
alias = original
alias.close()
print original.closed
#=>True

import copy

original = open("C:/test.txt")
dupe = copy.copy(original)
dupe.close()
print original.closed
#=>False

# DON'T DO THIS.
import sys
oldstderr = sys.stderr
oldstdout = sys.stdout

sys.stderr = open("C:/stderrfile.txt")
sys.stdout = open("C:/stdoutfile.txt")

print "Blah"  # Will be written to C:/stdoutfile.txt
sys.stdout.close()

sys.stdout = oldstdout
sys.stderr = oldstderr


# @@PLEAC@@_7.21
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_7.22
# On Windows:
import msvcrt
myfile.seek(5, 0)
msvcrt.locking(myfile.fileno(), msvcrt.LK_NBLCK, 3)

# On Unix:
import fcntl
fcntl.lockf(myfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB, 3, 5)


# ^^PLEAC^^_8.0
#-----------------------------
for line in DATAFILE:
		line = line.rstrip()
		size = len(line)
		print size        # output size of line

#-----------------------------
for line in datafile:
		print length(line.rstrip())     # output size of line
#-----------------------------
lines = datafile.readlines()
#-----------------------------
whole_file = myfile.read()
#-----------------------------
## No direct equivalent in Python
#% perl -040 -e '$word = <>; print "First word is $word\n";'
#-----------------------------
## No direct equivalent in Python
#% perl -ne 'BEGIN { $/="%%\n" } chomp; print if /Unix/i' fortune.dat
#-----------------------------
print>>myfile, "One", "two", "three"  # "One two three"
print "Baa baa black sheep."         # Sent to default output file
#-----------------------------
buffer = myfile.read(4096)
rv = len(buffer)
#-----------------------------
myfile.truncate(length)
open("/tmp/%d.pid" % os.getpid(), "a").truncate(length)
#-----------------------------
pos = myfile.tell()
print "I'm", pos, "bytes from the start of DATAFILE."
#-----------------------------
logfile.seek(0, 2)   # Seek to the end
datafile.seek(pos)   # Seek to a given byte
outfile.seek(-20, 1) # Seek back 20 bytes
#-----------------------------
written = os.write(datafile.fileno(), mystr)
if written != len(mystr):
		warnings.warn("only read %s bytes, not %s" % (written, len(mystr)))
#-----------------------------
pos = os.lseek(myfile.fileno(), 0, 1)       # don't change position
#-----------------------------

 
# ^^PLEAC^^_8.1
def ContReader(infile):
		lines = []
		for line in infile:
				line = line.rstrip()
				if line.endswith("\\"):
						lines.append(line[:-1])
						continue
				lines.append(line)
				yield "".join(lines)
				lines = []
		if lines:
				yield "".join(lines)

for line in ContReader(datafile):
		pass # process full record in 'line' here

# ^^PLEAC^^_8.2
import os
count = int(os.popen("wc -l < " + filename).read())
#-----------------------------
for count, line in enumerate(open(filename)):
		pass
count += 1  # indexing is zero based
#-----------------------------
myfile = open(filename)
count = 0
for line in myfile:
		count += 1
# 'count' now holds the number of lines read
#-----------------------------
myfile = open(filename)
count = 0
while True:
		line = myfile.readline()
		if not line:
				break
		count += 1
#-----------------------------
count = 0
while True:
		s = myfile.read(2**16)
		count += s.count("\n")
#-----------------------------
for line, count in zip(open(filename), xrange(1, sys.maxint)):
		pass
# 'count' now holds the number of lines read
#-----------------------------
import fileinput
fi = fileinput.FileInput(filename)
while fi.readline(): pass

count = fi.lineno()
#-----------------------------
def SepReader(infile, sep = "\n\n"):
		text = infile.read(10000)
		if not text:
				return
		while True:
				fields = text.split(sep)
				for field in fields[:-1]:
						yield field
				text = fields[-1]
				new_text = infile.read(10000)
				if not new_text:
						yield text
						break
				text += new_text

para_count = 0
for para in SepReader(open(filename)):
		para_count += 1
# FIXME: For my test case (Python-pre2.2 README from CVS) this
# returns 175 paragraphs while Perl returns 174.
#-----------------------------

 
# ^^PLEAC^^_8.3
for line in sys.stdin:
		for word in line.split():
				pass # do something with 'chunk'
#-----------------------------
pat = re.compile(r"(\w[\w'-]*)")
for line in sys.stdin:
		pos = 0
		while True:
				match = pat.search(line, pos)
				if not match:
						break
				pos = match.end(1)
				# do something with match.group(1)

# EXPERIMENTAL in the sre implementation but
# likely to be included in future (post-2.2) releases.
pat = re.compile(r"(\w[\w'-]*)")
for line in sys.stdin:
		scanner = pat.scanner(line)
		while True:
				match = scanner.search()
				if not match:
						break
				# do something with match.group(1)


#-----------------------------
# Make a word frequency count
import fileinput, re
pat = re.compile(r"(\w[\w'-]*)")
seen = {}
for line in fileinput.input():
		pos = 0
		while True:
				match = pat.search(line, pos)
				if not match:
						break
				pos = match.end(1)
				text = match.group(1).lower()
				seen[text] = seen.get(text, 0) + 1

# output dict in a descending numeric sort of its values
for text, count in sorted(seen.items, key=lambda item: item[1]):
		print "%5d %s" % (count, text)

#-----------------------------
# Line frequency count
import fileinput, sys
seen = {}
for line in fileinput.input():
		text = line.lower()
		seen[text] = seen.get(text, 0) + 1

for text, count in sorted(seen.items, key=lambda item: item[1]):
		sys.stdout.write("%5d %s" % (count, text))

#-----------------------------

 
# ^^PLEAC^^_8.4
lines = myfile.readlines()
while lines:
		line = lines.pop()
		# do something with 'line'

#-----------------------------
for line in reversed(myfile):
		pass  # do something with line
#-----------------------------
for i in range(len(lines)):
		line = lines[-i]
#-----------------------------
for paragraph in sorted(SepReader(infile)):
		pass # do something
#-----------------------------

 

# ^^PLEAC^^_8.5
import time
while True:
		for line in infile:
				pass # do something with the line
		time.sleep(SOMETIME)
		infile.seek(0, 1)
#-----------------------------
import time
naptime = 1

logfile = open("/tmp/logfile")
while True:
		for line in logfile:
				print line.rstrip()
		time.sleep(naptime)
		infile.seek(0, 1)
#-----------------------------
while True:
		curpos = logfile.tell()
		while True:
				line = logfile.readline()
				if not line:
						break
				curpos = logfile.tell()
		sleep(naptime)
		logfile.seek(curpos, 0)  # seek to where we had been
#-----------------------------
import os
if os.stat(LOGFILENAME).st_nlink == 0:
		raise SystemExit
#-----------------------------

 
# ^^PLEAC^^_8.6
import random, fileinput
text = None
for line in fileinput.input():
		if random.randrange(fileinput.lineno()) == 0:
				text = line
# 'text' is the random line
#-----------------------------
# XXX is the perl code correct?  Where is the fortunes file opened?
import sys
adage = None
for i, rec in enumerate(SepReader(open("/usr/share/games/fortunes"), "%\n")):
		if random.randrange(i+1) == 0:
				adage = rec
print adage
#-----------------------------

 
# ^^PLEAC^^_8.7
import random
lines = data.readlines()
random.shuffle(lines)
for line in lines:
		print line.rstrip()
#-----------------------------

 

# ^^PLEAC^^_8.8
# using efficient caching system
import linecache
linecache.getline(filename, DESIRED_LINE_NUMBER)

# or doing it more oldskool
lineno = 0
while True:
		line = infile.readline()
		if not line or lineno == DESIRED_LINE_NUMBER:
				break
		lineno += 1
#-----------------------------
lines = infile.readlines()
line = lines[DESIRED_LINE_NUMBER]
#-----------------------------
for i in range(DESIRED_LINE_NUMBER):
		line = infile.readline()
		if not line:
				break
#-----------------------------

## Not sure what this thing is doing.  Allow fast access to a given
## line number?

# usage: build_index(*DATA_HANDLE, *INDEX_HANDLE)

# ^^PLEAC^^_8.9
# given $RECORD with field separated by PATTERN,
# extract @FIELDS.
fields = re.split(pattern_string, text)
#-----------------------------
pat = re.compile(pattern_string)
fields = pat.split(text)
#-----------------------------
re.split(r"([+-])", "3+5-2")
#-----------------------------
[3, '+', 5, '-', 2]
#-----------------------------
fields = record.split(":")
#-----------------------------
fields = re.split(r":", record)
#-----------------------------
fields = re.split(r"\s+", record)
#-----------------------------
fields = record.split(" ")
#-----------------------------

 
# ^^PLEAC^^_8.10
myfile = open(filename, "r")
prev_pos = pos = 0
while True:
		line = myfile.readline()
		if not line:
				break
		prev_pos = pos
		pos = myfile.tell()
myfile = open(filename, "a")
myfile.truncate(prev_pos)
#-----------------------------

 

# ^^PLEAC^^_8.11
open(filename, "rb")
open(filename, "wb")
#-----------------------------
gifname = "picture.gif"
gif_file = open(gifname, "rb")

# Don't think there's an equivalent for these in Python
#binmode(GIF);               # now DOS won't mangle binary input from GIF
#binmode(STDOUT);            # now DOS won't mangle binary output to STDOUT

#-----------------------------
while True:
		buff = gif.read(8 * 2**10)
		if not buff:
				break
		sys.stdout.write(buff)
#-----------------------------

 

# ^^PLEAC^^_8.12
address = recsize * recno
myfile.seek(address, 0)
buffer = myfile.read(recsize)
#-----------------------------
address = recsize * (recno-1)
#-----------------------------

 

# ^^PLEAC^^_8.13
import posixfile
address = recsize * recno
myfile.seek(address)
buffer = myfile.read(recsize)
# ... work with the buffer, then turn it back into a string and ...
myfile.seek(-recsize, posixfile.SEEK_CUR)
myfile.write(buffer)
myfile.close()
#-----------------------------
## Not yet implemented
# weekearly -- set someone's login date back a week
# @@INCOMPLETE@@


# ^^PLEAC^^_8.14
## Note: this isn't optimal -- the 's+=c' may go O(N**2) so don't
## use for large strings.
myfile.seek(addr)
s = ""
while True:
		c = myfile.read(1)
		if not c or c == "\0":
				break
		s += c
#-----------------------------
myfile.seek(addr)
offset = 0
while True:
		s = myfile.read(1000)
		x = s.find("\0")
		if x != -1:
				offset += x
				break
		offset += len(s)
		if len(s) != 1000:  # EOF
				break
myfile.seek(addr)
s = myfile.read(offset - 1)
myfile.read(1)

#-----------------------------
## Not Implemented
# bgets - get a string from an address in a binary file
#-----------------------------
#!/usr/bin/perl
# strings - pull strings out of a binary file
import re, sys

## Assumes SepReader from above

pat = re.compile(r"([\040-\176\s]{4,})")
for block in SepReader(sys.stdin, "\0"):
		pos = 0
		while True:
				match = pat.search(block, pos)
				if not match:
						break
				print match.group(1)
				pos = match.end(1)
#-----------------------------
 

# @@PLEAC@@_8.15

# RECORDSIZE is the length of a record, in bytes.
# TEMPLATE is the unpack template for the record
# FILE is the file to read from
# FIELDS is a tuple, one element per field
import struct
RECORDSIZE= struct.calcsize(TEMPLATE)
while True:
		record = FILE.read(RECORDSIZE):
		if len(record)!=RECORDSIZE:
				raise "short read"
		FIELDS = struct.unpack(TEMPLATE, record)
# ----


# ^^PLEAC^^_8.16
# NOTE: to parse INI file, see the stanard ConfigParser module.
import re
pat = re.compile(r"\s*=\s*")
for line in config_file:
		if "#" in line:         # no comments
				line = line[:line.index("#")]
		line = line.strip()     # no leading or trailing white
		if not line:            # anything left?
				continue
		m = pat.search(line)
		var = line[:m.start()]
		value = line[m.end():]
		User_Preferences[var] = value


# ^^PLEAC^^_8.17
import os

mode, ino, dev, nlink, uid, gid, size, \
atime, mtime, ctime = os.stat(filename)

mode &= 07777               # discard file type info

#-----------------------------
info = os.stat(filename)
if info.st_uid == 0:
		print "Superuser owns", filename
if info.st_atime > info.st_mtime:
		print filename, "has been read since it was written."
#-----------------------------
import os
def is_safe(path):
		info = os.stat(path)

		# owner neither superuser nor me 
		# the real uid is in stored in the $< variable
		if info.st_uid not in (0, os.getuid()):
				return False

		# check whether group or other can write file.
		# use 066 to detect either reading or writing
		if info.st_mode & 022:  # someone else can write this
				if not os.path.isdir(path):  # non-directories aren't safe
						return False
				# but directories with the sticky bit (01000) are
				if not (info.st_mode & 01000):
						return False
		return True
#-----------------------------
## XXX What is '_PC_CHOWN_RESTRICTED'?

def is_verysafe(path):
		terms = []
		while True:
				path, ending = os.path.split(path)
				if not ending:
						break
				terms.insert(0, ending)
		for term in terms:
				path = os.path.join(path, term)
				if not is_safe(path):
						return False
		return True
#-----------------------------

# Program: tctee
# Not Implemented (requires reimplementing Perl's builtin '>>', '|',
# etc. semantics)

# @@PLEAC@@_8.18
#!/usr/bin/python
# tailwtmp - watch for logins and logouts;
# uses linux utmp structure, from /usr/include/bits/utmp.h

# /* The structure describing an entry in the user accounting database.  */
# struct utmp
# {
#   short int ut_type;            /* Type of login.  */
#   pid_t ut_pid;                 /* Process ID of login process.  */
#   char ut_line[UT_LINESIZE];    /* Devicename.  */
#   char ut_id[4];                /* Inittab ID.  */
#   char ut_user[UT_NAMESIZE];    /* Username.  */
#   char ut_host[UT_HOSTSIZE];    /* Hostname for remote login.  */
#   struct exit_status ut_exit;   /* Exit status of a process marked
#                                    as DEAD_PROCESS.  */
#   long int ut_session;          /* Session ID, used for windowing.  */
#   struct timeval ut_tv;         /* Time entry was made.  */
#   int32_t ut_addr_v6[4];        /* Internet address of remote host.  */
#   char __unused[20];            /* Reserved for future use.  */
# };

# /* Values for the `ut_type' field of a `struct utmp'.  */
# #define EMPTY       0   /* No valid user accounting information.  */
# 
# #define RUN_LVL     1   /* The system's runlevel.  */
# #define BOOT_TIME   2   /* Time of system boot.  */
# #define NEW_TIME    3   /* Time after system clock changed.  */
# #define OLD_TIME    4   /* Time when system clock changed.  */
# 
# #define INIT_PROCESS    5   /* Process spawned by the init process.  */
# #define LOGIN_PROCESS   6   /* Session leader of a logged in user.  */
# #define USER_PROCESS    7   /* Normal process.  */
# #define DEAD_PROCESS    8   /* Terminated process.  */
# 
# #define ACCOUNTING  9

import time
import struct
import os

class WTmpRecord:
		fmt = "hI32s4s32s256siili4l20s";
		_fieldnames = ["type","PID","Line","inittab","User","Hostname",
										"exit_status", "session", "time", "addr" ]
		def __init__(self):
				self._rec_size = struct.calcsize(self.fmt)
		def size(self):
				return self._rec_size
		def unpack(self, bin_data):
				rec = struct.unpack(self.fmt, bin_data)
				self._rec = []
				for i in range(len(rec)):
						if i in (2,3,4,5):
								# remove character zeros from strings
								self._rec.append( rec[i].split("\0")[0] )
						else:
								self._rec.append(rec[i])
				return self._rec
		def fieldnames(self):
				return self._fieldnames
		def __getattr__(self,name):
				return self._rec[self._fieldnames.index(name)]
				
rec = WTmpRecord()
f = open("/var/log/wtmp","rb")
f.seek(0,2)
while True:
		while True:
				bin = f.read(rec.size())
				if len(bin) != rec.size():
						break
				rec.unpack(bin)
				if rec.type != 0:
						print " %1d %-8s %-12s %-24s %-20s %5d %08x" % \
								(rec.type, rec.User, rec.Line, 
								 time.strftime("%a %Y-%m-%d %H:%M:%S",time.localtime(rec.time)),
								 rec.Hostname, rec.PID, rec.addr)
		time.sleep(1)
f.close()

# @@PLEAC@@_8.19
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_8.20
#!/usr/bin/python
# laston - find out when given user last logged on
import sys
import struct
import pwd
import time
import re

f = open("/var/log/lastlog","rb")

fmt = "L32s256s"
rec_size = struct.calcsize(fmt)

for user in sys.argv[1:]:
		if re.match(r"^\d+$", user):
				user_id = int(user)
		else:
				try:
						user_id = pwd.getpwnam(user)[2]
				except:
						print "no such uid %s" % (user)
						continue
		f.seek(rec_size * user_id)
		bin = f.read(rec_size)
		if len(bin) == rec_size:
				data = struct.unpack(fmt, bin)
				if data[0]:
						logged_in = "at %s" % (time.strftime("%a %H:%M:%S %Y-%m-%d",
																		time.localtime(data[0])))
						line = " on %s" % (data[1])
						host = " from %s" % (data[2])
				else:
						logged_in = "never logged in"
						line = ""
						host = ""
				print "%-8s UID %5d %s%s%s" % (user, user_id, logged_in, line, host)
		else:
				print "Read failed."
f.close()


# ^^PLEAC^^_9.0
#-----------------------------
entry = os.stat("/usr/bin/vi")
#-----------------------------
entry = os.stat("/usr/bin")
#-----------------------------
entry = os.stat(INFILE.name)
#-----------------------------
entry = os.stat("/usr/bin/vi")
ctime = entry.st_ino
size = entry.st_size
#-----------------------------
f = open(filename)

f.seek(0, 2)
if not f.tell():
		raise SystemExit("%s doesn't have text in it."%filename)
#-----------------------------

for filename in os.listdir("/usr/bin"):
		print "Inside /usr/bin is something called", filename
#-----------------------------

# ^^PLEAC^^_9.1
#-----------------------------
fstat = os.stat(filename)
readtime = fstat.st_atime
writetime = fstat.st_mtime

os.utime(filename, (newreadtime, newwritetime))

#DON'T DO THIS:
readtime, writetime = os.stat(filename)[7:9]
#-----------------------------
SECONDS_PER_DAY = 60 * 60 * 24
fstat = os.stat(filename)
atime = fstat.st_atime - 7 * SECONDS_PER_DAY
mtime = fstat.st_mtime - 7 * SECONDS_PER_DAY

os.utime(filename, (atime, mtime))     
#-----------------------------
mtime = os.stat(filename).st_mtime
utime(filename, (time.time(), mtime))
#-----------------------------
#!/usr/bin/perl -w
# uvi - vi a file without changing its access times

import sys, os
if len(sys.argv) != 2:
		raise SystemExit("usage: uvi filename")
filename = argv[1]
fstat = os.stat(filename)
# WARNING: potential security risk
os.system( (os.environ.get("EDITOR") or "vi") + " " + filename)
os.utime(filename, (fstat.st_atime, fstat.st_mtime))
#-----------------------------

# ^^PLEAC^^_9.2
#-----------------------------
os.remove(filename)

err_flg = 0
for filename in filenames:
		try:
				os.remove(filename)
		except OSError, err:
				err_flg = 1
if err_flg:
		raise OSError("Couldn't remove all of %s: %s" % (filenames, err))
#-----------------------------
os.remove(filename)
#-----------------------------
success = 0
for filename in filenames:
		try:
				os.remove(filename)
				success += 1
		except OSError, err:
				pass
if success != len(filenames):
		sys.stderr.write("could only delete %d of %d files" % \
										 (success, len(filenames)))

#-----------------------------

# ^^PLEAC^^_9.3
#-----------------------------
import shutil
shutil.copy(oldfile, newfile)
#-----------------------------
## NOTE: this doesn't do the same thing as the Perl code,
## eg, handling of partial writes.
infile = open(oldfile)
outfile = open(newfile, "w")

blksize = 16384          # preferred block size?

while True:
		buf = infile.read(blksize)
		if not buf:
				break
		outfile.write(buf)

infile.close()
outfile.close()
#-----------------------------
# WARNING: these are insecure - do not use in hostile environments
os.system("cp %s %s" % (oldfile, newfile))       # unix
os.system("copy %s %s" % (oldfile, newfile))     # dos, vms
#-----------------------------
import shutil

shutil.copy("datafile.dat", "datafile.bak")

shutil.copy("datafile.new", "datafile.dat")
os.remove("datafile.new")

#-----------------------------

# ^^PLEAC^^_9.4
#-----------------------------
import os
seen = {}

def do_my_thing(filename):
		fstat = os.stat(filename)
		key = (fstat.st_ino, fstat.st_dev)
		if not seen.get(key):
				# do something with filename because we haven't
				# seen it before
				pass
		seen[key] = seen.get(key, 0 ) + 1

#-----------------------------
for filename in files:
		fstat = os.stat(filename)
		key = (fstat.st_ino, fstat.st_dev)
		seen.setdefault(key, []).append(filename)

keys = seen.keys()
keys.sort()
for inodev in keys:
		ino, dev = inodev
		filenames = seen[inodev]
		if len(filenames) > 1:
				# 'filenames' is a list of filenames for the same file
				pass
#-----------------------------

# ^^PLEAC^^_9.5
#-----------------------------
for filename in os.listdir(dirname):
		# do something with "$dirname/$file"
		pass
#-----------------------------
# XXX No -T equivalent in Python
#-----------------------------
# 'readir' always skipes '.' and '..' on OSes where those are
# standard directory names
for filename in os.listdir(dirname):
		pass
#-----------------------------
# XX Not Implemented -- need to know what DirHandle does
# use DirHandle;

#-----------------------------

# ^^PLEAC^^_9.6
#-----------------------------
import glob
filenames = glob.glob("*.c")
#-----------------------------
filenames = [filename for filename in os.listdir(path) if filename.endswith(".c")] 
#-----------------------------
import re
allowed_name = re.compile(r"\.[ch]$", re.I).search
filenames = [f for f in os.listdir(path) if allowed_name(f)]
#-----------------------------
import re, os
allowed_name = re.compile(r"\.[ch]$", re.I).search

fnames = [os.path.join(dirname, fname) 
							for fname in os.listdir(dirname)
							if allowed_name(fname)]
#-----------------------------
dirs = [os.path.join(path, f)
						for f in os.listdir(path) if f.isdigit()]
dirs = [d for d in dirs if os.path.isdir(d)]
dirs = sorted(dirs, key=int)    # Sort by numeric value - "9" before "11"
#-----------------------------

# @@PLEAC@@_9.7
# Processing All Files in a Directory Recursively

# os.walk is new in 2.3.

# For pre-2.3 code, there is os.path.walk, which is
# little harder to use.

#-----------------------------
import os
for root, dirs, files in os.walk(top):
		pass # do whatever

#-----------------------------
import os, os.path
for root, dirs, files in os.walk(top):
		for name in dirs:
				print os.path.join(root, name) + '/'
		for name in files:
				print os.path.join(root, name)

#-----------------------------
import os, os.path
numbytes = 0
for root, dirs, files in os.walk(top):
		for name in files:
				path = os.path.join(root, name)
				numbytes += os.path.getsize(path)
print "%s contains %s bytes" % (top, numbytes)

#-----------------------------
import os, os.path
saved_size, saved_name = -1, ''
for root, dirs, files in os.walk(top):
		for name in files:
				path = os.path.join(root, name)
				size = os.path.getsize(path)
				if size > saved_size:
						saved_size = size
						saved_name = path
print "Biggest file %s in %s is %s bytes long" % (
		saved_name, top, saved_size)

#-----------------------------
import os, os.path, time
saved_age, saved_name = None, ''
for root, dirs, files in os.walk(top):
		for name in files:
				path = os.path.join(root, name)
				age = os.path.getmtime(path)
				if saved_age is None or age > saved_age:
						saved_age = age
						saved_name = path
print "%s %s" % (saved_name, time.ctime(saved_age))

#-----------------------------
#!/usr/bin/env python
# fdirs - find all directories
import sys, os, os.path
argv = sys.argv[1:] or ['.']
for top in argv:
		for root, dirs, files in os.walk(top):
				for name in dirs:
						path = os.path.join(root, name)
						print path


# ^^PLEAC^^_9.8
#-----------------------------
# DeleteDir - remove whole directory trees like rm -r
import shutil
shutil.rmtree(path)

# DON'T DO THIS:
import os, sys
def DeleteDir(dir):
		for name in os.listdir(dir):
				file = os.path.join(dir, name)
				if not os.path.islink(file) and os.path.isdir(file):
						DeleteDir(file)
				else:
						os.remove(file)
		os.rmdir(dir)

# @@PLEAC@@_9.9
# Renaming Files

# code sample one to one from my perlcookbook
# looks strange to me.
import os
for fname in fnames:
		newname = fname
		# change the file's name
		try:
				os.rename(fname, newname)
		except OSError, err:
				print "Couldn't rename %s to %s: %s!" % \
								(fname, newfile, err)

# use os.renames if newname needs directory creation.

#A vaguely Pythonic solution is:
import glob
def rename(files, transfunc)
		for fname in fnames:
				newname = transfunc(fname)
				try:
						os.rename(fname, newname)
				except OSError, err:
						print "Couldn't rename %s to %s: %s!" % \
									(fname, newfile, err)

def transfunc(fname): 
		return fname[:-5]
rename(glob.glob("*.orig"), transfunc) 

def transfunc(fname): 
		return fname.lower()
rename([f for f in glob.glob("*") if not f.startswith("Make)], transfunc) 

def transfunc(fname): 
		return fname + ".bad"
rename(glob.glob("*.f"), transfunc) 

def transfunc(fname): 
		answer = raw_input(fname + ": ")
		if answer.upper().startswith("Y"):
				return fname.replace("foo", "bar")
rename(glob.glob("*"), transfunc) 

def transfunc(fname):
		return ".#" + fname[:-1]
rename(glob.glob("/tmp/*~"), transfunc) 

# This _could_ be made to eval code taken directly from the command line, 
# but it would be fragile
#-----------------------------

# ^^PLEAC^^_9.10
#-----------------------------
import os

base = os.path.basename(path)
dirname = os.path.dirname(path)
dirname, filename = os.path.split(path)
base, ext = os.path.splitext(filename)

#-----------------------------
path = '/usr/lib/libc.a'
filename = os.path.basename(path)
dirname = os.path.dirname(path)

print "dir is %s, file is %s" % (dirname, filename)
# dir is /usr/lib, file is libc.a
#-----------------------------
path = '/usr/lib/libc.a'
dirname, filename = os.path.split(path)
name, ext = os.path.splitext(filename)

print "dir is %s, name is %s, extension is %s" % (dirname, name, ext)
#   NOTE: The Python code prints
# dir is /usr/lib, name is libc, extension is .a
#   while the Perl code prints a '/' after the directory name
# dir is /usr/lib/, name is libc, extension is .a
#-----------------------------
import macpath
path = "Hard%20Drive:System%20Folder:README.txt"
dirname, base = macpath.split(path)
name, ext = macpath.splitext(base)

print "dir is %s, name is %s, extension is %s" % (dirname, name, ext)
# dir is Hard%20Drive:System%20Folder, name is README, extension is .txt
#-----------------------------
# DON'T DO THIS - it's not portable.
def extension(path):
		pos = path.find(".")
		if pos == -1:
				return ""
		ext = path[pos+1:]
		if "/" in ext:
				# wasn't passed a basename -- this is of the form 'x.y/z'
				return ""
		return ext
#-----------------------------

# @@PLEAC@@_9.11

#!/usr/bin/python
# sysmirror - build spectral forest of symlinks
import sys, os, os.path

pgmname = sys.argv[0]
if len(sys.argv)!=3:
		print "usage: %s realdir mirrordir" % pgmname
		raise SystemExit

(srcdir, dstdir) = sys.argv[1:3]
if not os.path.isdir(srcdir):
		print "%s: %s is not a directory" % (pgmname,srcdir)
		raise SystemExit
if not os.path.isdir(dstdir):
		try:
				os.mkdir(dstdir)
		except OSError:
				print "%s: can't make directory %s" % (pgmname,dstdir)
					raise SystemExit

# fix relative paths
srcdir = os.path.abspath(srcdir)
dstdir = os.path.abspath(dstdir)

def wanted(arg, dirname, names):
		for direntry in names:
				relname = "%s/%s" % (dirname, direntry)
				if os.path.isdir(relname):
						mode = os.stat(relname).st_mode
						try:
								os.mkdir("%s/%s" % (dstdir,relname), mode)
						except:
								print "can't mkdir %s/%s" % (dstdir,relname)
								raise SystemExit
				else:
						if relname[:2] == "./":
								relname = relname[2:]
						os.symlink("%s/%s" % (srcdir, relname), "%s/%s" % (dstdir,relname))

os.chdir(srcdir)
os.path.walk(".",wanted,None)

# @@PLEAC@@_9.12
# @@INCOMPLETE@@
# @@INCOMPLETE@@


# ^^PLEAC^^_10.0
#-----------------------------
# DO NOT DO THIS...
greeted = 0
def hello():
		global greeted
		greeted += 1
		print "hi there"

#... as using a callable object to save state is cleaner
# class hello
#     def __init__(self):
#         self.greeted = 0
#     def __call__(self):
#         self.greeted += 1
#         print "hi there"
# hello = hello()
#-----------------------------
hello()                 # call subroutine hello with no arguments/parameters
#-----------------------------

# ^^PLEAC^^_10.1
#-----------------------------
import math
# Provided for demonstration purposes only.  Use math.hypot() instead.
def hypotenuse(side1, side2):
		return math.sqrt(side1**2 + side2**2)

diag = hypotenuse(3, 4)  # diag is 5.0
#-----------------------------
print hypotenuse(3, 4)               # prints 5.0

a = (3, 4)
print hypotenuse(*a)                 # prints 5.0
#-----------------------------
both = men + women
#-----------------------------
nums = [1.4, 3.5, 6.7]
# Provided for demonstration purposes only.  Use:
#     ints = [int(num) for num in nums] 
def int_all(nums):
		retlist = []            # make new list for return
		for n in nums:
				retlist.append(int(n))
		return retlist
ints = int_all(nums)        # nums unchanged
#-----------------------------
nums = [1.4, 3.5, 6.7]

def trunc_em(nums):
		for i,elem in enumerate(nums):
				nums[i] = int(elem)
trunc_em(nums)               # nums now [1,3,6]

#-----------------------------
# By convention, if a method (or function) modifies an object
# in-place, it returns None rather than the modified object.
# None of Python's built-in functions modify in-place; methods
# such as list.sort() are somewhat more common.
mylist = [3,2,1]
mylist = mylist.sort()   # incorrect - returns None
mylist = sorted(mylist)  # correct - returns sorted copy
mylist.sort()            # correct - sorts in-place
#-----------------------------

# ^^PLEAC^^_10.2
#-----------------------------
# Using global variables is discouraged - by default variables
# are visible only at and below the scope at which they are declared.
# Global variables modified by a function or method must be declared 
# using the "global" keyword if they are modified
def somefunc():
		variable = something  # variable is invisible outside of somefunc
#-----------------------------
import sys
name, age = sys.args[1:]  # assumes two and only two command line parameters
start = fetch_time()
#-----------------------------
a, b = pair
c = fetch_time()

def check_x(x):
		y = "whatever"
		run_check()
		if condition:
				print "got", x
#-----------------------------
def save_list(*args):
		Global_List.extend(args)
#-----------------------------

# ^^PLEAC^^_10.3
#-----------------------------
## Python allows static nesting of scopes for reading but not writing,
## preferring to use objects.  The closest equivalent to:
#{
#    my $counter;
#    sub next_counter { return ++$counter }
#}
## is:
def next_counter(counter=[0]):  # default lists are created once only.
		counter[0] += 1
		return counter[0]

# As that's a little tricksy (and can't make more than one counter),
# many Pythonistas would prefer either:
def make_counter():
		counter = 0
		while True:
				counter += 1
				yield counter
next_counter = make_counter().next

# Or:
class Counter:
		def __init__(self):
				self.counter = 0
		def __call__(self):
				self.counter += 1
				return self.counter
next_counter = Counter()

#-----------------------------
## A close equivalent of
#BEGIN {
#    my $counter = 42;
#    sub next_counter { return ++$counter }
#    sub prev_counter { return --$counter }
#}
## is to use a list (to save the counter) and closured functions:
def make_counter(start=0):
		counter = [start]
		def next_counter():
				counter[0] += 1
				return counter[0]
		def prev_counter():
				counter[0] -= 1
				return counter[0]
		return next_counter, prev_counter
next_counter, prev_counter = make_counter()

## A clearer way uses a class:
class Counter:
		def __init__(self, start=0):
				self.value = start
		def next(self):
				self.value += 1
				return self.value
		def prev(self):
				self.value -= 1
				return self.value
		def __int__(self):
				return self.value

counter = Counter(42)
next_counter = counter.next
prev_counter = counter.prev
#-----------------------------

# ^^PLEAC^^_10.4
## This sort of code inspection is liable to change as
## Python evolves.  There may be cleaner ways to do this.
## This also may not work for code called from functions
## written in C.
#-----------------------------
import sys
this_function = sys._getframe(0).f_code.co_name
#-----------------------------
i = 0 # how far up the call stack to look
module = sys._getframe(i).f_globals["__name__"]
filename = sys._getframe(i).f_code.co_filename
line = sys._getframe(i).f_lineno
subr = sys._getframe(i).f_code.co_name
has_args = bool(sys._getframe(i+1).f_code.co_argcount)

# 'wantarray' is Perl specific

#-----------------------------
me = whoami()
him = whowasi()

def whoami():
		sys._getframe(1).f_code.co_name
def whowasi():
		sys._getframe(2).f_code.co_name
#-----------------------------

# ^^PLEAC^^_10.5
#-----------------------------
# Every variable name is a reference to an object, thus nothing special
# needs to be done to pass a list or a dict as a parameter.
list_diff(list1, list2)
#-----------------------------
# Note: if one parameter to zip() is longer it will be truncated
def add_vecpair(x, y):
		return [x1+y1 for x1, y1 in zip(x, y)]

a = [1, 2]
b = [5, 8]
print " ".join([str(n) for n in add_vecpair(a, b)])
#=> 6 10
#-----------------------------
# DO NOT DO THIS:
assert isinstance(x, type([])) and isinstance(y, type([])), \
		"usage: add_vecpair(list1, list2)"
#-----------------------------

# ^^PLEAC^^_10.6
#-----------------------------
# perl return context is not something standard in python...
# but still you can achieve something alike if you really need it
# (but you must really need it badly since you should never use this!!)
#
# see http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/284742 for more
#
# NB: it has been tested under Python 2.3.x and no guarantees can be given
#     that it works under any future Python version.
import inspect,dis

def expecting():
		"""Return how many values the caller is expecting"""
		f = inspect.currentframe().f_back.f_back
		bytecode = f.f_code.co_code
		i = f.f_lasti
		instruction = ord(bytecode[i+3])
		if instruction == dis.opmap['UNPACK_SEQUENCE']:
				howmany = ord(bytecode[i+4])
				return howmany
		elif instruction == dis.opmap['POP_TOP']:
				return 0
		return 1

def cleverfunc():
		howmany = expecting()
		if howmany == 0:
				print "return value discarded"
		if howmany == 2:
				return 1,2
		elif howmany == 3:
				return 1,2,3
		return 1

cleverfunc()
x = cleverfunc()
print x
x,y = cleverfunc()
print x,y
x,y,z = cleverfunc()
print x,y,z

# ^^PLEAC^^_10.7
#-----------------------------
thefunc(increment= "20s", start="+5m", finish="+30m")
thefunc(start= "+5m",finish="+30m")
thefunc(finish= "+30m")
thefunc(start="+5m", increment="15s")
#-----------------------------
def thefunc(increment='10s',
						finish='0',
						start='0'):
		if increment.endswith("m"):
				pass
#-----------------------------

# ^^PLEAC^^_10.8
#-----------------------------
a, _, c = func()       # Use _ as a placeholder...
a, ignore, c = func()  # ...or assign to an otherwise unused variable
#-----------------------------

# ^^PLEAC^^_10.9
#-----------------------------
def somefunc():
		mylist = []
		mydict = {}
		# ...
		return mylist, mydict

mylist, mydict = somefunc()
#-----------------------------
def fn():
		return a, b, c

#-----------------------------
h0, h1, h2 = fn()
tuple_of_dicts = fn()   # eg: tuple_of_dicts[2]["keystring"]
r0, r1, r2 = fn()       # eg: r2["keystring"]

#-----------------------------

# ^^PLEAC^^_10.10
#-----------------------------
# Note: Exceptions are almost always preferred to error values
return
#-----------------------------
def empty_retval():
		return None

def empty_retval():
		return          # identical to return None

def empty_retval():
		pass            # None returned by default (empty func needs pass)
#-----------------------------
a = yourfunc()
if a:
		pass
#-----------------------------
a = sfunc()
if not a:
		raise AssertionError("sfunc failed")

assert sfunc(), "sfunc failed"
#-----------------------------

# ^^PLEAC^^_10.11
# Prototypes are inapplicable to Python as Python disallows calling
# functions without using brackets, and user functions are able to
# mimic built-in functions with no special actions required as they
# only flatten lists (and convert dicts to named arguments) if
# explicitly told to do so.  Python functions use named parameters
# rather than shifting arguments:

def myfunc(a, b, c=4):
	 print a, b, c

mylist = [1,2]

mydict1 = {"b": 2, "c": 3}
mydict2 = {"b": 2}

myfunc(1,2,3)
#=> 1 2 3

myfunc(1,2)
#=> 1 2 4

myfunc(*mylist)
#=> 1 2 4

myfunc(5, *mylist)
#=> 5, 1, 2

myfunc(5, **mydict1)
#=> 5, 2, 3

myfunc(5, **mydict2)
#=> 5, 2, 4

myfunc(c=3, b=2, a=1)
#=> 1, 2, 3

myfunc(b=2, a=1)
#=> 1, 2, 4

myfunc(mylist, mydict1)
#=> [1, 2] {'c': 3, 'b': 2} 4

# For demonstration purposes only - don't do this
def mypush(mylist, *vals):
	 mylist.extend(vals)

mylist = []
mypush(mylist, 1, 2, 3, 4, 5)
print mylist
#=> [1, 2, 3, 4, 5]

# ^^PLEAC^^_10.12
#-----------------------------
raise ValueError("some message")  # specific exception class
raise Exception("use me rarely")  # general exception
raise "don't use me"              # string exception (deprecated)
#-----------------------------
# Note that bare excepts are considered bad style.  Normally you should
# trap specific exceptions.  For instance these bare excepts will
# catch KeyboardInterrupt, SystemExit, and MemoryError as well as
# more common errors.  In addition they force you to import sys to
# get the error message.
import warnings, sys
try:
		func()
except:
		warnings.warn("func raised an exception: " + str(sys.exc_info()[1]))
#-----------------------------
try:
		func()
except:
		warnings.warn("func blew up: " + str(sys.exc_info()[1]))
#-----------------------------
class MoonPhaseError(Exception):
		def __init__(self, phase):
				self.phase = phase
class FullMoonError(MoonPhaseError):
		def __init__(self):
				MoonPhaseError.__init__("full moon")

def func():
		raise FullMoonError()

# Ignore only FullMoonError exceptions
try:
		func()
except FullMoonError:
		pass
#-----------------------------
# Ignore only MoonPhaseError for a full moon
try:
		func()
except MoonPhaseError, err:
		if err.phase != "full moon":
				raise
#-----------------------------

# ^^PLEAC^^_10.13
# There is no direct equivalent to 'local' in Python, and
# it's impossible to write your own.  But then again, even in
# Perl it's considered poor style.

# DON'T DO THIS (You probably shouldn't use global variables anyway):
class Local(object):
		def __init__(self, globalname, val):
				self.globalname = globalname
				self.globalval = globals()[globalname]
				globals()[globalname] = val
				
		def __del__(self):
				globals()[self.globalname] = self.globalval

foo = 4

def blah():
		print foo

def blech():
		temp = Local("foo", 6)
		blah()

blah()
blech()
blah()

#-----------------------------

# ^^PLEAC^^_10.14
#-----------------------------
grow = expand
grow()                     # calls expand()

#-----------------------------
one.var = two.table   # make one.var the same as two.table
one.big = two.small   # make one.big the same as two.small
#-----------------------------
fred = barney     # alias fred to barney
#-----------------------------
s = red("careful here")
print s
#> <FONT COLOR='red'>careful here</FONT>
#-----------------------------
# Note: the 'text' should be HTML escaped if it can contain
# any of the characters '<', '>' or '&'
def red(text):
		return "<FONT COLOR='red'>" + text + "</FONT>"
#-----------------------------
def color_font(color, text):
		return "<FONT COLOR='%s'>%s</FONT>" % (color, text)

def red(text): return color_font("red", text)
def green(text): return color_font("green", text)
def blue(text): return color_font("blue", text)
def purple(text): return color_font("purple", text)
# etc
#-----------------------------
# This is done in Python by making an object, instead of
# saving state in a local anonymous context.
class ColorFont:
		def __init__(self, color):
				self.color = color
		def __call__(self, text):
				return "<FONT COLOR='%s'>%s</FONT>" % (self.color, text)

colors = "red blue green yellow orange purple violet".split(" ")
for name in colors:
		globals()[name] = ColorFont(name)
#-----------------------------
# If you really don't want to make a new class, you can
# fake it somewhat by passing in default args.
colors = "red blue green yellow orange purple violet".split(" ")
for name in colors:
		def temp(text, color = name):
				return "<FONT COLOR='%s'>%s</FONT>" % (color, text)
		globals()[name] = temp

#-----------------------------

# ^^PLEAC^^_10.15

# Python has the ability to derive from ModuleType and add
# new __getattr__ and __setattr__ methods.  I don't know the
# expected way to use them to emulate Perl's AUTOLOAD.  Instead,
# here's how something similar would be done in Python.  This
# uses the ColorFont defined above.

#-----------------------------
class AnyColor:
		def __getattr__(self, name):
				return ColorFont(name)

colors = AnyColor()

print colors.chartreuse("stuff")

#-----------------------------
## Skipping this translation because 'local' is too Perl
## specific, and there isn't enough context to figure out
## what this is supposed to do.
#{
#    local *yellow = \&violet;
#    local (*red, *green) = (\&green, \&red);
#    print_stuff();
#}
#-----------------------------

# ^^PLEAC^^_10.16
#-----------------------------
def outer(arg1):
		x = arg1 + 35
		def inner():
				return x * 19
		return x + inner()
#-----------------------------

# ^^PLEAC^^_10.17
#-----------------------------
import mailbox, sys
mbox = mailbox.PortableUnixMailbox(sys.stdin)

def extract_data(msg, idx):
		subject = msg.getheader("Subject", "").strip()
		if subject[:3].lower() == "re:":
				subject = subject[3:].lstrip()
		text = msg.fp.read()
		return subject, idx, msg, text
messages = [extract_data(idx, msg) for idx, msg in enumerate(mbox)]

#-----------------------------
# Sorts by subject then by original position in the list
for subject, pos, msg, text in sorted(messages):
		print "%s\n%s"%(msg, text)

#-----------------------------
# Sorts by subject then date then original position
def subject_date_position(elem):
		return (elem[0], elem[2].getdate("Date"), elem[1])
messages.sort(key=subject_date_position)

# Pre 2.4:
messages = sorted(messages, key=subject_date_position)
#-----------------------------

# @@PLEAC@@_11.0
#Introduction.
#   In Python, all names are references.
#   All objects are inherently anonymous, they don't know what names refer to them.
print ref   # prints the value that the name ref refers to. 
ref = 3     # assigns the name ref to the value 3.
#-----------------------------
aref = mylist
#-----------------------------
aref = [3, 4, 5]    # aref is a name for this list
href = {"How": "Now", "Brown": "Cow"} # href is a name for this dictionary
#-----------------------------
#   Python doesn't have autovivification as (for simple types) there is no difference between a name and a reference.
#   If we try the equivalent of the Perl code we get the list, not a reference to the list.
#-----------------------------
#   To handle multidimensional arrays, you should use an extension to Python,
#   such as numarray (http://www.stsci.edu/resources/software_hardware/numarray)
#-----------------------------
#   In Python, assignment doesn't return anything. 
#-----------------------------
Nat = { "Name": "Leonhard Euler",
				"Address": "1729 Ramanujan Lane\nMathworld, PI 31416",
				"Birthday": 0x5bb5580
}
#-----------------------------

# @@PLEAC@@_11.1
aref = mylist
anon_list = [1, 3, 5, 7, 9]
anon_copy = anon_list
implicit_creation = [2, 4, 6, 8, 10]
#-----------------------------
anon_list.append(11)
#-----------------------------
two = implicit_creation[0]
#-----------------------------
#  To get the last index of a list, you can use len() 
# [or list.__len__() - but don't] directly
last_idx = len(aref) - 1

# Normally, though, you'd use an index of -1 for the last
# element, -2 for the second last, etc.
print implicit_creation[-1]
#=> 10

num_items = len(aref)
#-----------------------------
last_idx = aref.__len__() - 1
num_items = aref.__len__()
#-----------------------------
if not isinstance(someVar, type([])):
		print "Expected a list"
#-----------------------------
print list_ref
#-----------------------------
#   sort is in place.
list_ref.sort()
#-----------------------------
list_ref.append(item)
#-----------------------------
def list_ref():
		return []

aref1 = list_ref()
aref2 = list_ref()
#   aref1 and aref2 point to different lists.
#-----------------------------
list_ref[N] # refers to the Nth item in the list_ref list.
#-----------------------------
# The following two statements are equivalent and return up to 3 elements
# at indices 3, 4, and 5 (if they exist).
pie[3:6]
pie[3:6:1]
#-----------------------------
#   This will insert 3 elements, overwriting elements at indices 3,4, or 5 - if they exist.
pie[3:6] = ["blackberry", "blueberry", "pumpkin"]
#-----------------------------
for item in pie:
		print item

# DON'T DO THIS (this type of indexing should be done with enumerate)
# xrange does not create a list 0..len(pie) - 1, it creates an object 
# that returns one index at a time.
for idx in xrange(len(pie)):
		print pie[idx]

# @@PLEAC@@_11.2
# Making Hashes of Arrays

hash["KEYNAME"].append("new value")

for mystr in hash.keys():
		print "%s: %s" % (mystr, hash[mystr])

hash["a key"] = [3, 4, 5]

values = hash["a key"]

hash["a key"].append(value)

# autovivification also does not work in python.
residents = phone2name[number]
# do this instead
residents = phone2name.get(number, [])


# @@PLEAC@@_11.3
# Taking References to Hashes

href = hash
anon_hash = { "key1":"value1", "key2" : "value2 ..." }
anon_hash_copy = anon_hash.copy()

hash = href
value = href[key]
slice = [href[k] for k in (key1, key2, key3)]
keys = hash.keys()

import types
if type(someref) != types.DictType:
		raise "Expected a dictionary, not %s" % type(someref)
if isinstance(someref,dict):
		raise "Expected a dictionary, not %s" % type(someref)

for href in ( ENV, INC ):
		for key in href.keys():
				print "%s => %s" % (key, href[key])

values = [hash_ref[k] for k in (key1, key2, key3)]

for key in ("key1", "key2", "key3"):
		hash_ref[k] += 7    # not like in perl but the same result.
#-----------------------------

# @@PLEAC@@_11.4
#-----------------------------
cref = func
cref = lambda a, b: ...
#-----------------------------
returned = cref(arguments)
#-----------------------------
funcname = "thefunc"
locals()[funcname]();
#-----------------------------
commands = {
		'happy': joy,
		'sad': sullen,
		'done': (lambda : sys.exit()),  # In this case "done: sys.exit" would suffice
		'mad': angry,
		}

print "How are you?",
cmd = raw_input()
if cmd in commands:
		commands[cmd]()
else:
		print "No such command: %s" % cmd
#-----------------------------
def counter_maker():
		start = [0]
		def counter_function():
				# start refers to the variable defined in counter_maker, but
				# we can't reassign or increment variables in parent scopes.
				# By using a one-element list we can modify the list without
				# reassigning the variable.  This way of using a list is very
				# like a reference.
				start[0] += 1
				return start[0]-1
		return counter_function

counter = counter_maker()
for i in range(5):
		print counter()
#-----------------------------
counter1 = counter_maker()
counter2 = counter_maker()

for i in range(5):
		print counter1()
print counter1(), counter2()
#=> 0
#=> 1
#=> 2
#=> 3
#=> 4
#=> 5 0
#-----------------------------
import time
def timestamp():
		start_time = time.time()
		def elapsed():
				return time.time() - start_time
		return elapsed
early = timestamp()
time.sleep(20)
later = timestamp()
time.sleep(10)
print "It's been %d seconds since early" % early()
print "It's been %d seconds since later" % later()
#=> It's been 30 seconds since early.
#=> It's been 10 seconds since later.
#-----------------------------

# @@PLEAC@@_11.5
# A name is a reference to an object and an object can be referred to
# by any number of names. There is no way to manipulate pointers or
# an object's id.  This section is thus inapplicable.
x = 1
y = x
print x, id(x), y, id(y)
x += 1    # "x" now refers to a different object than y
print x, id(x), y, id(y)
y = 4     # "y" now refers to a different object than it did before
print x, id(x), y, id(y)

# Some objects (including ints and strings) are immutable, however, which
# can give the illusion of a by-value/by-reference distinction:
a = x = [1]
b = y = 1
c = z = "s"
print a, b, c
#=> [1] 1 s

x += x      # calls list.__iadd__ which is inplace.
y += y      # can't find int.__iadd__ so calls int.__add__ which isn't inplace
z += z      # can't find str.__iadd__ so calls str.__add__ which isn't inplace              
print a, b, c
#=> [1, 1] 1 s

# @@PLEAC@@_11.6
# As indicated by the previous section, everything is referenced, so
# just create a list as normal, and beware that augmented assignment
# works differently with immutable objects to mutable ones:
mylist = [1, "s", [1]]
print mylist
#=> [1, s, [1]]

for elem in mylist:
		elem *= 2
print mylist
#=> [1, s, [1, 1]]

mylist[0] *= 2
mylist[-1] *= 2
print mylist
#=> [1, s, [1, 1, 1, 1]]

# If you need to modify every value in a list, you should use a list comprehension
# which does NOT modify inplace:
import math
mylist = [(val**3 * 4/3*math.pi) for val in mylist]

# @@PLEAC@@_11.7
#-----------------------------
c1 = mkcounter(20)
c2 = mkcounter(77)

print "next c1: %d" % c1['next']()  # 21
print "next c2: %d" % c2['next']()  # 78
print "next c1: %d" % c1['next']()  # 22
print "last c1: %d" % c1['prev']()  # 21
print "old  c2: %d" % c2['reset']() # 77
#-----------------------------
# DON'T DO THIS.  Use an object instead  
def mkcounter(start):
		count = [start]
		def next():
				count[0] += 1
				return count[0]
		def prev():
				count[0] -= 1
				return count[0]
		def get():
				return count[0]
		def set(value):
				count[0] = value
				return count[0]
		def bump(incr):
				count[0] += incr
				return count[0]
		def reset():
				count[0] = start
				return count[0]
		return {
				'next': next, 'prev': prev, 'get': get, 'set': set,
				'bump': bump, 'reset': reset, 'last': prev}
#-----------------------------

# @@PLEAC@@_11.8
#-----------------------------
mref = obj.meth
# later...
mref("args", "go", "here")
#-----------------------------

# @@PLEAC@@_11.9
#-----------------------------
record = {
		"name": "Jason",
		"empno": 132,
		"title": "deputy peon",
		"age": 23,
		"salary": 37000,
		"pals": ["Norbert", "Rhys", "Phineas"],
}
print "I am %s, and my pals are %s." % (record["name"],
																				", ".join(record["pals"]))
#-----------------------------
byname = {}
byname[record["name"]] = record

rp = byname.get("Aron")
if rp:
		 print "Aron is employee %d."% rp["empno"]

byname["Jason"]["pals"].append("Theodore")
print "Jason now has %d pals." % len(byname["Jason"]["pals"])

for name, record in byname.items():
		print "%s is employee number %d." % (name, record["empno"])

employees = {}
employees[record["empno"]] = record;

# lookup by id
rp = employees.get(132)
if (rp):
		print "Employee number 132 is %s." % rp["name"]

byname["Jason"]["salary"] *= 1.035

peons = [r for r in employees.values() if r["title"] == "peon"]
tsevens = [r for r in employees.values() if r["age"] == 27]

# Go through all records
print employees.values()

for rp in sorted(employees.values(), key=lambda x:x["age"]):
		print "%s is age %d."%(rp["name"], rp["age"])

# use @byage, an array of arrays of records
byage = {}
byage[record["age"]] = byage.get(record["age"], []) + [record]

for age, records in byage.items():
		print records
		print "Age %s:"%age,
		for rp in records:
				print rp["name"],
		print
#-----------------------------

# @@PLEAC@@_11.10
#-----------------------------
FieldName: Value
#-----------------------------
for record in list_of_records:
		# Note: sorted added in Python 2.4
		for key in sorted(record.keys()):
				print "%s: %s" % (key, record[key])
		print
#-----------------------------
import re
list_of_records = [{}]
while True:
		line = sys.stdin.readline()
		if not line:
				# EOF
				break
		# Remove trailing \n:
		line = line[:1]
		if not line.strip():
				# New record
				list_of_records.append({})
				continue
		key, value = re.split(r':\s*', line, 1)
		# Assign the key/value to the last item in the list_of_records:
		list_of_records[-1][key] = value
#-----------------------------
# @@PLEAC@@_11.11
import pprint

mylist = [[1,2,3], [4, [5,6,7], 8,9, [0,3,5]], 7, 8]
mydict = {"abc": "def", "ghi":[1,2,3]}
pprint.pprint(mylist, width=1)

fmtdict = pprint.pformat(mydict, width=1)
print fmtdict
# "import pprint; help(pprint)" for more details

# @@INCOMPLETE@@
# Note that pprint does not currently handle user objects

#-----------------------------
# @@PLEAC@@_11.12
newlist = list(mylist) # shallow copy
newdict = dict(mydict) # shallow copy

# Pre 2.3:
import copy
newlist = copy.copy(mylist) # shallow copy
newdict = copy.copy(mydict) # shallow copy

# shallow copies copy a data structure, but don't copy the items in those
# data structures so if there are nested data structures, both copy and
# original will refer to the same object
mylist = ["1", "2", "3"]
newlist = list(mylist)
mylist[0] = "0"
print mylist, newlist
#=> ['0', '2', '3'] ['1', '2', '3']

mylist = [["1", "2", "3"], 4]
newlist = list(mylist)
mylist[0][0] = "0"
print mylist, newlist
#=> [['0', '2', '3'], 4] [['0', '2', '3'], 4]
#-----------------------------
import copy
newlist = copy.deepcopy(mylist) # deep copy
newdict = copy.deepcopy(mydict) # deep copy

# deep copies copy a data structure recursively:
import copy

mylist = [["1", "2", "3"], 4]
newlist = copy.deepcopy(mylist)
mylist[0][0] = "0"
print mylist, newlist
#=> [['0', '2', '3'], 4] [['1', '2', '3'], 4]
#-----------------------------
# @@PLEAC@@_11.13
import pickle
class Foo(object):
		def __init__(self):
				self.val = 1

x = Foo()
x.val = 3
p_x = pickle.dumps(x)  # Also pickle.dump(x, myfile) which writes to myfile
del x
x = pickle.loads(p_x)  # Also x = pickle.load(myfile) which loads from myfile
print x.val
#=> 3
#-----------------------------
# @@PLEAC@@_11.14
import os, shelve
fname = "testfile.db"
if not os.path.exists(fname):
		d = shelve.open("testfile.db")
		for i in range(100000):
				d[str(i)] = i
		d.close()

d = shelve.open("testfile.db")
print d["100"]
print d["1212010201"] # KeyError
#-----------------------------

# @@PLEAC@@_11.15
# bintree - binary tree demo program
# Use the heapq module instead?
import random
import warnings

class BTree(object):
		def __init__(self):
				self.value = None
		
		### insert given value into proper point of
		### the tree, extending this node if necessary.
		def insert(self, value):
				if self.value is None:
						self.left = BTree()
						self.right = BTree()
						self.value = value
				elif self.value > value:
						self.left.insert(value)
				elif self.value < value:
						self.right.insert(value)
				else:
						warnings.warn("Duplicate insertion of %s."%value)
						
		# recurse on left child, 
		# then show current value, 
		# then recurse on right child.
		def in_order(self):
			 if self.value is not None:
					 self.left.in_order()
					 print self.value,
					 self.right.in_order()

		# show current value, 
		# then recurse on left child, 
		# then recurse on right child.
		def pre_order(self):
				if self.value is not None:
						print self.value,
						self.left.pre_order()
						self.right.pre_order()
		
		# recurse on left child, 
		# then recurse on right child,
		# then show current value. 
		def post_order(self):
				if self.value is not None:
						self.left.post_order()
						self.right.post_order()
						print self.value,

		# find out whether provided value is in the tree.
		# if so, return the node at which the value was found.
		# cut down search time by only looking in the correct
		# branch, based on current value.
		def search(self, value):
				if self.value is not None:
						if self.value == value:
								return self
						if value < self.value:
								return self.left.search(value)
						else:
								return self.right.search(value)

def test():
		root = BTree()

		for i in range(20):
				root.insert(random.randint(1, 1000))

		# now dump out the tree all three ways
		print "Pre order: ", root.pre_order()
		print "In order:  ", root.in_order()
		print "Post order:", root.post_order()

		### prompt until empty line
		while True:
				val = raw_input("Search? ").strip()
				if not val:
						break
				val = int(val)
				found = root.search(val)
				if found:
						print "Found %s at %s, %s"%(val, found, found.value)
				else:
						print "No %s in tree" % val
						
if __name__ == "__main__":
		test()


# ^^PLEAC^^_12.0
#-----------------------------
## Python's "module" is the closest equivalent to Perl's "package"


#=== In the file "Alpha.py"
name = "first"

#=== End of file

#=== In the file "Omega.py"

name = "last"
#=== End of file

import Alpha, Omega
print "Alpha is %s, Omega is %s." % (Alpha.name, Omega.name)
#> Alpha is first, Omega is last.
#-----------------------------
# Python does not have an equivalent to "compile-time load"
import sys

# Depending on the implementation, this could use a builtin
# module or load a file with the extension .py, .pyc, pyo, .pyd,
# .so, .dll, or (with imputils) load from other files.
import Cards.Poker

#-----------------------------
#=== In the file Cards/Poker.py
__all__ = ["card_deck", "shuffle"]  # not usually needed
card_deck = []
def shuffle():
		pass

#-----------------------------

# ^^PLEAC^^_12.1
#-----------------------------
#== In the file "YourModule.py"

__version__ = (1, 0)          # Or higher
__all__ = ["...", "..."]      # Override names included in "... import *"
															#   Note: 'import *' is considered poor style
															#   and it is rare to use this variable.
########################
# your code goes here
########################

#-----------------------------
import YourModule             # Import the module into my package
															#  (does not import any of its symbols)

import YourModule as Module   # Use a different name for the module

from YourModule import *      # Import all module symbols not starting
															#  with an underscore (default); if __all__
															#  is defined, only imports those symbols.
															# Using this is discouraged unless the 
															#  module is specifically designed for it.

from YourModule import name1, name2, xxx
															# Import the named symbols from the module

from YourModule import name1 as name2
															# Import the named object, but use a
															#  different name to access it locally.

#-----------------------------
__all__ = ["F1", "F2", "List"]
#-----------------------------
__all__ = ["Op_Func", "Table"]
#-----------------------------
from YourModule import Op_Func, Table, F1
#-----------------------------
from YourModule import Functions, Table
#-----------------------------

# ^^PLEAC^^_12.2
#-----------------------------
# no import
mod = "module"
try:
		__import__(mod)
except ImportError, err:
		raise ImportError("couldn't load %s: %s" % (mod, err))

# imports into current package
try:
		import module
except ImportError, err:
		raise ImportError("couldn't load 'module': %s" % (err, ))

# imports into current package, if the name is known
try:
		import module
except ImportError, err:
		raise ImportError("couldn't load 'module': %s" % (err, ))

# Use a fixed local name for a named module
mod = "module"
try:
		local_name = __import__(mod)
except ImportError, err:
		raise ImportError("couldn't load %s: %s" % (mod, err))

# Use the given name for the named module.
# (You probably don't need to do this.)
mod = "module"
try:
		globals()[mod] = __import__(mod)
except ImportError, err:
		raise ImportError("couldn't load %s: %s" % (mod, err))

#-----------------------------
DBs = "Giant.Eenie Giant.Meanie Mouse.Mynie Moe".split()
for mod in DBs.split():
		try:
				loaded_module = __import__(mod)
		except ImportError:
				continue
		# __import__ returns a reference to the top-most module
		# Need to get the actual submodule requested.
		for term in mod.split(".")[:-1]:
				loaded_module = getattr(loaded_module, term)
		break
else:
		raise ImportError("None of %s loaded" % DBs)
#-----------------------------

# ^^PLEAC^^_12.3
#-----------------------------
import sys
if __name__ == "__main__":
		if len(sys.argv) != 3 or not sys.argv[1].isdigit() \
													or not sys.argv[2].isdigit():
				raise SystemExit("usage: %s num1 num2" % sys.argv[0])

import Some.Module
import More.Modules
#-----------------------------
if opt_b:
		import math
#-----------------------------
from os import O_EXCL, O_CREAT, O_RDWR

#-----------------------------
import os
O_EXCL = os.O_EXCL
O_CREAT = os.O_CREAT
O_RDWR = os.O_RDWR
#-----------------------------
import os
O_EXCL, O_CREAT, O_RDWR = os.O_EXCL, os.O_CREAT, os.O_RDWR
#-----------------------------
load_module('os', "O_EXCL O_CREAT O_RDWR".split())

def load_module(module_name, symbols):
		module = __import__(module_name)
		for symbol in symbols:
				globals()[symbol] = getattr(module, symbol)
#-----------------------------

# ^^PLEAC^^_12.4
#-----------------------------
# Python doesn't have Perl-style packages

# Flipper.py
__version__ = (1, 0)

__all__ = ["flip_boundary", "flip_words"]

Separatrix = ' '  # default to blank

def flip_boundary(sep = None):
		prev_sep = Separatrix
		if sep is not None:
				global Separatrix
				Separatrix = sep
		return prev_sep

def flip_words(line):
		words = line.split(Separatrix)
		words.reverse()
		return Separatrix.join(words)
#-----------------------------

# ^^PLEAC^^_12.5
#-----------------------------
this_pack = __name__
#-----------------------------
that_pack = sys._getframe(1).f_globals.get("__name__", "<string>")
#-----------------------------
print "I am in package", __name__
#-----------------------------
def nreadline(count, myfile):
		if count <= 0:
				raise ValueError("Count must be > 0")
		return [myfile.readline() for i in range(count)]

def main():
		myfile = open("/etc/termcap")
		a, b, c = nreadline(3, myfile)
		myfile.close()

if __name__ == "__main__":
		main()

# DON'T DO THIS:
import sys

def nreadline(count, handle_name):
		assert count > 0, "count must be > 0"
		locals = sys._getframe(1).f_locals
		if not locals.has_key(handle_name):
				raise AssertionError("need open filehandle")
		infile = locals[handle_name]
		retlist = []
		for line in infile:
				retlist.append(line)
				count -= 1
				if count == 0:
						break
		return retlist

def main():
		FH = open("/etc/termcap")
		a, b, c = nreadline(3, "FH")

if __name__ == "__main__":
		main()
#-----------------------------

# ^^PLEAC^^_12.6
#-----------------------------
## There is no direct equivalent in Python to an END block
import time, os, sys

# Tricks to ensure the needed functions exist during module cleanup
def _getgmtime(asctime=time.asctime, gmtime=time.gmtime,
							 t=time.time):
		return asctime(gmtime(t()))

class Logfile:
		def __init__(self, file):
				self.file = file

		def _logmsg(self, msg, argv0=sys.argv[0], pid=os.getpid(),
								_getgmtime=_getgmtime):
				# more tricks to keep all needed references
				now = _getgmtime()
				print>>self.file, argv0, pid, now + ":", msg

		def logmsg(self, msg):
				self._logmsg(self.file, msg)

		def __del__(self):
				self._logmsg("shutdown")
				self.file.close()

		def __getattr__(self, attr):
				# forward everything else to the file handle
				return getattr(self.file, attr)

# 0 means unbuffered
LF = Logfile(open("/tmp/mylog", "a+", 0))
logmsg = LF.logmsg

#-----------------------------
## It is more appropriate to use try/finally around the
## main code, so the order of initialization and finalization
## can be specified.
if __name__ == "__main__":
		import logger
		logger.init("/tmp/mylog")
		try:
				main()
		finally:
				logger.close()

#-----------------------------

# ^^PLEAC^^_12.7
#-----------------------------
#% python -c 'import sys\
for i, name in zip(xrange(sys.maxint), sys.path):\
		print i, repr(name)
#> 0 ''
#> 1 '/usr/lib/python2.2'
#> 2 '/usr/lib/python2.2/plat-linux2'
#> 3 '/usr/lib/python2.2/lib-tk'
#-----------------------------
# syntax for sh, bash, ksh, or zsh
#$ export PYTHONPATH=$HOME/pythonlib

# syntax for csh or tcsh
#% setenv PYTHONPATH ~/pythonlib
#-----------------------------
import sys
sys.path.insert(0, "/projects/spectre/lib")
#-----------------------------
import FindBin
sys.path.insert(0, FindBin.Bin)
#-----------------------------
import FindBin
Bin = "Name"
bin = getattr(FindBin, Bin)
sys.path.insert(0, bin + "/../lib")
#-----------------------------

# ^^PLEAC^^_12.8
#-----------------------------
#% h2xs -XA -n Planets
#% h2xs -XA -n Astronomy::Orbits
#-----------------------------
# @@INCOMPLETE@@
# @@INCOMPLETE@@
# Need a distutils example
#-----------------------------

# ^^PLEAC^^_12.9
#-----------------------------
# Python compiles a file to bytecode the first time it is imported and 
# stores this compiled form in a .pyc file.  There is thus less need for
# incremental compilation as once there is a .pyc file, the sourcecode
# is only recompiled if it is modified.  

# ^^PLEAC^^_12.10
#-----------------------------
# See previous section

# ^^PLEAC^^_12.11
#-----------------------------
## Any definition in a Python module overrides the builtin
## for that module

#=== In MyModule
def open():
		pass # TBA
#-----------------------------
from MyModule import open
file = open()
#-----------------------------

# ^^PLEAC^^_12.12
#-----------------------------
def even_only(n):
		if n & 1:     # one way to test
				raise AssertionError("%s is not even" % (n,))
		#....

#-----------------------------
def even_only(n):
		if n % 2:    # here's another
				# choice of exception depends on the problem
				raise TypeError("%s is not even" % (n,))
		#....

#-----------------------------
import warnings
def even_only(n):
		if n & 1:           # test whether odd number
				warnings.warn("%s is not even, continuing" % (n))
				n += 1
		#....
#-----------------------------
warnings.filterwarnings("ignore")
#-----------------------------

# ^^PLEAC^^_12.13
#-----------------------------
val = getattr(__import__(packname), varname)
vals =  getattr(__import__(packname), aryname)
getattr(__import__(packname), funcname)("args")

#-----------------------------
# DON'T DO THIS [Use math.log(val, base) instead]
import math
def make_log(n):
	 def logn(val):
			return math.log(val, n)
	 return logn

# Modifying the global dictionary - this could also be done
# using locals(), or someobject.__dict__
globaldict = globals()
for i in range(2, 1000):
		globaldict["log%s"%i] = make_log(i)

# DON'T DO THIS
for i in range(2,1000):
		exec "log%s = make_log(i)"%i in globals()
		
print log20(400)
#=>2.0
#-----------------------------
blue = colours.blue
someobject.blue = colours.azure  # someobject could be a module...
#-----------------------------

# ^^PLEAC^^_12.14
#-----------------------------
# Python extension modules can be imported and used just like
# a pure python module.
#
# See http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/ for
# information on how to create extension modules in Pyrex [a
# language that's basically Python with type definitions which
# converts to compiled C code]
#
# See http://www.boost.org/libs/python/doc/ for information on how
# to create extension modules in C++.
#
# See http://www.swig.org/Doc1.3/Python.html for information on how
# to create extension modules in C/C++
#
# See http://docs.python.org/ext/ext.html for information on how to
# create extension modules in C/C++ (manual reference count management).
#
# See http://cens.ioc.ee/projects/f2py2e/ for information on how to
# create extension modules in Fortran
#
# See http://www.scipy.org/Weave for information on how to 
# include inline C code in Python code.
#
# @@INCOMPLETE@@ Need examples of FineTime extensions using the different methods...
#-----------------------------

# ^^PLEAC^^_12.15
#-----------------------------
# See previous section
#-----------------------------

# ^^PLEAC^^_12.16
#-----------------------------
# To document code, use docstrings. A docstring is a bare string that
# is placed at the beginning of a module or immediately after the 
# definition line of a class, method, or function. Normally, the
# first line is a brief description of the object; if a longer
# description is needed, it commences on the third line (the second
# line being left blank).  Multiline comments should use triple
# quoted strings.
# 
# Docstrings are automagically assigned to an object's __doc__ property.
#
# In other words these three classes are identical:
class Foo(object):
		"A class demonstrating docstrings."

class Foo(object):
		__doc__ = "A class demonstrating docstrings."

class Foo(object):
		pass
Foo.__doc__ = "A class demonstrating docstrings."

# as are these two functions:
def foo():
		"A function demonstrating docstrings."

def foo():
		pass
foo.__doc__ = "A function demonstrating docstrings."

# the pydoc module is used to display a range of information about 
# an object including its docstrings:
import pydoc 
print pydoc.getdoc(int)
pydoc.help(int)

# In the interactive interpreter, objects' documentation can be 
# using the help function:
help(int)

#-----------------------------

# ^^PLEAC^^_12.17
#-----------------------------
# Recent Python distributions are built and installed with disutils.
# 
# To build and install under unix
# 
# % python setup.py install
# 
# If you want to build under one login and install under another
# 
# % python setup.py build
# $ python setup.py install
# 
# A package may also be available prebuilt, eg, as an RPM or Windows
# installer.  Details will be specific to the operating system.

#-----------------------------
# % python setup.py --prefix ~/python-lib
#-----------------------------


# ^^PLEAC^^_12.18
#-----------------------------
#== File Some/Module.py

# There are so many differences between Python and Perl that
# it isn't worthwhile trying to come up with an equivalent to
# this Perl code.  The Python code is much smaller, and there's
# no need to have a template.

#-----------------------------

# ^^PLEAC^^_12.19
#-----------------------------
#% pmdesc
#-----------------------------
import sys, pydoc

def print_module_info(path, modname, desc):
	 # Skip files starting with "test_"
	 if modname.split(".")[-1].startswith("test_"):
			 return
	 try:
			 # This assumes the modules are safe for importing,
			 # in that they don't have side effects.  Could also
			 # grep the file for the __version__ line.
			 mod = pydoc.safeimport(modname)
	 except pydoc.ErrorDuringImport:
			 return
	 version = getattr(mod, "__version__", "unknown")
	 if isinstance(version, type("")):
			 # Use the string if it's given
			 pass
	 else:
			 # Assume it's a list of version numbers, from major to minor
			 ".".join(map(str, version))
	 synopsis, text = pydoc.splitdoc(desc)
	 print "%s (%s) - %s" % (modname, version, synopsis)

scanner = pydoc.ModuleScanner()
scanner.run(print_module_info)

#-----------------------------


# ^^PLEAC^^_13.0
#-----------------------------
# Inside a module named 'Data' / file named 'Data.py'
class Encoder(object):
		pass
#-----------------------------
obj = [3, 5]
print type(obj), id(obj), ob[1]

## Changing the class of builtin types is not supported
## in Python.

#-----------------------------
obj.Stomach = "Empty"    # directly accessing an object's contents
obj.NAME = "Thag"        # uppercase field name to make it stand out
(optional)
#-----------------------------
encoded = object.encode("data")
#-----------------------------
encoded = Data.Encoder.encode("data")
#-----------------------------
class Class(object):
		def __init__(self):
				pass
#-----------------------------
object = Class()
#-----------------------------
class Class(object):
		def class_only_method():
				pass # more code here
		class_only_method = staticmethod(class_only_method)

#-----------------------------
class Class(object):
		def instance_only_method(self):
				pass # more code here
#-----------------------------
lector = Human.Cannibal()
lector.feed("Zak")
lector.move("New York")
#-----------------------------
# NOTE: it is rare to use these forms except inside of
# methods to call specific methods from a parent class
lector = Human.Cannibal()
Human.Cannibal.feed(lector, "Zak")
Human.Cannibal.move(lector, "New York")
#-----------------------------
print>>sys.stderr, "stuff here\n"

# ^^PLEAC^^_13.1
#-----------------------------
class Class(object):
		pass
#-----------------------------
import time
class Class(object):
		def __init__(self):
				self.start = time.time()  # init data fields
				self.age = 0
#-----------------------------
import time
class Class(object):
		def __init__(self, **kwargs):
				# Sets self.start to the current time, and self.age to 0.  If called
				# with arguments, interpret them as key+value pairs to
				# initialize the object with
				self.age = 0
				self.__dict__.update(kwargs)
#-----------------------------

# ^^PLEAC^^_13.2
#-----------------------------
import time
class Class(object):
		def __del__(self):
				print self, "dying at", time.ctime()
#-----------------------------
## Why is the perl code introducing a cycle?  I guess it's an
## example of how to keep from calling the finalizer
self.WHATEVER = self
#-----------------------------

# ^^PLEAC^^_13.3
#-----------------------------
# It is standard practice to access attributes directly:
class MyClass(object)
		def __init__(self):
				self.name = "default"
				self.age = 0
obj = MyClass()
obj.name = "bob"
print obj.name
obj.age += 1

# If you later find that you need to compute an attribute, you can always 
# retrofit a property(), leaving user code untouched:
class MyClass(object):
		def __init__(self):
				self._name = "default"
				self._age = 0

		def get_name(self):
				return self._name
		def set_name(self, name):
				self._name = name.title()
		name = property(get_name, set_name)

		def get_age(self):
				return self._age
		def set_age(self, val):
				if val < 0:
						raise ValueError("Invalid age: %s" % val)
				self._age = val
		age = property(get_age, set_age)
obj = MyClass()
obj.name = "bob"
print obj.name
obj.age += 1

# DON'T DO THIS - explicit getters and setters should not be used:
class MyClass(object):
		def __init__(self):
				self.name = "default"
		def get_name(self):
				return self.name
		def set_name(self, name):
				self.name = name.title()
obj = MyClass()
obj.set_name("bob")
print obj.get_name()
#-----------------------------
## DON'T DO THIS (It's complex, ugly, and unnecessary):
class MyClass(object):
		def __init__(self):
				self.age = 0
		def name(self, *args):
				if len(args) == 0:
						return self.name
				elif len(args) == 1:
						self.name = args[0]
				else:
						raise TypeError("name only takes 0 or 1 arguments")
		def age(self, *args):
				prev = self.age
				if args:
						self.age = args[0]
				return prev

# sample call of get and set: happy birthday!
obj.age(1 + obj.age())

#-----------------------------
him = Person()
him.NAME = "Sylvester"
him.AGE = 23
#-----------------------------
# Here's another way to implement the 'obj.method()' is a getter
# and 'obj.method(value)' is a settor.  Again, this is not a
# common Python idiom and should not be used.  See below for a
# more common way to do parameter checking of attribute assignment.

import re, sys

def carp(s):
		sys.stderr.write("WARNING: " + s + "\n")

class Class:
		no_name = []

		def name(self, value = no_name):
				if value is Class.no_name:
						return self.NAME
				value = self._enforce_name_value(value)
				self.NAME = value

		def _enforce_name_value(self, value):
				if re.search(r"[^\s\w'-]", value):
						carp("funny characters in name")
				if re.search(r"\d", value):
						carp("numbers in name")
				if not re.search(r"\S+(\s+\S+)+", value):
						carp("prefer multiword name")
				if not re.search(r"\S", value):
						carp("name is blank")
				return value.upper()   # enforce capitalization
#-----------------------------
# A more typical way to enforce restrictions on a value
# to set
class Class:
		def __setattr__(self, name, value):
				if name == "name":
						value = self._enforce_name_value(value)  # Do any conversions
				self.__dict__[name] = value  # Do the default __setattr__ action

		def _enforce_name_value(self, value):
				if re.search(r"[^\s\w'-]", value):
						carp("funny characters in name")
				if re.search(r"\d", value):
						carp("numbers in name")
				if not re.search(r"\S+(\s+\S+)+", value):
						carp("prefer multiword name")
				if not re.search(r"\S", value):
						carp("name is blank")
				return value.upper()   # enforce capitalization

#-----------------------------
class Person:
		def __init__(self, name = None, age = None, peers = None):
				if peers is None: peers = []  # See Python FAQ 6.25
				self.name = name
				self.age = age
				self.peers = peers

		def exclaim(self):
				return "Hi, I'm %s, age %d, working with %s" % \
						(self.name, self.age, ", ".join(self.peers))

		def happy_birthday(self):
				self.age += 1
				return self.age
#-----------------------------

# ^^PLEAC^^_13.4
#-----------------------------
## In the module named 'Person' ...
def population():
		return Person.body_count[0]

class Person(object):
		body_count = [0]        # class variable - shared across all instances

		def __init__(self):
				self.body_count[0] += 1

		def __del__(self):      # Beware - may be non-deterministic (Jython)!
				self.body_count[0] -= 1

# later, the user can say this:
import Person
people = []
for i in range(10):
		people.append(Person.Person())
print "There are", Person.population(), "people alive."

#=> There are 10 people alive.
#-----------------------------
him = Person()
him.gender = "male"

her = Person()
her.gender = "female"

#-----------------------------
FixedArray.max_bounds = 100                # set for whole class
alpha = FixedArray.FixedArray()
print "Bound on alpha is", alpha.max_bounds
#=>100

beta = FixedArray.FixedArray()
beta.max_bounds = 50                      # still sets for whole class
print "Bound on alpha is", alpha.max_bounds
#=>50
#-----------------------------
# In the module named 'FixedArray'

class FixedArray(object):
		_max_bounds = [7]        # Shared across whole class
		
		def __init__(self, bounds=None):
				if bounds is not None:
						self.max_bounds = bounds

		def get_max_bounds(self):
				return self._max_bounds[0]
		def set_max_bounds(self, val):
				self._max_bounds[0] = val
		max_bounds = property(get_max_bounds, set_max_bounds)
#-----------------------------

# ^^PLEAC^^_13.5
#-----------------------------
# There isn't the severe separation between scalar, arrays and hashs
# in Python, so there isn't a direct equivalent to the Perl code.
class Person:
		def __init__(self, name=None, age=None, peers=None):
				if peers is None: 
						peers = []
				self.name = name
				self.age = age
				self.peers = peers

p = Person("Jason Smythe", 13, ["Wilbur", "Ralph", "Fred"])

# or this way.  (This is not the prefered style as objects should
# be constructed with all the appropriate data, if possible.)

p = Person()  # allocate an empty Person
p.name = "Jason Smythe"                         # set its name field
p.age = 13                                      # set its age field
p.peers.extend( ["Wilbur", "Ralph", "Fred" ] )  # set its peers field

p.peers = ["Wilbur", "Ralph", "Fred"]

p.peers[:]= ["Wilbur", "Ralph", "Fred"]

# fetch various values, including the zeroth friend
print "At age %d, %s's first friend is %s." % \
		(p.age, p.name, p.peers[0])
#-----------------------------
# This isn't very Pythonic - should create objects with the
# needed data, and not depend on defaults and modifing the object.
import sys
def carp(s):
		sys.stderr.write("WARNING: " + s + "\n")

class Person:
		def __init__(self, name = "", age = 0):
				self.name = name
				self.age = age
		def __setattr__(self, name, value):
				if name == "age":
						# This is very unpythonic
						if not isinstance(value, type(0)):
								carp("age '%s' isn't numeric" % (value,))
						if value > 150: carp("age '%s' is unreasonable" % (value,))
				self.__dict__[name] = value

class Family:
		def __init__(self, head = None, address = "", members = None):
				if members is None: members = []
				self.head = head or Person()
				self.address = address
				self.members = members

folks = Family()

dad = folks.head
dad.name = "John"
dad.age = 34

print "%s's age is %d" % (folks.head.name, folks.head.age)
#-----------------------------
class Card:
		def __init__(self, name=None, color=None, cost=None,
								 type=None, release=None, text=None):
				self.name = name
				self.color = color
				self.cost = cost
				self.type = type
				self.release = release
				self.type = type
#-----------------------------
# For positional args
class Card:
		_names = ("name", "color", "cost", "type", "release", "type")
		def __init__(self, *args):
				assert len(args) <= len(self._names)
				for k, v in zip(self._names, args):
						setattr(self, k, None)
#-----------------------------
# For keyword args
class Card:
		_names = ("name", "color", "cost", "type", "release", "type")
		def __init__(self, **kwargs):
				for k in self._names:  # Set the defaults
						setattr(self, k, None)
				for k, v in kwargs.items():  # add in the kwargs
						assert k in self._names, "Unexpected kwarg: " + k
						setattr(self, k, v)
#-----------------------------
class hostent:
		def __init__(self, addr_list = None, length = None,
								 addrtype = None, aliases = None, name = None):
				self.addr_list = addr_list or []
				self.length = length or 0
				self.addrtype = addrtype or ""
				self.aliases = aliases or []
				self.name = name or ""
#-----------------------------
## XXX What do I do with these?
#define h_type h_addrtype
#define h_addr h_addr_list[0]
#-----------------------------
# make (hostent object)->type() same as (hostent object)->addrtype()
#
# *hostent::type = \&hostent::addrtype;
#
# # make (hostenv object)->
# addr()
#  same as (hostenv object)->addr_list(0)
#sub hostent::addr { shift->addr_list(0,@_) }
#-----------------------------
# No equivalent to Net::hostent (Python uses an unnamed tuple)
#package Extra::hostent;
#use Net::hostent;
#@ISA = qw(hostent);
#sub addr { shift->addr_list(0,@_) }
#1;
#-----------------------------

# ^^PLEAC^^_13.6
#-----------------------------
class Class(Parent):
		pass
#-----------------------------
## Note: this is unusual in Python code
ob1 = SomeClass()
# later on
ob2 = ob1.__class__()
#-----------------------------
## Note: this is unusual in Python code
ob1 = Widget()
ob2 = ob1.__class__()
#-----------------------------
# XXX I do not know the intent of the original Perl code
# Do not use this style of programming in Python.
import time
class Person(possible,base,classes):
		def __init__(self, *args, **kwargs):
				# Call the parents' constructors, if there are any
				for baseclass in self.__class__.__bases__:
						init = getattr(baseclass, "__init__")
						if init is not None:
								init(self, *args, **kwargs)
				self.PARENT = parent      # init data fields
				self.START = time.time()
				self.AGE = 0
#-----------------------------

# ^^PLEAC^^_13.7
#-----------------------------
methname = "flicker"
getattr(obj, methname)(10)    # calls obj->flicker(10);

# call three methods on the object, by name
for m in ("start", "run", "stop"):
		getattr(obj, m)()
#-----------------------------
methods = ("name", "rank", "serno")
his_info = {}
for m in methods:
	 his_info[m] = getattr(ob, m)()

# same as this:

his_info = {
		'name': ob.name(),
		'rank': ob.rank(),
		'serno': ob.serno(),
}
#-----------------------------
fnref = ob.method
#-----------------------------
fnref(10, "fred")
#-----------------------------
obj.method(10, "fred")
#-----------------------------
# XXX Not sure if this is the correct translation.
# XXX Is 'can' special?
if isinstance(obj_target, obj.__class__):
		obj.can('method_name')(obj_target, *arguments)
#-----------------------------

# ^^PLEAC^^_13.8
#-----------------------------
isinstance(obj, mimetools.Message)
issubclass(obj.__class__, mimetools.Message)

if hasattr(obj, "method_name"):  # check method validity
		pass
#-----------------------------
## Explicit type checking is needed fewer times than you think.
his_print_method = getattr(obj, "as_string", None)
#-----------------------------
__version__ = (3, 0)
Some_Module.__version__

# Almost never used, and doesn't work for builtin types, which don't
# have a __module__.

his_vers = obj.__module__.__version__
#-----------------------------
if Some_Module.__version__ < (3, 0):
	raise ImportError("Some_Module version %s is too old, expected (3, 0)" %
										(Some_Module.__version__,))
# or more simply
assert Some_Module.__version__ >= (3, 0), "version too old"

#-----------------------------
__VERSION__ = '1.01'
#-----------------------------

# ^^PLEAC^^_13.9
#-----------------------------
# Note: This uses the standard Python idiom of accessing the
# attributes directly rather than going through a method call.
# See earlier in this chapter for examples of how this does
# not break encapsulation.
class Person:
		def __init__(self, name = "", age = 0):
				self.name = name
				self.age = age
#-----------------------------
# Prefered: dude = Person("Jason", 23)
dude = Person()
dude.name = "Jason"
dude.age = 23
print "%s is age %d." % (dude.name, dude.age)
#-----------------------------
class Employee(Person):
		pass
#-----------------------------
# Prefered: empl = Employee("Jason", 23)
emp = Employee()
empl.name = "Jason"
empl.age = 23
print "%s is age %d." % (empl.name, empl.age)
#-----------------------------

# ^^PLEAC^^_13.10
#-----------------------------
# This doesn't need to be done since if 'method' doesn't
# exist in the Class it will be looked for in its BaseClass(es)
class Class(BaseClass):
		def method(self, *args, **kwargs):
				BaseClass.method(self, *args, **kwargs)

# This lets you pick the specific method in one of the base classes
class Class(BaseClass1, BaseClass2):
		def method(self, *args, **kwargs):
				BaseClass2.method(self, *args, **kwargs)

# This looks for the first method in the base class(es) without
# specifically knowing which base class.  This reimplements
# the default action so isn't really needed.
class Class(BaseClass1, BaseClass2, BaseClass3):
		def method(self, *args, **kwargs):
				for baseclass in self.__class__.__bases__:
						f = getattr(baseclass, "method")
						if f is not None:
								return f(*args, **kwargs)
				raise NotImplementedError("method")

#-----------------------------
self.meth()   # Call wherever first meth is found

Where.meth(self)  # Call in the base class "Where"

# XXX Does Perl only have single inheritence?  Or does
# it check all base classes?  No directly equivalent way
# to do this in Python, but see above.
#-----------------------------
import time

# The Perl code calls a private '_init' function, but in
# Python there's need for the complexity of 'new' mechanism
# so it's best just to put the '_init' code in '__init__'.
class Class:
		def __init__(self, *args):
				# init data fields
				self.START = time.time()
				self.AGE = 0
				self.EXTRA = args          # anything extra
#-----------------------------
obj = Widget(haircolor = "red", freckles = 121)
#-----------------------------
class Class(Base1, Base2, Base3):
		def __init__(self, *args, **kwargs):
				for base in self.__class__.__bases__:
						f = getattr(base, "__init__")
						if f is not None:
								f(self, *args, **kwargs)
#-----------------------------

# ^^PLEAC^^_13.11
#-----------------------------
# NOTE: Python prefers direct attribute lookup rather than
# method calls.  Python 2.2 will introduce a 'get_set' which
# *may* be equivalent, but I don't know enough about it.  So
# instead I'll describe a class that lets you restrict access
# to only specific attributes.

class Private:
		def __init__(self, names):
				self.__names = names
				self.__data = {}
		def __getattr__(self, name):
				if name in self.__names:
						return self.__data[name]
				raise AttributeError(name)
		def __setattr__(self, name, value):
				if name.startswith("_Private"):
						self.__dict__[name] = value
						return
				if name in self.__names:
						self.__data[name] = value
						return
				raise TypeError("cannot set the attribute %r" % (name,))

class Person(Private):
		def __init__(self, parent = None):
				Private.__init__(self, ["name", "age", "peers", "parent"])
				self.parent = parent
		def new_child(self):
				return Person(self)
#-----------------------------
dad = Person()
dad.name = "Jason"
dad.age = 23
kid = dad.new_child()
kid.name = "Rachel"
kid.age = 2
print "Kid's parent is", kid.parent.name
#=>Kid's parent is Jason

# ^^PLEAC^^_13.12
#-----------------------------
## XXX No clue on what this does.  For that matter, what's
## "The Data Inheritance Problem"?

# ^^PLEAC^^_13.13
#-----------------------------
node.NEXT = node
#-----------------------------
# This is not a faithful copy of the Perl code, but it does
# show how to have the container's __del__ remove cycles in
# its contents.  Note that Python 2.0 includes a garbage
# collector that is able to remove these sorts of cycles, but
# it's still best to prevent cycles in your code.
class Node:
		def __init__(self, value = None):
				self.next = self
				self.prev = self
				self.value = value

class Ring:
		def __init__(self):
				self.ring = None
				self.count = 0

		def __str__(self):
				# Helpful when debugging, to print the contents of the ring
				s = "#%d: " % self.count
				x = self.ring
				if x is None:
						return s
				values = []
				while True:
						values.append(x.value)
						x = x.next
						if x is self.ring:
								break
				return s + " -> ".join(map(str, values)) + " ->"

		def search(self, value):
				node = self.ring
				while True:
						if node.value == value:
								return node
						node = node.next
						if node is self.ring:
								break

		def insert_value(self, value):
				node = Node(value)
				if self.ring is not None:
						node.prev, node.next = self.ring.prev, self.ring
						self.ring.prev.next = self.ring.prev = node
				self.ring = node
				self.count += 1

		def delete_value(self, value):
				node = self.search(value)
				if node is not None:
						self.delete_node(node)

		def delete_node(self, node):
				if node is node.next:
						node.next = node.prev = None
						self.ring = None
				else:
						node.prev.next, node.next.prev = node.next, node.prev
						if node is self.ring:
								self.ring = node.next
				self.count -= 1

		def __del__(self):
				while self.ring is not None:
						self.delete_node(self.ring)

COUNT = 1000
for rep in range(20):
		r = Ring()
		for i in range(COUNT):
				r.insert_value(i)
#-----------------------------

# ^^PLEAC^^_13.14
#-----------------------------
import UserString
class MyString(UserString.UserString):
		def __cmp__(self, other):
				return cmp(self.data.upper(), other.upper())

class Person:
		def __init__(self, name, idnum):
				self.name = name
				self.idnum = idnum
		def __str__(self):
				return "%s (%05d)" % (self.name.lower().capitalize(), self.idnum)

#-----------------------------
class TimeNumber:
		def __init__(self, hours, minutes, seconds):
				assert minutes < 60 and seconds < 60
				self.hours = hours
				self.minutes = minutes
				self.seconds = seconds
		def __str__(self):
				return "%d:%02d:%02d" % (self.hours, self.minutes, self.seconds)
		def __add__(self, other):
				seconds = self.seconds + other.seconds
				minutes = self.minutes + other.minutes
				hours = self.hours + other.hours
				if seconds >= 60:
						seconds %= 60
						minutes += 1
				if minutes >= 60:
						minutes %= 60
						hours += 1
				return TimeNumber(hours, minutes, seconds)

		def __sub__(self, other):
				raise NotImplementedError

		def __mul__(self, other):
				raise NotImplementedError

		def __div__(self, other):
				raise NotImplementedError

t1 = TimeNumber(0, 58, 59)
sec = TimeNumber(0, 0, 1)
min = TimeNumber(0, 1, 0)
print t1 + sec + min + min
# 1:01:00

#-----------------------------
# For demo purposes only - the StrNum class is superfluous in this
# case as plain strings would give the same result.
class StrNum:
		def __init__(self, value):
				self.value = value

		def __cmp__(self, other):  # both <=> and cmp
				# providing <=> gives us <, ==, etc. for free.
				# __lt__, __eq__, and __gt__ can also be individually specified
				return cmp(self.value, other.value)

		def __str__(self):  # ""
				return self.value

		def __nonzero__(self, other):   # bool
				return bool(self.value)

		def __int__(self, other):   # 0+
				return int(self.value)

		def __add__(self, other):   # +
				return StrNum(self.value + other.value)

		def __radd__(self, other):   # +, inverted
				return StrNum(other.value + self.value)

		def __mul__(self, other):   # *
				return StrNum(self.value * other)

		def __rmul__(self, other):   # *, inverted
				return StrNum(self.value * other)


def demo():
		# show_strnum - demo operator overloading
		x = StrNum("Red")
		y = StrNum("Black")
		z = x + y
		r = z * 3
		print "values are %s, %s, %s, and %s" % (x, y, z, r)
		if x < y:
				s = "LT"
		else:
				s = "GE"
		print x, "is", s, y

if __name__ == "__main__":
		demo()
# values are Red, Black, RedBlack, and RedBlackRedBlackRedBlack
# Red is GE Black

#-----------------------------
#!/usr/bin/env python
# demo_fixnum - show operator overloading

# sum of STRFixNum: 40 and STRFixNum: 12 is STRFixNum: 52
# product of STRFixNum: 40 and STRFixNum: 12 is STRFixNum: 480
# STRFixNum: 3 has 0 places
# div of STRFixNum: 40 by STRFixNum: 12 is STRFixNum: 3.33
# square of that is  STRFixNum: 11.11

# This isn't excatly the same as the original Perl code since
# I couldn't figure out why the PLACES variable was used.
#-----------------------------
import re
_places_re = re.compile(r"\.(\d+)")

default_places = 0

class FixNum:
		def __init__(self, value, places = None):
				self.value = value
				if places is None:
						# get from the value
						m = _places_re.search(str(value))
						if m:
								places = int(m.group(1))
						else:
								places = default_places
				self.places = places

		def __add__(self, other):
				return FixNum(self.value + other.value,
											max(self.places, other.places))

		def __mul__(self, other):
				return FixNum(self.value * other.value,
											max(self.places, other.places))

		def __div__(self, other):
				# Force to use floating point, since 2/3 in Python is 0
				# Don't use float() since that will convert strings
				return FixNum((self.value+0.0) / other.value,
											max(self.places, other.places))

		def __str__(self):
				return "STR%s: %.*f" % (self.__class__.__name__,
																self.places, self.value)
		def __int__(self):
				return int(self.value)

		def __float__(self):
				return self.value

def demo():
		x = FixNum(40)
		y = FixNum(12, 0)

		print "sum of", x, "and", y, "is", x+y
		print "product of", x, "and", y, "is", x*y

		z = x/y
		print "%s has %d places" % (z, z.places)
		if not z.places:
				z.places = 2

		print "div of", x, "by", y, "is", z
		print "square of that is ", z*z

if __name__ == "__main__":
		demo()


# ^^PLEAC^^_13.15
# You can't tie a variable, but you can use properties.  
import itertools
class ValueRing(object):
		def __init__(self, colours):
				self.colourcycle = itertools.cycle(colours)

		def next_colour(self):
				return self.colourcycle.next()
		colour = property(next_colour)
vr = ValueRing(["red", "blue"])
for i in range(6):
		print vr.colour,
print

# Note that you MUST refer directly to the property
x = vr.colour
print x, x, x
#-------------------------------------
# Ties are generally unnecessary in Python because of its strong OO support -
# The resulting code is MUCH shorter:
class AppendDict(dict):
		def __setitem__(self, key, val):
				if key in self:
						self[key].append(val)
				else:
						super(AppendDict, self).__setitem__(key, [val])
tab = AppendDict()
tab["beer"] = "guinness"
tab["food"] = "potatoes"
tab["food"] = "peas"

for key, val in tab.items():
		print key, "=>", val
#-------------------------------------
class CaselessDict(dict):
		def __setitem__(self, key, val):
				super(CaselessDict, self).__setitem__(key.lower(), val)
		def __getitem__(self, key):
				return super(CaselessDict, self).__getitem__(key.lower())

tab = CaselessDict()
tab["VILLAIN"] = "big "
tab["herOine"] = "red riding hood"
tab["villain"] = "bad wolf"

for key, val in tab.items():
		print key, "is", val
#=>villain is bad wolf
#=>heroine is red riding hood
#-------------------------------------
class RevDict(dict):
		def __setitem__(self, key, val):
				super(RevDict, self).__setitem__(key, val)
				super(RevDict, self).__setitem__(val, key)

tab = RevDict()
tab["red"] = "rojo"
tab["blue"] = "azul"
tab["green"] = "verde"
tab["evil"] = ("No Way!", "Way!")

for key, val in tab.items():
		print key, "is", val
#=>blue is azul
#=>('No Way!', 'Way!') is evil
#=>rojo is red
#=>evil is ('No Way!', 'Way!')
#=>azul is blue
#=>verde is green
#=>green is verde
#=>red is rojo
#-------------------------------------
import itertools
for elem in itertools.count():
		print "Got", elem
#-------------------------------------
# You could use FileDispatcher from section 7.18
tee = FileDispatcher(sys.stderr, sys.stdout)
#-------------------------------------
# @@PLEAC@@_14.0

# See http://www.python.org/doc/topics/database/ for Database Interfaces details.
# currently listed on http://www.python.org/doc/topics/database/modules/
#
#  DB/2, Informix, Interbase, Ingres, JDBC, MySQL, pyodbc, mxODBC, ODBC Interface,
#  DCOracle, DCOracle2, PyGresQL, psycopg, PySQLite, sapdbapi, Sybase, ThinkSQL.
#

# @@PLEAC@@_14.1
#-------------------------------------
import anydbm
filename = "test.db"
try:
		db = anydbm.open(filename)
except anydbm, err:
		print "Can't open %s: %s!" % (filename, err)

db["key"] = "value"        # put value into database
if "key" in db:            # check whether in database
		val = db.pop("key")    # retrieve and remove from database
db.close()                 # close the database
#-------------------------------------
# download the following standalone program
#!/usr/bin/python
# userstats - generates statistics on who logged in.
# call with an argument to display totals

import sys, os, anydbm, re

db_file = '/tmp/userstats.db'       # where data is kept between runs

try:
		db = anydbm.open(db_file,'c')   # open, create if it does not exist
except:
		print "Can't open db %s: %s!" % (db_file, sys.exc_info()[1])
		sys.exit(1)

if len(sys.argv) > 1:
		if sys.argv[1] == 'ALL':
				userlist = db.keys()
		else:
				userlist = sys.argv[1:]
		userlist.sort()
		for user in userlist:
				if db.has_key(user):
						print "%s\t%s" % (user, db[user])
				else:
						print "%s\t%s" % (user, 0)
else:
		who = os.popen('who').readlines()  # run who(1)
		if len(who)<1:
				print "error running who"       # exit
				sys.exit(1)
		# extract username (first thin on the line) and update
		user_re = re.compile("^(\S+)")
		for line in who:
				fnd = user_re.search(line)
				if not fnd:
						print "Bad line from who: %s" % line
						sys.exit(1)
				user = fnd.groups()[0]
				if not db.has_key(user):
						db[user] = "0"
				db[user] = str(int(db[user])+1) # only strings are allowed
db.close()
		



# @@PLEAC@@_14.2
# Emptying a DBM File

import anydbm

try:
		db = anydbm.open(FILENAME,'w')   # open, for writing
except anydbm.error, err:
		print "Can't open db %s: %s!" % (filename, err)
		raise SystemExit(1)

db.clear()
db.close()
# -------------------------------
try:
		db = anydbm.open(filename,'n')   # open, always create a new empty db
except anydbm.error, err:
		print "Can't open db %s: %s!" % (filename, err)
		raise SystemExit(1)

db.close()
# -------------------------------
import os
try:
		os.remove(FILENAME)
except OSError, err:
		print "Couldn't remove %s to empty the database: %s!" % (FILENAME,
				err)
		raise SystemExit

try:
		db = anydbm.open(FILENAME,'n')   # open, flways create a new empty db
except anydbm.error, err:
		print "Couldn't create %s database: %s!" % (FILENAME, err)
		raise SystemExit

# @@PLEAC@@_14.3
# Converting Between DBM Files

# download the following standalone program
#!/usr/bin/python
# db2gdbm: converts DB to GDBM

import sys
import dbm, gdbm

if len(sys.argv)<3:
		print "usage: db2gdbm infile outfile"
		sys.exit(1)

(infile, outfile) = sys.argv[1:]

# open the files
try:
		db_in = dbm.open(infile)
except:
		print "Can't open infile %s: %s!" % (infile, sys.exc_info()[1])
		sys.exit(1)
try:
		db_out = dbm.open(outfile,"n")
except:
		print "Can't open outfile %s: %s!" % (outfile, sys.exc_info()[1])
		sys.exit(1)

# copy (don't use db_out = db_in because it's slow on big databases)
# is this also so for python ?
for k in db_in.keys():
		db_out[k] = db_in[k]

# these close happen automatically at program exit
db_out.close()
db_in.close()



# @@PLEAC@@_14.4

OUTPUT.update(INPUT1)
OUTPUT.update(INPUT2)

OUTPUT = anydbm.open("OUT","n")
for INPUT in (INPUT1, INPUT2, INPUT1):
		for key, value in INPUT.iteritems():
				if OUTPUT.has_key(key):
						# decide which value to use and set OUTPUT[key] if necessary
						print "key %s already present: %s, new: %s" % (
										key, OUTPUT[key], value )
				else:
						OUTPUT[key] = value

# @@PLEAC@@_14.5
# On systems where the Berkeley DB supports it, dbhash takes an
# "l" flag:
import dbhash
dbhash.open("mydb.db", "cl") # 'c': create if doesn't exist

# @@INCOMPLETE@@

# @@PLEAC@@_14.6
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_14.7
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_14.8
# shelve uses anydbm to access and chooses between DBMs.
# anydbm detect file formats automatically.
import shelve
db = shelve.open("celebrities.db")

name1 = "Greg Stein"
name2 = "Greg Ward"

# shelve uses pickle to convert objects into strings and back.
# This is automatic.
db[name1] = ["of ViewCVS fame", "gstein@lyra.org"]
db[name2] = ["of Distutils fame", "gward@python.net"]

greg1 = db[name1]
greg2 = db[name2]

print "Two Gregs: %x %x" % (id(greg1), id(greg2))

if greg1 == greg2:
		print "You're having runtime fun with one Greg made two."
else:
		print "No two Gregs are ever alike."

# Changes to mutable entries are not written back by default.
# You can get the copy, change it, and put it back.
entry = db[name1]
entry[0] = "of Subversion fame"
db[name1] = entry

# Or you can open shelve with writeback option. Then you can
# change mutable entries directly. (New in 2.3)
db = shelve.open("celebrities.db", writeback=True)
db[name2][0] = "of Optik fame"

# However, writeback option can consume vast amounts of memory
# to do its magic. You can clear cache with sync().
db.sync()
#-----------------------------

# @@PLEAC@@_14.9
# DON'T DO THIS.
import os as _os, shelve as _shelve

_fname = "persist.db"
if not _os.path.exists(_fname):
		var1 = "foo"
		var2 = "bar"
_d = _shelve.open("persist.db")
globals().update(_d)

print "var1 is %s; var2 is %s"%(var1, var2)
var1 = raw_input("New var1: ")
var2 = raw_input("New var2: ")

for key, val in globals().items():
		if not key.startswith("_"):
				_d[key] = val
# @@INCOMPLETE@@

# @@PLEAC@@_14.10
#-----------------------------
import dbmodule

dbconn = dbmodule.connect(arguments...)

cursor = dbconn.cursor()
cursor.execute(sql)

while True:
	 row = cursor.fetchone()
	 if row is None:
			 break
	 ...

cursor.close()
dbconn.close()

#-----------------------------
import MySQLdb
import pwd

dbconn = MySQLdb.connect(db='dbname', host='mysqlserver.domain.com',
												port=3306, user='user', passwd='password')

cursor = dbconn.cursor()
cursor.execute("CREATE TABLE users (uid INT, login CHAR(8))")

# Note: some databases use %s for parameters, some use ? or other
# formats
sql_fmt = "INSERT INTO users VALUES( %s, %s )"

for userent in pwd.getpwall():
	 # the second argument contains a list of parameters which will
	 # be quoted before being put in the query
	 cursor.execute(sql_fmt, (userent.pw_uid, userent.pw_name))

cursor.execute("SELECT * FROM users WHERE uid < 50")

for row in cursor.fetchall():
	 # NULL will be displayed as None
	 print ", ".join(map(str, row))

cursor.execute("DROP TABLE users")
cursor.close()
dbconn.close()
#-----------------------------

# @@PLEAC@@_14.11
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_15.1
#-----------------------------
# Parsing program arguments
# -- getopt way (All Python versions)

#-----------------------------
# Preamble

import sys
import getopt

# getopt() explicitly receives arguments for it to process.
# No magic. Explicit is better than implicit.

# PERL: @ARGV
argv = sys.argv[1:]

# Note that sys.argv[0] is the script name, and need to be
# stripped.

#-----------------------------
# Short options

# PERL: getopt("vDo");
# Polluting the caller's namespace is evil. Don't do that.

# PERL: getopt("vDo:", \%opts);
opts, rest = getopt.getopt(argv, "vDo:")

# If you want switches to take arguments, you must say so.
# Unlike PERL, which silently performs its magic, switches
# specified without trailing colons are considered boolean
# flags by default.

# PERL: getopt("vDo", \%opts);
opts, rest = getopt.getopt(argv, "v:D:o:")

# PERL: getopts("vDo:", \%opts);
# getopt/getopts distinction is not present in Python 'getopt'
# module.

#-----------------------------
# getopt() return values, compared to PERL

# getopt() returns two values. The first is a list of
# (option, value) pair. (Not a dictionary, i.e. Python hash.)
# The second is the list of arguments left unprocessed.

# Example
# >>> argv = "-v ARG1 -D ARG2 -o ARG3".split()
# >>> opts, rest = getopt.getopt(argv, "v:D:o:")
# >>> print opts
# [('-v', 'ARG1'), ('-D', 'ARG2'), ('-o', 'ARG3')]

#-----------------------------
# Long options

# getopt() handles long options too. Pass a list of option
# names as the third argument. If an option takes an argument,
# append an equal sign.

opts, rest = getopt.getopt(argv, "", [
		"verbose", "Debug", "output="])

#-----------------------------
# Switch clustering

# getopt() does switch clustering just fine.

# Example
# >>> argv1 = '-r -f /tmp/testdir'.split()
# >>> argv2 = '-rf /tmp/testdir'.split()
# >>> print getopt.getopt(argv1, 'rf')
# ([('-r', ''), ('-f', '')], ['/tmp/testdir'])
# >>> print getopt.getopt(argv2, 'rf')
# ([('-r', ''), ('-f', '')], ['/tmp/testdir'])

#-----------------------------
# @@INCOMPLETE@@

# TODO: Complete this section using 'getopt'. Show how to
# use the parsed result.

# http://www.python.org/doc/current/lib/module-getopt.html
# Python library reference has a "typical usage" demo.

# TODO: Introduce 'optparse', a very powerful command line
# option parsing module. New in 2.3.


# @@PLEAC@@_15.2
##------------------
import sys

def is_interactive_python():
		try:
				ps = sys.ps1
		except:
				return False
		return True
##------------------
import sys
def is_interactive():
		# only False if stdin is redirected like "-t" in perl.
		return sys.stdin.isatty()

# Or take advantage of Python's Higher Order Functions:
is_interactive = sys.stdin.isatty
##------------------
import posix
def is_interactive_posix():
		tty = open("/dev/tty")
		tpgrp = posix.tcgetpgrp(tty.fileno())
		pgrp = posix.getpgrp()
		tty.close()
		return (tpgrp == pgrp)

# test with:
#  python 15.2.py
#  echo "dummy" | python 15.2.py | cat
print "is python shell:", is_interactive_python()
print "is a tty:", is_interactive()
print "has no tty:", is_interactive_posix()

if is_interactive():
		while True:
				try:
						ln = raw_input("Prompt:")
				except:
						break
				print "you typed:", ln


# @@PLEAC@@_15.3

# Python has no Term::Cap module.
# One could use the curses, but this was not ported to windows,
# use console.

# just run clear
import os
os.system("clear")
# cache output
clear = os.popen("clear").read()
print clear
# or to avoid print's newline
sys.stdout.write(clear)

# @@PLEAC@@_15.4
# Determining Terminal or Window Size

# eiter use ioctl
import struct, fcntl, termios, sys

s = struct.pack("HHHH", 0, 0, 0, 0)
hchar, wchar = struct.unpack("HHHH", fcntl.ioctl(sys.stdout.fileno(),
																 termios.TIOCGWINSZ, s))[:2]
# or curses
import curses
(hchar,wchar) = curses.getmaxyx()

# graph contents of values
import struct, fcntl, termios, sys
width = struct.unpack("HHHH", fcntl.ioctl(sys.stdout.fileno(),
																 termios.TIOCGWINSZ, 
																 struct.pack("HHHH", 0, 0, 0, 0)))[1]
if width<10:
		print "You must have at least 10 characters"
		raise SystemExit

max_value = 0                    
for v in values:
		max_value = max(max_value,v)
		
ratio = (width-10)/max_value   # chars per unit
for v in values:
		print "%8.1f %s" % (v, "*"*(v*ratio))

# @@PLEAC@@_15.5

# there seems to be no standard ansi module
# and BLINK does not blink here.
RED = '\033[31m'
RESET = '\033[0;0m'
BLINK = '\033[05m'
NOBLINK = '\033[25m'

print RED+"DANGER, Will Robinson!"+RESET
print "This is just normal text"
print "Will ``"+BLINK+"Do you hurt yet?"+NOBLINK+"'' and back"

# @@PLEAC@@_15.6

# Show ASCII values for keypresses

# _Getch is from http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/134892
class _Getch:
		"""Gets a single character from standard input.  Doesn't echo to screen."""
		def __init__(self):
				try:
						self.impl = _GetchWindows()
				except ImportError:
						self.impl = _GetchUnix()

		def __call__(self):
				return self.impl()


class _GetchUnix:
		def __init__(self):
				import tty, sys

		def __call__(self):
				import sys, tty, termios
				fd = sys.stdin.fileno()
				old_settings = termios.tcgetattr(fd)
				try:
						tty.setraw(sys.stdin.fileno())
						ch = sys.stdin.read(1)
				finally:
						termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
				return ch


class _GetchWindows:
		def __init__(self):
				import msvcrt

		def __call__(self):
				import msvcrt
				return msvcrt.getch()


getch = _Getch()

print "Press keys to see their ASCII values.  Use Ctrl-C to quit.\n"
try:
		while True:
				char = ord(getch())
				if char == 3:
						break
				print " Decimal: %3d   Octal: %3o   Hex: x%02x" % (char, char, char)
except KeyboardError:
		pass
#----------------------------------------

# @@PLEAC@@_15.7
print "\aWake up!\n";
#----------------------------------------
# @@INCOMPLETE@@

# @@PLEAC@@_15.8
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_15.9
# On Windows
import msvcrt
if msvcrt.kbhit():
		c = msvcrt.getch

# See http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/134892
# @@INCOMPLETE@@


# @@PLEAC@@_15.10
#----------------------------------------
import getpass
import pwd
import crypt
password = getpass.getpass('Enter your password: ')
username = getpass.getuser()
encrypted = pwd.getpwnam(username).pw_passwd
if not encrypted or encrypted == 'x':
		# If using shadow passwords, this will be empty or 'x'
		print "Cannot verify password"
elif crypt.crypt(password, encrypted) != encrypted:
		print "You are not", username
else:
		print "Welcome,", username
#----------------------------------------

# @@PLEAC@@_15.11

# simply importing readline gives line edit capabilities to raw_
import readline
readline.add_history("fake line")
line = raw_input()

# download the following standalone program
#!/usr/bin/python
# vbsh - very bad shell

import os
import readline

while True:
		try:
				cmd = raw_input('$ ')
		except EOFError:
				break
		status = os.system(cmd)
		exit_value = status >> 8
		signal_num = status & 127
		dumped_core = status & 128 and "(core dumped)" or ""
		print "Program terminated with status %d from signal %d%s\n" % (
						exit_value, signal_num, dumped_core)



readline.add_history("some line!")
readline.remove_history_item(position)
line = readline.get_history_item(index)

# an interactive python shell would be
import code, readline
code.InteractiveConsole().interact("code.InteractiveConsole")

# @@PLEAC@@_15.12
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_15.13
#----------------------------------------
# This entry uses pexpect, a pure Python Expect-like module.
# http://pexpect.sourceforge.net/

# for more information, check pexpect's documentation and example.

import pexpect

#----------------------------------------
# spawn program
try:
		command = pexpect.spawn("program to run")
except pexpect.ExceptionPexpect:
		# couldn't spawn program
		pass

#----------------------------------------
# you can pass any filelike object to setlog
# passing None will stop logging

# stop logging
command.setlog(None)

# log to stdout
import sys
command.setlog(sys.stdout)

# log to specific file
fp = file("pexpect.log", "w")
command.setlog(fp)

#----------------------------------------
# expecting simple string
command.expect("ftp>")

# expecting regular expression
# actually, string is always treated as regular expression

# so it's the same thing
command.expect("Name.*:")

# you can do it this way, too
import re
regex = re.compile("Name.*:")
command.expect(regex)

#----------------------------------------
# expecting with timeout
try:
		command.expect("Password:", 10)
except pexpect.TIMEOUT:
		# timed out
		pass

# setting default timeout
command.timeout = 10

# since we set default timeout, following does same as above
try:
		command.expect("Password:")
except pexpect.TIMEOUT:
		# timed out
		pass

#----------------------------------------
# what? do you *really* want to wait forever?

#----------------------------------------
# sending line: normal way
command.sendline("get spam_and_ham")

# you can also treat it as file
print>>command, "get spam_and_ham"

#----------------------------------------
# finalization

# close connection with child process
# (that is, freeing file descriptor)
command.close()

# kill child process
import signal
command.kill(signal.SIGKILL)

#----------------------------------------
# expecting multiple choices
which = command.expect(["invalid", "success", "error", "boom"])

# return value is index of matched choice
# 0: invalid
# 1: success
# 2: error
# 3: boom

#----------------------------------------
# avoiding exception handling
choices = ["invalid", "success", "error", "boom"]
choices.append(pexpect.TIMEOUT)
choices.append(pexpect.EOF)

which = command.expect(choices)

# if TIMEOUT or EOF occurs, appropriate index is returned
# (instead of raising exception)
# 4: TIMEOUT
# 5: EOF

# @@PLEAC@@_15.14
from Tkinter import *

def print_callback():
		print "print_callback"

main = Tk()

menubar = Menu(main)
main.config(menu=menubar)

file_menu = Menu(menubar)
menubar.add_cascade(label="File", underline=1, menu=file_menu)
file_menu.add_command(label="Print", command=print_callback)

main.mainloop()

# using a class
from Tkinter import *

class Application(Tk):
		def print_callback(self):
				print "print_callback"
		def debug_callback(self):
				print "debug:", self.debug.get()
				print "debug level:", self.debug_level.get()

		def createWidgets(self):
				menubar = Menu(self)
				self.config(menu=menubar)
				file_menu = Menu(menubar)
				menubar.add_cascade(label="File",      
										underline=1, menu=file_menu)
				file_menu.add_command(label="Print",
								command=self.print_callback)
				file_menu.add_command(label="Quit Immediately",
								command=sys.exit)
				# 
				options_menu = Menu(menubar)
				menubar.add_cascade(label="Options",
								underline=0, menu=options_menu)
				options_menu.add_checkbutton(
								label="Create Debugging File",
								variable=self.debug,
								command=self.debug_callback,
								onvalue=1, offvalue=0)
				options_menu.add_separator()
				options_menu.add_radiobutton(
								label = "Level 1",
								variable = self.debug_level,
								value = 1
								)
				options_menu.add_radiobutton(
								label = "Level 2",
								variable = self.debug_level,
								value = 2
								)
				options_menu.add_radiobutton(
								label = "Level 3",
								variable = self.debug_level,
								value = 3
								)

		def __init__(self, master=None):
				Tk.__init__(self, master)
				# bound variables must be IntVar, StrVar, ...
				self.debug = IntVar()
				self.debug.set(0)
				self.debug_level = IntVar()
				self.debug_level.set(1)
				self.createWidgets()

app = Application()
app.mainloop()

# @@PLEAC@@_15.15
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_15.16
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_15.17
# Start Python scripts without the annoying DOS window on win32
# Use extension ".pyw" on files - eg: "foo.pyw" instead of "foo.py"
# Or run programs using "pythonw.exe" rather than "python.exe" 

# @@PLEAC@@_15.18
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_15.19
# @@INCOMPLETE@@
# @@INCOMPLETE@@


# @@PLEAC@@_16.1
import popen2

# other popen methods than popen4 can lead to deadlocks
# if there is much data on stdout and stderr

(err_out, stdin) = popen2.popen4("program args")
lines = err_out.read() # collect output into one multiline string

(err_out, stdin) = popen2.popen4("program args")
lines = err_out.readlines() # collect output into a list, one line per element

#-----------------------------

(err_out, stdin) = popen2.popen4("program args")
output = []
while True:
		line = err_out.readline()
		if not line:
				break
		output.appen(line)
output = ''.join(output)

# @@PLEAC@@_16.2
import os
myfile = "foo.txt"
status = os.system("vi %s" % myfile)

#-----------------------------
import os
os.system("cmd1 args | cmd2 | cmd3 >outfile")
os.system("cmd args <infile >outfile 2>errfile")

status = os.system("%s %s %s" % (program, arg1, arg2))
if status != 0:
		print "%s exited funny: %s" % (program, status)
		raise SystemExit
		

# @@PLEAC@@_16.3
# -----------------------------
import os
import sys
import glob

args = glob.glob("*.data")
try:
		os.execvp("archive", args)
except OSError, e:
		print "Couldn't replace myself with archive: %s" % err
		raise SystemExit

# The error message does not contain the line number like the "die" in
# perl. But if you want to show more information for debugging, you can
# delete the try...except and you get a nice traceback which shows all
# line numbers and filenames.

# -----------------------------
os.execvp("archive", ["accounting.data"])

# @@PLEAC@@_16.4
# -------------------------
# Read from a child process

import sys
import popen2
pipe = popen2.Popen4("program arguments")
pid = pipe.pid
for line in pipe.fromchild.readlines():
		sys.stdout.write(line)

# Popen4 provides stdout and stderr.
# This avoids deadlocks if you get data
# from both streams.
#
# If you don't need the pid, you
# can use popen2.popen4(...)

# -----------------------------
# Write to a child process

import popen2

pipe = popen2.Popen4("gzip > foo.gz")
pid = pipe.pid
pipe.tochild.write("Hello zipped world!\n")
pipe.tochild.close() # programm will get EOF on STDIN

# @@PLEAC@@_16.5
class OutputFilter(object):
		def __init__(self, target, *args, **kwds):
				self.target = target
				self.setup(*args, **kwds)
				self.textbuffer = ""

		def setup(self, *args, **kwds):
				pass
		
		def write(self, data):
				if data.endswith("\n"):
						data = self.process(self.textbuffer + data)
						self.textbuffer = ""
						if data is not None:
								self.target.write(data)
				else:
						self.textbuffer += data

		def process(self, data):
				return data

class HeadFilter(OutputFilter):
		def setup(self, maxcount):
				self.count = 0
				self.maxcount = maxcount

		def process(self, data):
				if self.count < self.maxcount:
						self.count += 1
						return data

class NumberFilter(OutputFilter):
		def setup(self):
				self.count=0

		def process(self, data):
				self.count += 1
				return "%s: %s"%(self.count, data)

class QuoteFilter(OutputFilter):
		def process(self, data):
				return "> " + data

import sys
f = HeadFilter(sys.stdout, 100)
for i in range(130):
		print>>f, i

print

txt = """Welcome to Linux, version 2.0.33 on a i686

"The software required `Windows 95 or better', 
so I installed Linux." """
f1 = NumberFilter(sys.stdout)
f2 = QuoteFilter(f1)
for line in txt.split("\n"):
		print>>f2, line
print
f1 = QuoteFilter(sys.stdout)
f2 = NumberFilter(f1)
for line in txt.split("\n"):
		print>>f2, line


# @@PLEAC@@_16.6
# This script accepts several filenames
# as argument. If the file is zipped, unzip
# it first. Then read each line if the file
import os
import sys
import popen2

for file in sys.argv[1:]:
		if file.endswith(".gz") or file.endswith(".Z"):
				(stdout, stdin) = popen2.popen2("gzip -dc '%s'" % file)
				fd = stdout
		else:
				fd = open(file)
		for line in fd:
				# ....
				sys.stdout.write(line)
		fd.close()
#-----------------------------

#-----------------------------
# Ask for filename and open it
import sys
print "File, please?"
line = sys.stdin.readline()
file = line.strip() # chomp
open(file)

# @@PLEAC@@_16.7
# Execute foo_command and read the output

import popen2
(stdout_err, stdin) = popen2.popen4("foo_command")
for line in stdout_err.readlines():
		# ....

# @@PLEAC@@_16.8
# Open command in a pipe
# which reads from stdin and writes to stdout

import popen2
pipe = popen2.Popen4("wc -l") # Unix command
pipe.tochild.write("line 1\nline 2\nline 3\n")
pipe.tochild.close()
output = pipe.fromchild.read()

# @@PLEAC@@_16.9

# popen3: get stdout and stderr of new process
# Attetion: This can lead to deadlock,
# since the buffer of stderr or stdout might get filled.
# You need to use select if you want to avoid this.

import popen2
(child_stdout, child_stdin, child_stderr) = popen2.popen3(...)

# @@PLEAC@@_16.10
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_16.11
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_16.12
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_16.13
#
# Print available signals and their value
# See "man signal" "man kill" on unix.

import signal
for name in dir(signal):
		if name.startswith("SIG"):
				value = getattr(signal, name)
				print "%s=%s" % (name, value)

# @@PLEAC@@_16.14
# You can send signals to processes
# with os.kill(pid, signal)


# @@PLEAC@@_16.15
import signal

def get_sig_quit(signum, frame):
		....

signal.signal(signal.SIGQUIT, get_sig_quit)   # Install handler

signal.signal(signal.SIGINT, signal.SIG_IGN)  # Ignore this signal
signal.signal(signal.SIGSTOP, signal.SIG_DFL) # Restore to default handling

# @@PLEAC@@_16.16
# Example of handler: User must Enter Name ctrl-c does not help

import sys
import signal

def ding(signum, frame):
		print "\aEnter your name!"
		return

signal.signal(signal.SIGINT, ding)
print "Please enter your name:"

name = ""
while not name:
		try:
				name = sys.stdin.readline().strip()
		except:
				pass

print "Hello: %s" % name

# @@PLEAC@@_16.17
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_16.18
import signal

# ignore signal INT
signal.signal(signal.SIGINT, signal.SIG_IGN)

# Install signal handler
def tsktsk(signum, frame):
		print "..."

signal.signal(signal.SIGINT, tsktsk)

# @@PLEAC@@_16.19
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_16.20
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_16.21
import signal

def handler(signum, frame):
		raise "timeout"

signal.signal(signal.SIGALRM, handler)

try:
		signal.alarm(5) # signal.alarm(3600)

		# long-time operation
		while True:
				print "foo"

		signal.alarm(0)
except:
		signal.alarm(0)
		print "timed out"
else:
		print "no time out"

# @@PLEAC@@_16.22
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_17.0
# Socket Programming (tcp/ip and udp/ip)

import socket

# Convert human readable form to 32 bit value
packed_ip = socket.inet_aton("208.146.240.1")
packed_ip = socket.inet_aton("www.oreilly.com")

# Convert 32 bit value to ip adress
ip_adress = socket.inet_ntoa(packed_ip)

# Create socket object
socketobj = socket(family, type) # Example socket.AF_INT, socket.SOCK_STREAM
			 
# Get socketname
socketobj.getsockname() # Example, get port adress of client

# @@PLEAC@@_17.1

# Example: Connect to a server (tcp)
# Connect to a smtp server at localhost and send an email.
# For real applications you should use smtplib.

import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("localhost", 25)) # SMTP
print s.recv(1024)
s.send("mail from: <pleac@localhost>\n")
print s.recv(1024)
s.send("rcpt to: <guettli@localhost>\n")
print s.recv(1024)
s.send("data\n")
print s.recv(1024)
s.send("From: Python Lover\nSubject: Python is better then perl\n\nYES!\n.\n")
print s.recv(1024)
s.close()

# @@PLEAC@@_17.2

# Create a Server, calling handler for every client
# You can test it with "telnet localhost 1029"

from SocketServer import TCPServer
from SocketServer import BaseRequestHandler

class MyHandler(BaseRequestHandler):
		def handle(self):
				print "I got an request"
				
server = TCPServer(("127.0.0.1", 1029), MyHandler)
server.serve_forever()

# @@PLEAC@@_17.3
# This is the continuation of 17.2

import time
from SocketServer import TCPServer
from SocketServer import BaseRequestHandler

class MyHandler(BaseRequestHandler):
		def handle(self):
				# self.request is the socket object
				print "%s I got an request from ip=%s port=%s" % (
						time.strftime("%Y-%m-%d %H:%M:%S"),
						self.client_address[0],
						self.client_address[1]
						)
				self.request.send("What is your name?\n")
				bufsize=1024
				response=self.request.recv(bufsize).strip() # or recv(bufsize, flags)
				data_to_send="Welcome %s!\n" % response
				self.request.send(data_to_send) # or send(data, flags)
				print "%s connection finnished" % self.client_address[0]
				
server = TCPServer(("127.0.0.1", 1028), MyHandler)
server.serve_forever()

# -----------------
# Using select

import select
import socket

in_list = []
in_list.append(mysocket)
in_list.append(myfile)
# ...

out_list = []
out_list.append(...)

except_list = []
except_list.append(...)

(in_, out_, exc_) = select.select(in_list, out_list, except_list, timeout)

for fd in in_:
		print "Can read", fd
for fd in out_:
		print "Can write", fd
for fd in exc_:
		print "Exception on", fd

# Missing: setting TCP_NODELAY

# @@PLEAC@@_17.4

import socket
# Set up a UDP socket
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# send 
MSG = 'Hello'
HOSTNAME = '127.0.0.1'
PORTNO = 10000
s.connect((HOSTNAME, PORTNO))
if len(MSG) != s.send(MSG):
		# where to get error message "$!".
		print "cannot send to %s(%d):" % (HOSTNAME,PORTNO)
		raise SystemExit(1)
MAXLEN = 1024
(data,addr) = s.recvfrom(MAXLEN)
s.close()
print '%s(%d) said "%s"' % (addr[0],addr[1], data)

# download the following standalone program
#!/usr/bin/python
# clockdrift - compare another system's clock with this one

import socket
import struct
import sys
import time

if len(sys.argv)>1:
		him = sys.argv[1]
else:
		him = '127.1'

SECS_of_70_YEARS = 2208988800

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect((him,socket.getservbyname('time','udp')))
s.send('')
(ptime, src) = s.recvfrom(4)
host = socket.gethostbyaddr(src[0])
delta = struct.unpack("!L", ptime)[0] - SECS_of_70_YEARS - time.time()
print "Clock on %s is %d seconds ahead of this one." % (host[0], delta)



# @@PLEAC@@_17.5

import socket
import sys

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
try:
		s.bind(('', server_port))
except socket.error, err:
		print "Couldn't be a udp server on port %d : %s" % (
						server_port, err)
		raise SystemExit

while True:
		datagram = s.recv(MAX_TO_READ)
		if not datagram:
				break
		# do something
s.close()

# or 
import SocketServer

class handler(SocketServer.DatagramRequestHandler):
		def handle(self):
				# do something (with self.request[0])

s = SocketServer.UDPServer(('',10000), handler)
s.serve_forever()

# download the following standalone program
#!/usr/bin/python
# udpqotd - UDP message server

import SocketServer

PORTNO = 5151

class handler(SocketServer.DatagramRequestHandler):
		def handle(self):
				newmsg = self.rfile.readline().rstrip()
				print "Client %s said ``%s''" % (self.client_address[0], newmsg)
				self.wfile.write(self.server.oldmsg)
				self.server.oldmsg = newmsg

s = SocketServer.UDPServer(('',PORTNO), handler)
print "Awaiting UDP messages on port %d" % PORTNO
s.oldmsg = "This is the starting message."
s.serve_forever()


# download the following standalone program
#!/usr/bin/python
# udpmsg - send a message to the udpquotd server

import socket
import sys

MAXLEN = 1024
PORTNO = 5151
TIMEOUT = 5

server_host = sys.argv[1]
msg = " ".join(sys.argv[2:])

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)
sock.connect((server_host, PORTNO))
sock.send(msg)
try:
		msg = sock.recv(MAXLEN)
		ipaddr, port = sock.getpeername()
		hishost = socket.gethostbyaddr(ipaddr)
		print "Server %s responded ``%s''" % ( hishost[0], msg)
except:
		print "recv from %s failed (timeout or no server running)." % (
						server_host )
sock.close()


# @@PLEAC@@_17.6

import socket
import os, os.path

if os.path.exists("/tmp/mysock"):
		os.remove("/tmp/mysock")
				
server = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
server.bind("/tmp/mysock")

client = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
client.connect("/tmp/mysock")
				
# @@PLEAC@@_17.7

ipaddr, port = s.getpeername()
hostname, aliaslist, ipaddrlist = socket.gethostbyaddr(ipaddr)
ipaddr = socket.gethostbyname('www.python.org')
# '194.109.137.226'
hostname, aliaslist, ipaddrlist = socket.gethostbyname_ex('www.python.org')
# ('fang.python.org', ['www.python.org'], ['194.109.137.226'])
socket.gethostbyname_ex('www.google.org')
# ('www.l.google.com', ['www.google.org', 'www.google.com'], 
#  ['64.233.161.147','64.233.161.104', '64.233.161.99'])

# @@PLEAC@@_17.8

import os

kernel, hostname, release, version, hardware = os.uname()

import socket

address = socket.gethostbyname(hostname)
hostname = socket.gethostbyaddr(address)
hostname, aliaslist, ipaddrlist = socket.gethostbyname_ex(hostname)
# e.g. ('lx3.local', ['lx3', 'b70'], ['192.168.0.13', '192.168.0.70'])

# @@PLEAC@@_17.9

socket.shutdown(0)   # Further receives are disallowed
socket.shutdown(1)   # Further sends are disallowed.
socket.shutdown(2)   # Further sends and receives are disallowed.

#

server.send("my request\n")  # send some data
server.shutdown(1)           # send eof; no more writing
answer = server.recv(1000)   # but you can still read

# @@PLEAC@@_17.10
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_17.11
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_17.12
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_17.13
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_17.14
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_17.15
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_17.16
#------------------------------
# Restart programm on signal SIGHUP
# Script must be executable: chmod a+x foo.py

#!/usr/bin/env python
import os
import sys
import time
import signal

def phoenix(signum, frame):
		print "Restarting myself: %s %s" % (self, args)
		os.execv(self, args)

self = os.path.abspath(sys.argv[0])
args = sys.argv[:]
signal.signal(signal.SIGHUP, phoenix)

while True:
		print "work"
		time.sleep(1)

#--------------------
# Read config file on SIGHUP
import signal

config_file = "/usr/local/etc/myprog/server_conf.py"

def read_config():
		execfile(config_file)

signal.signal(signal.SIGHUP, read_config)

# @@PLEAC@@_17.17

# chroot

import os

try:
		os.chroot("/var/daemon")
except Exception:
		print "Could not chroot"
		raise SystemExit(1)

#-----------------------------
# fork (Unix): Create a new process
# if pid == 0 --> parent process
# else child process

import os

pid = os.fork()
if pid:
		print "I am the new child %s" % pid
		raise SystemExit
else:
		print "I am still the parent"
		

# ----------------------------
# setsid (Unix): Create a new session
import os
id=os.setsid()

# ----------------------------
# Work until INT TERM or HUP signal is received
import time
import signal

time_to_die = 0

def sighandler(signum, frame):
		print "time to die"
		global time_to_die
		time_to_die = 1

signal.signal(signal.SIGINT, sighandler)
signal.signal(signal.SIGTERM, sighandler)
signal.signal(signal.SIGHUP, sighandler)

while not time_to_die:
		print "work"
		time.sleep(1)

# @@PLEAC@@_17.18
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_18.1

import socket
try:
		host_info = socket.gethostbyname_ex(name)
		# (hostname, aliaslist, ipaddrlist)
except socket.gaierror, err:
		print "Can't resolve hostname %s: %s" % (name, err[1])
										
# if you only need the first one
import socket
try:
		address = socket.gethostbyname(name)
except socket.gaierror, err:
		print "Can't resolve hostname %s: %s" % (name, err[1])

# if you have an ip address
try:
		host_info = socket.gethostbyaddr(address)
		# (hostname, aliaslist, ipaddrlist)
except socket.gaierror, err:
		print "Can't resolve address %s: %s" % (address, err[1])
										
# checking back
import socket
try:
		host_info = socket.gethostbyaddr(address)
except socket.gaierror, err:
		print "Can't look up %s: %s" % (address, err[1])
		raise SystemExit(1)
try:
		host_info = socket.gethostbyname_ex(name)
except:
		print "Can't look up %s: %s" % (name, err[1])
		raise SystemExit(1)

found = address in host_info[2]

# use dnspython for more complex jobs.
# download the following standalone program
#!/usr/bin/python
# mxhost - find mx exchangers for a host

import sys

import dns
import dns.resolver

answers = dns.resolver.query(sys.argv[1], 'MX')
for rdata in answers:
		print rdata.preference, rdata.exchange



# download the following standalone program
#!/usr/bin/python
# hostaddrs - canonize name and show addresses

import sys
import socket
name = sys.argv[1]
hent = socket.gethostbyname_ex(name)
print "%s aliases: %s => %s" % (
						hent[0],
						len(hent[1])==0 and "None" or ",".join(hent[1]),
						",".join(hent[2]) )


# @@PLEAC@@_18.2
import ftplib
ftp = ftplib.FTP("ftp.host.com")
ftp.login(username, password)
ftp.cwd(directory)

# get file
outfile = open(filename, "wb")
ftp.retrbinary("RETR %s" % filename, outfile.write)
outfile.close()

# upload file
upfile = open(upfilename, "rb")
ftp.storbinary("STOR %s" % upfilename, upfile)
upfile.close()

ftp.quit()


# @@PLEAC@@_18.3
import smtplib
from email.MIMEText import MIMEText

msg = MIMEText(body)
msg['From'] = from_address
msg['To'] = to_address
msg['Subject'] = subject

mailer = smtplib.SMTP()
mailer.connect()
mailer.sendmail(from_address, [to_address], msg.as_string())

# @@PLEAC@@_18.4
import nntplib

# You can except nntplib.NNTPError to process errors
# instead of displaying traceback.

server = nntplib.NNTP("news.example.com")
response, count, first, last, name = server.group("misc.test")
headers = server.head(first)
bodytext = server.body(first)
article = server.article(first)

f = file("article.txt")
server.post(f)

response, grouplist = server.list()
for group in grouplist:
		name, last, first, flag = group
		if flag == 'y':
				pass  # I can post to group

# @@PLEAC@@_18.5
import poplib

pop = poplib.POP3("mail.example.com")
pop.user(username)
pop.pass_(password)
count, size = pop.stat()
for i in range(1, count+1):
		reponse, message, octets = pop.retr(i)
		# message is a list of lines
		pop.dele(i)

# You must quit, otherwise mailbox remains locked.
pop.quit()

# @@PLEAC@@_18.6

import telnetlib

tn = telnetlib.Telnet(hostname)

tn.read_until("login: ")
tn.write(user + "\n")
tn.read_until("Password: ")
tn.write(password + "\n")
# read the logon message up to the prompt
d = tn.expect([prompt,], 10)
tn.write("ls\n")
files = d[2].split()
print len(files), "files"
tn.write("exit\n")
print tn.read_all() # blocks till eof

# @@PLEAC@@_18.7
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_18.8
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_18.9
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_19.0
# Introduction
#
# There is no standard cgi/web framework in python,
# this is reason for ranting now and then.
#
# See `PyWebOff <http://pyre.third-bit.com/pyweb/index.html>`__
# which compares CherryPy, Quixote, Twisted, WebWare and Zope
# Karrigell and print stantements. 
#
# Then there is Nevow and Standalone ZPT.

# @@PLEAC@@_19.1
# Partial implementation of PLEAC Python section 19.1
# Written by Seo Sanghyeon

# Standard CGI module is where PERL shines. Python
# module, cgi, is nothing but a form parser. So it is
# not really fair to compare these two. But I hesitate
# to introduce any non-standard module. After all,
# which one should I choose?

# I would stick to simple print statements. I believe
# the following is close to how these tasks are usually
# done in Python.

#-----------------------------
#!/usr/bin/env python
# hiweb - using FieldStorage class to get at form data

import cgi
form = cgi.FieldStorage()

# get a value from the form
value = form.getvalue("PARAM_NAME")

# print a standard header
print "Content-Type: text/html"
print

# print a document
print "<P>You typed: <TT>%s</TT></P>" % (
		cgi.escape(value),
		)

#-----------------------------
import cgi
form = cgi.FieldStorage()

who = form.getvalue("Name")
phone = form.getvalue("Number")
picks = form.getvalue("Choices")

# if you want to assure `picks' to be a list
picks = form.getlist("Choices")

#-----------------------------
# Not Implemented

# To implement -EXPIRES => '+3d', I need to study about
import cgi
import datetime

time_format = "%a, %d %b %Y %H:%M:%S %Z"
print "Expires: %s" % (
				(datetime.datetime.now()
				+ datetime.timedelta(+3)).strftime(time_format)
				)
print "Date: %s" % (datetime.datetime.now().strftime(time_format))
print "Content-Type: text/plain; charset=ISO-8859-1"

#-----------------------------
# NOTES

# CGI::param() is a multi-purpose function. Here I want to
# note which Python functions correspond to it.

# PERL version 5.6.1, CGI.pm version 2.80.
# Python version 2.2.3. cgi.py CVS revision 1.68.

# Assume that `form' is the FieldStorage instance.

# param() with zero argument returns parameter names as
# a list. It is `form.keys()' in Python, following Python's
# usual mapping interface.

# param() with one argument returns the value of the named
# parameter. It is `form.getvalue()', but there are some
# twists:

# 1) A single value is passed.
# No problem.

# 2) Multiple values are passed.
# PERL: in LIST context, you get a list. in SCALAR context,
#       you get the first value from the list.
# Python: `form.getvalue()' returns a list if multiple
#         values are passed, a raw value if a single value
#         is passed. With `form.getlist()', you always
#         get a list. (When a single value is passed, you
#         get a list with one element.) With `form.getfirst()',
#         you always get a value. (When multiple values are
#         passed, you get the first one.)

# 3) Parameter name is given, but no value is passed.
# PERL: returns an empty string, not undef. POD says this
#       feature is new in 2.63, and was introduced to avoid
#       "undefined value" warnings when running with the
#       -w switch.
# Python: tricky. If you want black values to be retained,
#         you should pass a nonzero `keep_blank_values' keyword
#         argument. Default is not to retain blanks. In case
#         values are not retained, see below.

# 4) Even parameter name is never mentioned.
# PERL: returns undef.
# Python: returns None, or whatever you passed as the second
#         argument, or `default` keyword argument. This is
#         consistent with `get()' method of the Python mapping
#         interface.

# param() with more than one argument modifies the already
# set form data. This functionality is not available in Python
# cgi module.


# @@PLEAC@@_19.2
# enable() from 'cgitb' module, by default, redirects traceback
# to the browser. It is defined as 'enable(display=True, logdir=None,
# context=5)'.

# equivalent to importing CGI::Carp::fatalsToBrowser.
import cgitb
cgitb.enable()

# to suppress browser output, you should explicitly say so.
import cgitb
cgitb.enable(display=False)

# equivalent to call CGI::Carp::carpout with temporary files.
import cgitb
cgitb.enable(logdir="/var/local/cgi-logs/")

# Python exception, traceback facilities are much richer than PERL's
# die and its friends. You can use your custom exception formatter
# by replacing sys.excepthook. (equivalent to CGI::Carp::set_message.)
# Default formatter is available as traceback.print_exc() in pure
# Python. In fact, what cgitb.enable() does is replacing excepthook
# to cgitb.handler(), which knows how to format exceptions to HTML.

# If this is not enough, (usually this is enough!) Python 2.3 comes
# with a new standard module called 'logging', which is complex, but
# very flexible and entirely customizable.

# @@PLEAC@@_19.3
#
# download the following standalone program
#!/usr/bin/python
# webwhoami - show web users id
import getpass
print "Content-Type: text/plain\n"
print "Running as %s\n" % getpass.getuser()



# STDOUT/ERR flushing
#
# In contrast to what the perl cookbook says, modpython.org tells
# STDERR is buffered too.

# @@PLEAC@@_19.4
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_19.5

# use mod_python in the Apache web server.

# Load the module in httpd.conf or apache.conf

LoadModule python_module libexec/mod_python.so

<Directory /some/directory/htdocs/test>
		AddHandler mod_python .py
		PythonHandler mptest
		PythonDebug On
</Directory>

# test.py file in /some/directory/htdocs/test
from mod_python import apache

def handler(req):
		req.write("Hello World!")
		return apache.OK

# @@PLEAC@@_19.6

import os
os.system("command %s %s" % (input, " ".join(files))) # UNSAFE

# python doc lib cgi-security it says
#
# To be on the safe side, if you must pass a string gotten from a form to a shell
# command, you should make sure the string contains only alphanumeric characters, dashes,
# underscores, and periods.
import re
cmd = "command %s %s" % (input, " ".join(files))
if re.search(r"[^a-zA-Z0-9._\-]", cmd):
		print "rejected"
		sys.exit(1)
os.system(cmd)
trans = string.maketrans(string.ascii_letters+string.digits+"-_.",

# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_19.7
#-----------------------------
# This uses nevow's (http://nevow.com) stan; there's no standard
# way to generate HTML, though there are many implementations of
# this basic idea.
from nevow import tags as T
print T.ol[T.li['red'], T.li['blue'], T.li['green']]
# <ol><li>red</li><li>blue</li><li>green</li></ol>

names = 'Larry Moe Curly'.split()
print T.ul[ [T.li(type="disc")[name] for name in names] ]
# <ul><li type="disc">Larry</li><li type="disc">Moe</li>
#     <li type="disc">Curly</li></ul>
#-----------------------------
print T.li["alpha"]
#     <li>alpha</li>

print T.li['alpha'], T.li['omega']
#     <li>alpha</li> <li>omega</li>
#-----------------------------
states = {
		"Wisconsin":  [ "Superior", "Lake Geneva", "Madison" ],
		"Colorado":   [ "Denver", "Fort Collins", "Boulder" ],
		"Texas":      [ "Plano", "Austin", "Fort Stockton" ],
		"California": [ "Sebastopol", "Santa Rosa", "Berkeley" ],
}

print "<TABLE> <CAPTION>Cities I Have Known</CAPTION>";
print T.tr[T.th('State'), T.th('Cities')]
for k in sorted(states.keys()):
		print T.tr[ [T.th(k)] + [T.td(city) for city in sorted(states[k])] ]
print "</TABLE>";
#-----------------------------
# <TABLE> <CAPTION>Cities I Have Known</CAPTION>
#
#     <TR><TH>State</TH> <TH>Cities</TH></TR>
#
#     <TR><TH>California</TH> <TD>Berkeley</TD> <TD>Santa Rosa</TD>
#
#         <TD>Sebastopol</TD> </TR>
#
#     <TR><TH>Colorado</TH> <TD>Boulder</TD> <TD>Denver</TD>
#
#         <TD>Fort Collins</TD> </TR>
#
#     <TR><TH>Texas</TH> <TD>Austin</TD> <TD>Fort Stockton</TD>
#
#         <TD>Plano</TD></TR>
#
#     <TR><TH>Wisconsin</TH> <TD>Lake Geneva</TD> <TD>Madison</TD>
#
#         <TD>Superior</TD></TR>
#
# </TABLE>
#-----------------------------
print T.table[
				[T.caption['Cities I have Known'],
				 T.tr[T.th['State'], T.th['Cities']] ] +
				[T.tr[ [T.th(k)] + [T.td(city) for city in sorted(states[k])]]
				 for k in sorted(states.keys())]]
#-----------------------------
# salcheck - check for salaries
import MySQLdb
import cgi

form = cgi.FieldStorage()

if 'limit' in form:
		limit = int(form['limit'].value)
else:
		limit = ''

# There's not a good way to start an HTML/XML construct with stan
# without completing it.
print '<html><head><title>Salary Query</title></head><body>'
print T.h1['Search']
print '<form>'
print T.p['Enter minimum salary',
					T.input(type="text", name="limit", value=limit)]
print T.input(type="submit")
print '</form>'

if limit:
		dbconn = MySQLdb.connect(db='somedb', host='server.host.dom',
														 port=3306, user='username',
														 passwd='password')
		cursor = dbconn.cursor()
		cursor.execute("""
		SELECT name, salary FROM employees
		WHERE salary > %s""", (limit,))

		print T.h1["Results"]
		print "<TABLE BORDER=1>"

		for row in cursor.fetchall():
				print T.tr[ [T.td(cell) for cell in row] ]

		print "</TABLE>\n";
		cursor.close()
		dbconn.close()

print '</body></html>'
#-----------------------------

# @@PLEAC@@_19.8
#-----------------------------
url = "http://python.org/pypi"
print "Location: %s\n" % url
raise SystemExit
#-----------------------------
# oreobounce - set a cookie and redirect the browser
import Cookie
import time

c = Cookie.SimpleCookie()
c['filling'] = 'vanilla cr?me'
now = time.time()
future = now + 3*(60*60*24*30) # 3 months
expire_date = time.strftime('%a %d %b %Y %H:%M:%S GMT', future)
c['filling']['expires'] = expire_date
c['filling']['domain'] = '.python.org'

whither  = "http://somewhere.python.org/nonesuch.html"

# Prints the cookie header
print 'Status: 302 Moved Temporarily'
print c
print 'Location:', whither
print

#-----------------------------
#Status: 302 Moved Temporarily
#Set-Cookie: filling=vanilla%20cr%E4me; domain=.perl.com;
#    expires=Tue, 21-Jul-1998 11:58:55 GMT
#Location: http://somewhere.perl.com/nonesuch.html
#-----------------------------
# os_snipe - redirect to a Jargon File entry about current OS
import os, re
dir = 'http://www.wins.uva.nl/%7Emes/jargon'
matches = [
		(r'Mac', 'm/Macintrash.html'),
		(r'Win(dows )?NT', 'e/evilandrude.html'),
		(r'Win|MSIE|WebTV', 'm/MicroslothWindows.html'),
		(r'Linux', 'l/Linux.html'),
		(r'HP-UX', 'h/HP-SUX.html'),
		(r'SunOS', 's/ScumOS.html'),
		(None, 'a/AppendixB.html'),
		]

for regex, page in matches:
		if not regex: # default
				break
		if re.search(regex, os.environ['HTTP_USER_AGENT']):
				break
print 'Location: %s/%s\n' % (dir, page)
#-----------------------------
# There's no special way to print headers
print 'Status: 204 No response'
print
#-----------------------------
#Status: 204 No response
#-----------------------------

# @@PLEAC@@_19.9
# download the following standalone program
#!/usr/bin/python
# dummyhttpd - start a HTTP daemon and print what the client sends

import SocketServer
# or use BaseHTTPServer, SimpleHTTPServer, CGIHTTPServer

def adr_str(adr):
		return "%s:%d" % adr

class RequestHandler(SocketServer.BaseRequestHandler):
		def handle(self):
				print "client access from %s" % adr_str(self.client_address)
				print self.request.recv(10000)
				self.request.send("Content-Type: text/plain\n"
													"Server: dymmyhttpd/1.0.0\n"
													"\n...\n")
				self.request.close()


adr = ('127.0.0.1', 8001)
print "Please contact me at <http://%s>" % adr_str(adr)
server = SocketServer.TCPServer(adr, RequestHandler)
server.serve_forever()
server.server_close()


# @@PLEAC@@_19.10

import Cookie
cookies = Cookie.SimpleCookie()
# SimpleCookie is more secure, but does not support all characters.
cookies["preference-name"] = "whatever you'd like" 
print cookies

# download the following standalone program
#!/usr/bin/python
# ic_cookies - sample CGI script that uses a cookie

import cgi
import os
import Cookie
import datetime

cookname = "favorite-ice-cream"  # SimpleCookie does not support blanks
fieldname = "flavor"

cookies = Cookie.SimpleCookie(os.environ.get("HTTP_COOKIE",""))
if cookies.has_key(cookname):
		favorite = cookies[cookname].value
else:
		favorite = "mint"

form = cgi.FieldStorage()
if not form.has_key(fieldname):
		print "Content-Type: text/html"
		print "\n"
		print "<html><body>"
		print "<h1>Hello Ice Cream</h1>"
		print "<form>"
		print 'Please select a flavor: <input type="text" name="%s" value="%s" />' % (
						fieldname, favorite )
		print "</form>"
		print "<hr />"
		print "</body></html>"
else:
		favorite = form[fieldname].value
		cookies[cookname] = favorite
		expire = datetime.datetime.now() + datetime.timedelta(730)
		cookies[cookname]["expires"] = expire.strftime("%a, %d %b %Y %H:00:00 GMT")
		cookies[cookname]["path"] = "/"
		print "Content-Type: text/html"
		print cookies
		print "\n"
		print "<html><body>"
		print "<h1>Hello Ice Cream</h1>"
		print "<p>You chose as your favorite flavor \"%s\"</p>" % favorite
		print "</body></html>"


# @@PLEAC@@_19.11
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_19.12
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_19.13
#-----------------------------
# first open and exclusively lock the file
import os, cgi, fcntl, cPickle
fh = open('/tmp/formlog', 'ab')
fcntl.flock(fh.fileno(), fcntl.LOCK_EX)

form = cgi.FieldStorage()
# This doesn't produce a readable file; we copy the environment so
# that we save a plain dictionary (os.environ is a dictionary-like
# object).
cPickle.dump((form, os.environ.copy()) fh)
fh.close()
#-----------------------------
import cgi, smtplib, sys

form = cgi.FieldStorage()
email = """\
From: %S
To: hisname@hishost.com
Subject: mailed form submission

""" % sys.argv[0]

for key in form:
		values = form[key]
		if not isinstance(values, list):
				value = [values.value]
		else:
				value = [v.value for v in values]
		for item in values:
				email += '\n%s: %s' % (key, value)

server = smtplib.SMTP('localhost')
server.sendmail(sys.argv[0], ['hisname@hishost.com'], email)
server.quit()
#-----------------------------
# @@INCOMPLETE@@ I don't get the point of these:
# param("_timestamp", scalar localtime);
# param("_environs", %ENV);
#-----------------------------
import fcntl, cPickle
fh = open('/tmp/formlog', 'rb')
fcntl.flock(fh.fileno(), fcntl.LOCK_SH)

count = 0
while True:
		try:
				form, environ = cPickle.load(fh)
		except EOFError:
				break
		if environ.get('REMOTE_HOST').endswith('perl.com'):
				continue
		if 'items requested' in form:
				count += int(form['items requested'].value)
print 'Total orders:', count
#-----------------------------

# @@PLEAC@@_19.14
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_20.1
#-----------------------------
import urllib
content = urllib.urlopen(url).read()

try:
		import urllib
		content = urllib.urlopen(url).read()
except IOError:
		print "could not get %s" % url

#-----------------------------
# download the following standalone program
#!/usr/bin/python
# titlebytes - find the title and size of documents
#
# differences to perl
# 
# * no URI::Heuristics
# * perl LWP supports fetching files from local system
# * fetching a title from ftp or file doesnt work in perl either.

import sys, urllib2, HTMLParser
if len(sys.argv)<=1:
		print "usage: %s url" % sys.argv[0]
		sys.exit(1)
raw_url = sys.argv[1] 

# python has no equivalent to pearls URI::Heuristics, which
# would do some guessing like :
#
#   perl            -> http://www.perl.com
#   www.oreilly.com -> http://www.oreilly.com
#   ftp.funet.fi    -> ftp://ftp.funet.fi
#   /etc/passwd     -> file:/etc/passwd

# simple but pedantic html parser: tpj.com breaks it.
class html(HTMLParser.HTMLParser):
		def __init__(self):
				HTMLParser.HTMLParser.__init__(self)
				self._data = {}
				self._open_tags = []
		def handle_starttag(self, tag, attrs):
				self._open_tags.append(tag)
		def handle_endtag(self, tag):
				if len(self._open_tags)>0:
						self._open_tags.pop()
		def handle_data(self, data):
				if len(self._open_tags)>0:
						self._data[self._open_tags[-1]] = data
		def __getattr__(self,attr):
				if not self._data.has_key(attr):
						return ""
				return self._data[attr]

url = raw_url
print "%s =>\n\t" % url,
# TODO fake user agent "Schmozilla/v9.17 Platinum"
# TODO referer "http://wizard.yellowbrick.oz"
# as we only do http httplib would do also
try:
				response = urllib2.urlopen(url)
except:
				print " %s" % sys.exc_info()[1].reason[1]
				sys.exit(1)
# title is not in response
data = response.read()
parser = html()
parser.feed(data)
parser.close()  # force processing all data
count = len(data.split("\n"))
bytes = len(data)
print "%s (%d lines, %d bytes)" % (parser.title, 
				count, 
				bytes)

# omly bytes is in response.info()


# @@PLEAC@@_20.2

# GET method
import httplib
conn = httplib.HTTPConnection('www.perl.com')
conn.request('GET','/cgi-bin/cpan_mod?module=DB_File&readme=1')
r1 = conn.getresponse()
content = r1.read()

# POST method
import urllib
params = urllib.urlencode({'module': 'DB_File', 'readme': 1})
content = urllib.urlopen('http://www.perl.com', params).read()

# fields must be properly escaped
# script.cgi?field1?arg=%22this%20isn%27t%20%3CEASY%3E%22

# proxies can be taken from environment, or specified
# as the optional thrid parameter to urlopen.

# @@PLEAC@@_20.3
# download the following standalone program
#!/usr/bin/python
# xurl - extract unique, sorted list of links from URL

from HTMLParser import HTMLParser
import urllib
from sets import Set as set # not needed in 2.4
class myParser(HTMLParser):
		def __init__(self, url):
				self.baseUrl = url[:url.rfind('/')]
				HTMLParser.__init__(self)
		def reset(self):
				self.urls = set()
				HTMLParser.reset(self)
		def handle_starttag(self, tag, attrs):
				if tag == 'a':
						if attrs[0][0] == 'href':
								if attrs[0][1].find(':') == -1:
										# we need to add the base URL.
										self.urls.add(self.baseUrl + '/' + attrs[0][1])
								else:
										self.urls.add(attrs[0][1])
url = 'http://www.perl.com/CPAN'
p = myParser(url)
s = urllib.urlopen(url)
data = s.read()
p.feed(data)
urllist = p.urls._data.keys()
urllist.sort()
print '\n'.join(urllist)



# @@PLEAC@@_20.4
# Converting ASCII to HTML

# download the following standalone program
#!/usr/bin/python
# text2html - trivial html encoding of normal text

import sys
import re

# precompile regular expressions
re_quoted = re.compile(r"(?m)^(>.*?)$")
re_url = re.compile(r"<URL:(.*)>")
re_http = re.compile(r"(http:\S+)")
re_strong = re.compile(r"\*(\S+)\*")
re_em = re.compile(r"\b_(\S+)_\b")

# split paragraphs
for para in open(sys.argv[1]).read().split("\n\n"):
		# TODO encode entities: dont encode "<>" but do "&"
		if para.startswith(" "):
				print "<pre>\n%s\n</pre>" % para
		else:
				para = re_quoted.sub(r"\1<br />", para)          # quoted text
				para = re_url.sub(r'<a href="\1">\1</a>', para)  # embedded URL
				para = re_http.sub(r'<a href="\1">\1</a>', para) # guessed URL
				para = re_strong.sub(r"<strong>\1</strong>",para)   # this is *bold* here
				para = re_em.sub(r"<em>\1</em>",para)            # this is _italic_ here
				print "<p>\n%s\n</p>" % para                     # add paragraph tags



#-----------------------------
import sys, re
import htmlentitydefs

def encode_entities(s):
		for k,v in htmlentitydefs.codepoint2name.items():
				if k<256: # no unicodes
						s = s.replace(chr(k),"&%s;"%v)
		return s

print "<table>"
text = sys.stdin.read()
text = encode_entities(text)
text = re.sub(r"(\n[ \t]+)"," . ",text)   # continuation lines
text = re.sub(r"(?m)^(\S+?:)\s*(.*?)$",
							r'<tr><th align="left">\1</th><td>\2</td></tr>',
														text);
print text    
print "</table>"
														
# @@PLEAC@@_20.5
# Converting HTML to ASCII

#-----------------------------
import os
ascii = os.popen("lynx -dump " + filename).read()

#-----------------------------
import formatter
import htmllib

w = formatter.DumbWriter()
f = formatter.AbstractFormatter(w)
p = htmllib.HTMLParser(f)
p.feed(html)
p.close()

# Above is a bare minimum to use writer/formatter/parser
# framework of Python.

# Search Python Cookbook for more details, like writing
# your own writers or formatters.

# Recipe #52297 has TtyFormatter, formatting underline
# and bold in Terminal. Recipe #135005 has a writer
# accumulating text instead of printing.

# @@PLEAC@@_20.6

import re

plain_text = re.sub(r"<[^>]*>","",html_text) #WRONG

# using HTMLParser
import sys, HTMLParser

class html(HTMLParser.HTMLParser):
		def __init__(self):
				HTMLParser.HTMLParser.__init__(self)
				self._plaintext = ""
				self._ignore = False
		def handle_starttag(self, tag, attrs):
				if tag == "script":
						self._ignore = True
		def handle_endtag(self, tag):
				if tag == "script":
						self._ignore = False
		def handle_data(self, data):
				if len(data)>0 and not self._ignore:
						self._plaintext += data
		def get_plaintext(self):
				return self._plaintext
		def error(self,msg):
				# ignore all errors
				pass

html_text = open(sys.argv[1]).read()

parser = html()
parser.feed(html_text)
parser.close()  # force processing all data
print parser.get_plaintext()

title_s = re.search(r"(?i)<title>\s*(.*?)\s*</title>", text)
title = title_s and title_s.groups()[0] or "NO TITLE"

# download the following standalone program
#!/usr/bin/python
# htitlebytes - get html title from URL
#

import sys, urllib2, HTMLParser
if len(sys.argv)<=1:
		print "usage: %s url ..." % sys.argv[0]
		sys.exit(1)

# simple but pedantic html parser: tpj.com breaks it.
class html(HTMLParser.HTMLParser):
		def __init__(self):
				HTMLParser.HTMLParser.__init__(self)
				self._data = {}
				self._open_tags = []
		def handle_starttag(self, tag, attrs):
				self._open_tags.append(tag)
		def handle_endtag(self, tag):
				if len(self._open_tags)>0:
						self._open_tags.pop()
		def handle_data(self, data):
				if len(self._open_tags)>0:
						self._data[self._open_tags[-1]] = data
		def __getattr__(self,attr):
				if not self._data.has_key(attr):
						return ""
				return self._data[attr]
		def error(self,msg):
				# ignore all errors
				pass

for url in sys.argv[1:]:
		print "%s: " % url,
		# TODO fake user agent "Schmozilla/v9.17 Platinum"
		# TODO referer "http://wizard.yellowbrick.oz"
		# as we only do http httplib would do also
		try:
				response = urllib2.urlopen(url)
		except:
				print " %s" % sys.exc_info()[1]
				sys.exit(1)
		# title is not in response
		parser = html()
		parser.feed(response.read())
		parser.close()  # force processing all data
		print parser.title 



# @@PLEAC@@_20.7
# download the following standalone program
#!/usr/bin/python
# churl - check urls

import sys

# head request
import urllib
def valid(url):
		try:
				conn = urllib.urlopen(url)
				return 1
		except:
				return 0

# parser class as in xurl
from HTMLParser import HTMLParser
from sets import Set as set # not needed in 2.4
class myParser(HTMLParser):
		def __init__(self, url):
				self.baseUrl = url[:url.rfind('/')]
				HTMLParser.__init__(self)
		def reset(self):
				self.urls = set()
				HTMLParser.reset(self)
		def handle_starttag(self, tag, attrs):
				if tag == 'a':
						if attrs[0][0] == 'href':
								if attrs[0][1].find(':') == -1:
										# we need to add the base URL.
										self.urls.add(self.baseUrl + '/' + attrs[0][1])
								else:
										self.urls.add(attrs[0][1])

if len(sys.argv)<=1:
		print "usage: %s <start_url>" % (sys.argv[0])
		sys.exit(1)
		
base_url = sys.argv[1]
print base_url+":"
p = myParser(base_url)
s = urllib.urlopen(base_url)
data = s.read()
p.feed(data)
for link in p.urls._data.keys():
		state = "UNKNOWN URL"
		if link.startswith("http:"):
				state = "BAD"
				if valid(link):
						state = "OK"
		print "  %s: %s" % (link, state)



# @@PLEAC@@_20.8
# download the following standalone program
#!/usr/bin/python
# surl - sort URLs by their last modification date

import urllib
import time
import sys

Date = {}
while 1:
		# we only read from stdin not from argv.
		ln = sys.stdin.readline()
		if not ln:
				break
		ln = ln.strip()
		try:
				u = urllib.urlopen(ln)
				date = time.mktime(u.info().getdate("date"))
				if not Date.has_key(date):
						Date[date] = []
				Date[date].append(ln)
		except:
				sys.stderr.write("%s: %s!\n" % (ln, sys.exc_info()[1]))

dates = Date.keys()
dates.sort()    # python 2.4 would have sorted
for d in dates:
		print "%s  %s" % (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(d)),
										", ".join(Date[d]))


# @@PLEAC@@_20.9
import re

def template(filename, fillings):
		text = open(filename).read()
		def repl(matchobj):
				if fillings.has_key(matchobj.group(1)):
						return str(fillings[matchobj.group(1)])
				return ""
		# replace quoted words with value from fillings dictionary
		text = re.sub("%%(.+?)%%", repl, text)
		return text

fields = { "username":"peter", "count":"23", "total": "1234"}
print template("/home/httpd/templates/simple.template", fields)

# download the following standalone program
#!/usr/bin/python
# userrep1 - report duration of user logins using SQL database

import MySQLdb
import cgi
import re
import sys

def template(filename, fillings):
		text = open(filename).read()
		def repl(matchobj):
				if fillings.has_key(matchobj.group(1)):
						return str(fillings[matchobj.group(1)])
				return ""
		# replace quoted words with value from fillings dictionary
		text = re.sub("%%(.+?)%%", repl, text)
		return text

fields = cgi.FieldStorage()
if not fields.has_key("user"):
		print "Content-Type: text/plain\n"
		print "No username"
		sys.exit(1)

def get_userdata(username):
		db = MySQLdb.connect(passwd="",db="connections", user="bert")
		db.query("select count(duration) as count,"
						+" sum(duration) as total from logins"
						+" where username='%s'" % username)
		res = db.store_result().fetch_row(maxrows=1,how=1)
		res[0]["username"] = username
		db.close()
		return res[0]
												
print "Content-Type: text/html\n"

print template("report.tpl", get_userdata(fields["user"].value))

# @@INCOMPLETE@@

# @@PLEAC@@_20.10
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_20.11
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_20.12

# sample data, use ``LOGFILE = open(sys.argv[1])`` in real life
LOGFILE = [
				'127.0.0.1 - - [04/Sep/2005:20:50:31 +0200] "GET /bus HTTP/1.1" 301 303\n',
				'127.0.0.1 - - [04/Sep/2005:20:50:31 +0200] "GET /bus HTTP/1.1" 301 303 "-" "Opera/8.02 (X11; Linux i686; U; en)"\n',
				'192.168.0.1 - - [04/Sep/2005:20:50:36 +0200] "GET /bus/libjs/layersmenu-library.js HTTP/1.1" 200 6228\n',
				'192.168.0.1 - - [04/Sep/2005:20:50:36 +0200] "GET /bus/libjs/layersmenu-library.js HTTP/1.1" 200 6228 "http://localhost/bus/" "Opera/8.02 (X11; Linux i686; U; en)"\n',
		]

import re

# similar too perl version.
web_server_log_re = re.compile(r'^(\S+) (\S+) (\S+) \[([^:]+):(\d+:\d+:\d+) ([^\]]+)\] "(\S+) (.*?) (\S+)" (\S+) (\S+)$')
		
# with group naming.
split_re = re.compile(r'''(?x)         # allow nicer formatting (but requires escaping blanks)
											 ^(?P<client>\S+)\s
											 (?P<identuser>\S+)\s
											 (?P<authuser>\S+)\s
											 \[
												 (?P<date>[^:]+):
												 (?P<time>[\d:]+)\s
												 (?P<tz>[^\]]+)
											 \]\s
											 "
												 (?P<method>\S+)\s
												 (?P<url>.*?)\s
												 (?P<protocol>\S+)
											 "\s
											 (?P<status>\S+)\s
											 (?P<bytes>\S+)
											 (?:
												 \s
												 "
													 (?P<referrer>[^"]+)
												 "\s
												 "
													 (?P<agent>[^"]+)
												 "
											 )?''')
for line in LOGFILE:
		f = split_re.match(line)
		if f:
				print "agent = %s" % f.groupdict()['agent']

# @@PLEAC@@_20.13
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_20.14
# @@INCOMPLETE@@
# @@INCOMPLETE@@

[end]

[Php]
[start]
// # -*- php -*-
// # The examples are taken from the Perl Cookbook
// # By Tom Christiansen & Nathan Torkington
// # see http://www.oreilly.com/catalog/cookbook for more

# @@PLEAC@@_NAME
# @@SKIP@@ PHP

# @@PLEAC@@_WEB
# @@SKIP@@ http://php.net/

# @@PLEAC@@_1.0
#-----------------------------
$string = '\n';                     # two characters, \ and an n
$string = 'Jon \'Maddog\' Orwant';  # literal single quotes
$string = 'Jon "Maddog" Orwant';    # literal double quotes
#-----------------------------
$string = "\n";                     # a "newline" character
$string = "Jon \"Maddog\" Orwant";  # literal double quotes
$string = "Jon 'Maddog' Orwant";    # literal single quotes
#-----------------------------
$a = 
"This is a multiline
here document";

$a = <<<EOF
This is a multiline here document
terminated by EOF on a line by itself
EOF;
#-----------------------------

# @@PLEAC@@_1.1
#-----------------------------
$value = substr($string, $offset, $count);
$value = substr($string, $offset);

$string = substr_replace($string, $newstring, $offset, $count);
$string = substr_replace($string, $newtail, $offset);
#-----------------------------
# get a 5-byte string, skip 3, then grab 2 8-byte strings, then the rest
list($leading, $s1, $s2, $trailing) =
		array_values(unpack("A5a/x3/A8b/A8c/A*d", $data);

# split at five byte boundaries
preg_match_all ("/.{5}/", $data, $f, PREG_PATTERN_ORDER);
$fivers = $f[0];

# chop string into individual characters
$chars  = $string;
#-----------------------------
$string = "This is what you have";
#         +012345678901234567890  Indexing forwards  (left to right)
#          109876543210987654321- Indexing backwards (right to left)
#           note that 0 means 10 or 20, etc. above

$first  = substr($string, 0, 1);  # "T"
$start  = substr($string, 5, 2);  # "is"
$rest   = substr($string, 13);    # "you have"
$last   = substr($string, -1);    # "e"
$end    = substr($string, -4);    # "have"
$piece  = substr($string, -8, 3); # "you"
#-----------------------------
$string = "This is what you have";
print $string;
#This is what you have

$string = substr_replace($string, "wasn't", 5, 2);  # change "is" to "wasn't"
#This wasn't what you have

$string = substr_replace($string, "ondrous", -12);  # "This wasn't wondrous"
#This wasn't wondrous

$string = substr_replace($string, "", 0, 1);        # delete first character
#his wasn't wondrous

$string = substr_replace($string, "", -10);         # delete last 10 characters
#his wasn'
#-----------------------------
if (preg_match("/pattern/", substr($string, -10)) {
		print "Pattern matches in last 10 characters\n";
}

# substitute "at" for "is", restricted to first five characters
$string=(substr_replace(preg_replace("/is/", "at", substr($string,0,5)),0,5);
#-----------------------------
# exchange the first and last letters in a string
$a = "make a hat";
list($a[0], $a[strlen($a)-1]) = Array(substr($a,-1), substr($a,0,1));
print $a;

#-----------------------------
# extract column with unpack
$a = "To be or not to be";
$b = unpack("x6/A6a", $a);  # skip 6, grab 6
print $b['a'];


$b = unpack("x6/A2b/X5/A2c", $a); # forward 6, grab 2; backward 5, grab 2
print $b['b']."\n".$b['c']."\n";

#-----------------------------
function cut2fmt() {
		$positions = func_get_args();
		$template  = '';
		$lastpos   = 1;
		foreach($positions as $place) {
				$template .= "A" . ($place - $lastpos) . " ";
				$lastpos   = $place;
		}
		$template .= "A*";
		return $template;
}

$fmt = cut2fmt(8, 14, 20, 26, 30);
print "$fmt\n";
#A7 A6 A6 A6 A4 A*
#-----------------------------

# @@PLEAC@@_1.2
#-----------------------------
# use $b if $b is true, else $c
$a = $b?$b:$c;

# set $x to $y unless $x is already true
$x || $x=$y;
#-----------------------------
# use $b if $b is defined, else $c
$a = defined($b) ? $b : $c;
#-----------------------------
$foo = $bar || $foo = "DEFAULT VALUE";
#-----------------------------
$dir = array_shift($_SERVER['argv']) || $dir = "/tmp";
#-----------------------------
$dir = $_SERVER['argv'][0] || $dir = "/tmp";
#-----------------------------
$dir = defined($_SERVER['argv'][0]) ? array_shift($_SERVER['argv']) : "/tmp";
#-----------------------------
$dir = count($_SERVER['argv']) ? $_SERVER['argv'][0] : "/tmp";
#-----------------------------
$count[$shell?$shell:"/bin/sh"]++;
#-----------------------------
# find the user name on Unix systems
$user = $_ENV['USER']
		 || $user = $_ENV['LOGNAME']
		 || $user = posix_getlogin()
		 || $user = posix_getpwuid(posix_getuid())[0]
		 || $user = "Unknown uid number $<";
#-----------------------------
$starting_point || $starting_point = "Greenwich";
#-----------------------------
count($a) || $a = $b;          # copy only if empty
$a = count($b) ? $b : $c;          # assign @b if nonempty, else @c
#-----------------------------

# @@PLEAC@@_1.3
#-----------------------------
list($VAR1, $VAR2) = array($VAR2, $VAR1);
#-----------------------------
$temp    = $a;
$a       = $b;
$b       = $temp;
#-----------------------------
$a       = "alpha";
$b       = "omega";
list($a, $b) = array($b, $a);        # the first shall be last -- and versa vice
#-----------------------------
list($alpha, $beta, $production) = Array("January","March","August");
# move beta       to alpha,
# move production to beta,
# move alpha      to production
list($alpha, $beta, $production) = array($beta, $production, $alpha);
#-----------------------------

# @@PLEAC@@_1.4
#-----------------------------
$num  = ord($char);
$char = chr($num);
#-----------------------------
$char = sprintf("%c", $num);                # slower than chr($num)
printf("Number %d is character %c\n", $num, $num);
#-----------------------------
$ASCII = unpack("C*", $string);
eval('$STRING = pack("C*", '.implode(',',$ASCII).');');
#-----------------------------
$ascii_value = ord("e");    # now 101
$character   = chr(101);    # now "e"
#-----------------------------
printf("Number %d is character %c\n", 101, 101);
#-----------------------------
$ascii_character_numbers = unpack("C*", "sample");
print explode(" ",$ascii_character_numbers)."\n";

eval('$word = pack("C*", '.implode(',',$ascii_character_numbers).');');
$word = pack("C*", 115, 97, 109, 112, 108, 101);   # same
print "$word\n";
#-----------------------------
$hal = "HAL";
$ascii = unpack("C*", $hal);
foreach ($ascii as $val) {
		$val++;                 # add one to each ASCII value
}
eval('$ibm = pack("C*", '.implode(',',$ascii).');');
print "$ibm\n";             # prints "IBM"
#-----------------------------

# @@PLEAC@@_1.5
#-----------------------------
// using perl regexp
$array = preg_split('//', $string ,-1, PREG_SPLIT_NO_EMPTY);
// using PHP function: $array = str_split($string);

// Cannot use unpack with a format of 'U*' in PHP.
#-----------------------------
for ($offset = 0; preg_match('/(.)/', $string, $matches, 0, $offset) > 0; $offset++) {
		// $matches[1] has charcter, ord($matches[1]) its number
}
#-----------------------------
$seen = array();
$string = "an apple a day";
foreach (str_split($string) as $char) {
		$seen[$char] = 1;
}
$keys = array_keys($seen);
sort($keys);
print "unique chars are: " . implode('', $keys)) . "\n";
unique chars are:  adelnpy
#-----------------------------
$seen = array();
$string = "an apple a day";
for ($offset = 0; preg_match('/(.)/', $string, $matches, 0, $offset) > 0; $offset++) {
		$seen[$matches[1]] = 1;
}
$keys = array_keys($seen);
sort($keys);
print "unique chars are: " . implode('', $keys) . "\n";
unique chars are:  adelnpy
#-----------------------------
$sum = 0;
foreach (unpack("C*", $string) as $byteval) {
		$sum += $byteval;
}
print "sum is $sum\n";
// prints "1248" if $string was "an apple a day"
#-----------------------------
$sum = array_sum(unpack("C*", $string));
#-----------------------------

// sum - compute 16-bit checksum of all input files
$handle = @fopen($argv[1], 'r');
$checksum = 0;
while (!feof($handle)) {
		$checksum += (array_sum(unpack("C*", fgets($handle))));
}
$checksum %= pow(2,16) - 1;
print "$checksum\n";

# download the following standalone program
#!/usr/bin/php
<?php
// slowcat - emulate a   s l o w   line printer

// usage: php slowcat.php [-DELAY] file

$delay = 1;
if (preg_match('/(.)/', $argv[1], $matches)) {
		$delay = $matches[1];
		array_shift($argv);
};
$handle = @fopen($argv[1], 'r');
while (!feof($handle)) {
		foreach (str_split(fgets($handle)) as $char) {
				print $char;
				usleep(5000 * $delay);
		}
}
#-----------------------------

# @@PLEAC@@_1.6
#-----------------------------
$revchars = strrev($string);
#-----------------------------
$revwords = implode(" ", array_reverse(explode(" ", $string)));
#-----------------------------
// reverse word order
$string = 'Yoda said, "can you see this?"';
$allwords    = explode(" ", $string);
$revwords    = implode(" ", array_reverse($allwords));
print $revwords . "\n";
this?" see you "can said, Yoda
#-----------------------------
$revwords = implode(" ", array_reverse(explode(" ", $string)));
#-----------------------------
$revwords = implode(" ", array_reverse(preg_split("/(\s+)/", $string)));
#-----------------------------
$word = "reviver";
$is_palindrome = ($word === strrev($word));
#-----------------------------
// quite a one-liner since "php" does not have a -n switch
% php -r 'while (!feof(STDIN)) { $word = rtrim(fgets(STDIN)); if ($word == strrev($word) && strlen($word) > 5) print $word; }' < /usr/dict/words
#-----------------------------

# @@PLEAC@@_1.8
#-----------------------------
$text = preg_replace('/\$(\w+)/e', '$$1', $text);
#-----------------------------
list($rows, $cols) = Array(24, 80);
$text = 'I am $rows high and $cols long';
$text = preg_replace('/\$(\w+)/e', '$$1', $text);
print $text;

#-----------------------------
$text = "I am 17 years old";
$text = preg_replace('/(\d+)/e', '2*$1', $text);
#-----------------------------
# expand variables in $text, but put an error message in
# if the variable isn't defined
$text = preg_replace('/\$(\w+)/e','isset($$1)?$$1:\'[NO VARIABLE: $$1]\'', $text);
#-----------------------------

// As PHP arrays are used as hashes too, separation of section 4
// and section 5 makes little sense.

# @@PLEAC@@_1.9
#-----------------------------
$big = strtoupper($little);
$little = strtolower($big);
// PHP does not have the\L and\U string escapes.
#-----------------------------
$big = ucfirst($little);
$little = strtolower(substr($big, 0, 1)) . substr($big, 1);
#-----------------------------
$beast   = "dromedary";
// capitalize various parts of $beast
$capit   = ucfirst($beast); // Dromedar
// PHP does not have the\L and\U string escapes.
$capall  = strtoupper($beast); // DROMEDAR
// PHP does not have the\L and\U string escapes.
$caprest = strtolower(substr($beast, 0, 1)) . substr(strtoupper($beast), 1); // dROMEDAR
// PHP does not have the\L and\U string escapes.
#-----------------------------
// titlecase each word's first character, lowercase the rest
$text = "thIS is a loNG liNE";
$text = ucwords(strtolower($text));
print $text;
This Is A Long Line
#-----------------------------
if (strtoupper($a) == strtoupper($b)) { // or strcasecmp($a, $b) == 0
		print "a and b are the same\n";
}
#-----------------------------
# download the following standalone program
#!/usr/bin/php
<?php
// randcap: filter to randomly capitalize 20% of the letters

function randcase($word) {
	return rand(0, 100) < 20 ? ucfirst($word) : lcfirst($word);
}
function lcfirst($word) {
	return strtolower(substr($word, 0, 1)) . substr($word, 1);
}
while (!feof(STDIN)) {
	print preg_replace("/(\w)/e", "randcase('\\1')", fgets(STDIN));
}

// % php randcap.php < genesis | head -9
#-----------------------------

# @@PLEAC@@_1.10
#-----------------------------
echo $var1 . func() . $var2; // scalar only
#-----------------------------
// PHP can only handle variable expression without operators
$answer = "STRING ${[ VAR EXPR ]} MORE STRING";
#-----------------------------
$phrase = "I have " . ($n + 1) . " guanacos.";
// PHP cannot handle the complex exression: ${\($n + 1)}
#-----------------------------
// Rest of Discussion is not applicable to PHP
#-----------------------------
// Interpolating functions not available in PHP
#-----------------------------

# @@PLEAC@@_1.11
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_1.12
#-----------------------------
$output = wordwrap($str, $width, $break, $cut);
#-----------------------------
# download the following standalone program
#!/usr/bin/php
<?php
// wrapdemo - show how wordwrap works

$input = "Folding and splicing is the work of an editor, " .
				 "not a mere collection of silicon " .
				 "and " .
				 "mobile electrons!";
$columns = 20;
print str_repeat("0123456789", 2) . "\n";
print wordwrap('    ' . $input, $columns - 3, "\n  ") . "\n";
#-----------------------------
// merge multiple lines into one, then wrap one long line
print wordwrap(str_replace("\n", " ", file_get_contents('php://stdin')));
#-----------------------------
while(!feof(STDIN)) {
		print wordwrap(str_replace("\n", " ", stream_get_line(STDIN, 0, "\n\n")));
		print "\n\n";
}
#-----------------------------

# @@PLEAC@@_1.13
#-----------------------------
//backslash
$var = preg_replace('/([CHARLIST])/', '\\\$1', $var);
// double
$var = preg_replace('/([CHARLIST])/', '$1$1', $var);
#-----------------------------
$var = preg_replace('/%/', '%%', $var);
#-----------------------------
$string = 'Mom said, "Don\'t do that."';
$string = preg_replace('/([\'"])/', '\\\$1', $string);
// in PHP you can also use the addslashes() function
#-----------------------------
$string = 'Mom said, "Don\'t do that."';
$string = preg_replace('/([\'"])/', '$1$1', $string);
#-----------------------------
$string = preg_replace('/([^A-Z])/', '\\\$1', $string);
#-----------------------------
// PHP does not have the \Q and \E string metacharacters
$string = "this is\\ a\\ test\\!";
// PHP's quotemeta() function is not the same as perl's quotemeta() function
$string = preg_replace('/(\W)/', '\\\$1', 'is a test!');
#-----------------------------

# @@PLEAC@@_1.14
#-----------------------------
$string = trim($string);
#-----------------------------
// print what's typed, but surrounded by > < symbols
while (!feof(STDIN)) {
		print ">" . substr(fgets(STDIN), 0, -1) . "<\n";
}
#-----------------------------
$string = preg_replace('/\s+/', ' ', $string); // finally, collapse middle
#-----------------------------
$string = trim($string);
$string = preg_replace('/\s+/', ' ', $string);
#-----------------------------
// 1. trim leading and trailing white space
// 2. collapse internal whitespace to single space each
function sub_trim($string) {
		$string = trim($string);
		$string = preg_replace('/\s+/', ' ', $string);
		return $string;
}
#-----------------------------

# @@PLEAC@@_1.15
# @@INCOMPLETE@@
# @@INCOMPLETE@@

# @@PLEAC@@_1.16
#-----------------------------
$code = soundex($string);
#-----------------------------
$phoned_words = metaphone("Schwern");
#-----------------------------
// substitution function for getpwent():
// returns an array of user entries,
// each entry contains the username and the full name
function getpwent() {
		$pwents = array();
		$handle = fopen("passwd", "r");
		while (!feof($handle)) {
				$line = fgets($handle);
				if (preg_match("/^#/", $line)) continue;
				$cols = explode(":", $line);
				$pwents[$cols[0]] = $cols[4];
		}
		return $pwents;
}

print "Lookup user: ";
$user = rtrim(fgets(STDIN));
if (empty($user)) exit;
$name_code = soundex($user);
$pwents = getpwent();
foreach($pwents as $username => $fullname) {
		preg_match("/(\w+)[^,]*\b(\w+)/", $fullname, $matches);
		list(, $firstname, $lastname) = $matches;
	
		if ($name_code == soundex($username) ||
				$name_code == soundex($lastname) ||
				$name_code == soundex($firstname))
		{
				printf("%s: %s %s\n", $username, $firstname, $lastname);
		}
}
#-----------------------------

# @@PLEAC@@_1.17
#-----------------------------
# download the following standalone program
#!/usr/bin/php
<?php
$data = <<<DATA
	analysed=> analyzed
	built-in=> builtin
	chastized   => chastised
	commandline => command-line
	de-allocate => deallocate
	dropin  => drop-in
	hardcode=> hard-code
	meta-data   => metadata
	multicharacter  => multi-character
	multiway=> multi-way
	non-empty   => nonempty
	non-profit  => nonprofit
	non-trappable   => nontrappable
	pre-define  => predefine
	preextend   => pre-extend
	re-compiling=> recompiling
	reenter => re-enter
	turnkey => turn-key
DATA;

$scriptName = $argv[0];
$verbose = ($argc > 1 && $argv[1] == "-v" && array_shift($argv));
$change = array();
foreach (preg_split("/\n/", $data) as $pair) {
	list($in, $out) = preg_split("/\s*=>\s*/", trim($pair));
	if (!$in || !$out) continue;
	$change[$in] = $out;
}
if (count($argv) > 1)  {
	// no in-place edit in PHP

	// preserve old files

	$orig = $argv[1] . ".orig";
	copy($argv[1], $orig);
	$input = fopen($orig, "r");
	$output = fopen($argv[1], "w");
} else if ($scriptName != "-") {
	$input = STDIN;
	trigger_error("$scriptName: Reading from stdin\n", E_USER_WARNING);
}
$ln = 1;
while (!feof($input)) {
	$line = fgets($input);
	foreach ($change as $in => $out) {
		$line = preg_replace("/$in/", $out, $line, -1, $count);
		if ($count > 0 && $verbose) {
			fwrite(STDERR, "$in => $out at $argv[1] line $ln.\n");
		}
	}
	@fwrite($output, $line);
	$ln++;
}
#-----------------------------
# download the following standalone program
#!/usr/bin/php
<?php
$data = <<<DATA
	analysed=> analyzed
	built-in=> builtin
	chastized   => chastised
	commandline => command-line
	de-allocate => deallocate
	dropin  => drop-in
	hardcode=> hard-code
	meta-data   => metadata
	multicharacter  => multi-character
	multiway=> multi-way
	non-empty   => nonempty
	non-profit  => nonprofit
	non-trappable   => nontrappable
	pre-define  => predefine
	preextend   => pre-extend
	re-compiling=> recompiling
	reenter => re-enter
	turnkey => turn-key
DATA;

$scriptName = $argv[0];
$verbose = ($argc > 1 && $argv[1] == "-v" && array_shift($argv));
if (count($argv) > 1)  {
	// no in-place edit in PHP

	// preserve old files

	$orig = $argv[1] . ".orig";
	copy($argv[1], $orig);
	$input = fopen($orig, "r");
	$output = fopen($argv[1], "w");
} else if ($scriptName != "-") {
	$input = STDIN;
	trigger_error("$scriptName: Reading from stdin\n", E_USER_WARNING);
}

$config = array();
foreach (preg_split("/\n/", $data) as $pair) {
	list($in, $out) = preg_split("/\s*=>\s*/", trim($pair));
	if (!$in || !$out) continue;
	$config[$in] = $out;
}

$ln = 1;
while (!feof($input)) {
	$i = 0;
	preg_match("/^(\s*)(.*)/", fgets($input), $matches); // emit leading whitespace

	fwrite($output, $matches[1]);
	foreach (preg_split("/(\s+)/", $matches[2], -1, PREG_SPLIT_DELIM_CAPTURE) as $token) { // preserve trailing whitespace

		fwrite($output, ($i++ & 1) ? $token : (array_key_exists($token, $config) ? $config[$token] : $token));
	}
}
#-----------------------------
// very fast, but whitespace collapse
while (!feof($input)) {
	$i = 0;
	preg_match("/^(\s*)(.*)/", fgets($input), $matches); // emit leading whitespace
	fwrite($output, $matches[1]);
	foreach (preg_split("/(\s+)/", $matches[2]) as $token) { // preserve trailing whitespace
		fwrite($output, (array_key_exists($token, $config) ? $config[$token] : $token) . " ");
	}
	fwrite($output, "\n");
}
#-----------------------------

// @@PLEAC@@_2.0
// As is the case under so many other languages floating point use under PHP is fraught
// with dangers. Although the basic techniques shown below are valid, please refer to
// the official PHP documentation for known issues, bugs, and alternate approaches 

// @@PLEAC@@_2.1
// Two basic approaches to numeric validation:
// * Built-in functions like 'is_numeric', 'is_int', 'is_float' etc
// * Regexes, as shown below

$s = '12.345';

preg_match('/\D/', $s) && die("has nondigits\n");
preg_match('/^\d+$/', $s) || die("not a natural number\n");
preg_match('/^-?\d+$/', $s) || die("not an integer\n");
preg_match('/^[+-]?\d+$/', $s) || die("not an integer\n");
preg_match('/^-?\d+\.?\d*$/', $s) || die("not a decimal\n");
preg_match('/^-?(?:\d+(?:\.\d*)?|\.\d+)$/', $s) || die("not a decimal\n");
preg_match('/^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/', $s) || die("not a C float\n");

// ----------------------------

function getnum($s)
{
	sscanf($s, "%D", $number); return isset($number) ? $number : 0;
}

echo getnum(123) . "\n";   // ok
echo getnum(0xff) . "\n";  // ..
echo getnum(044) . "\n";   // ..

echo getnum('x') . "\n";   // fail

// @@PLEAC@@_2.2
// In PHP floating point comparisions are 'safe' [meaning the '==' comparison operator
// can be used] as long as the value consists of 14 digits or less [total digits, either
// side of the decimal point e.g. xxxxxxx.xxxxxxx, xxxxxxxxxxxxxx., .xxxxxxxxxxxxxx]. If
// values with more digits must be compared, then:
//
// * Represent as strings, and take care to avoid any implicit conversions e.g. don't pass
//   a float as a float to a function and expect all digits to be retained - they won't be -
//   then use 'strcmp' to compare the strings
//
// * Avoid float use; perhaps use arbitrary precision arithmetic. In this case, the
//   'bccomp' function is relevant

// Will work as long as each floating point value is 14 digits or less
if ($float_1 == $float_2)
{
	; // ...
}

// Compare as strings
$cmp = strcmp('123456789.123456789123456789', '123456789.123456789123456788');

// Use 'bccomp'
$precision = 5; // Number of significant comparison digits after decimal point
if (bccomp('1.111117', '1.111116', $precision))
{
	; // ...
}

$precision = 6;
if (bccomp('1.111117', '1.111116', $precision))
{
	; // ...
}

// ----------------------------

$wage = 536;
$week = $wage * 40;
printf("One week's wage is: $%.2f\n", $week / 100);

// @@PLEAC@@_2.3
// Preferred approach
$rounded = round($unrounded, $precision);

// Possible alternate approach
$format = '%[width].[prec]f';
$rounded = sprintf($format, $unrounded);

// ------------

$a = 0.255; $b = round($a, 2);
echo "Unrounded: {$a}\nRounded: {$b}\n";

$a = 0.255; $b = sprintf('%.2f', $a);
echo "Unrounded: {$a}\nRounded: {$b}\n";

$a = 0.255;
printf("Unrounded: %.f\nRounded: %.2f\n", $a, $a);

// ----------------------------

echo "number\tint\tfloor\tceil\n";

foreach(array(3.3, 3.5, 3.7, -3.3) as $number)
{
	printf("%.1f\t%.1f\t%.1f\t%.1f\n", $number, (int) $number, floor($number), ceil($number));
}

// @@PLEAC@@_2.4
// PHP offers the 'bindec' and 'decbin' functions to converting between binary and decimal

$num = bindec('0110110');

$binstr = decbin(54);

// @@PLEAC@@_2.5
foreach (range($X, $Y) as $i)
{
	; // ...
}

foreach (range($X, $Y, 7) as $i)
{
	; // ...
}

for ($i = $X; $i <= $Y; $i++)
{
	; // ...
}

for ($i = $X; $i <= $Y; $i += 7)
{
	; // ...
}

// ----------------------------

echo 'Infancy is:'; foreach(range(0, 2) as $i) echo " {$i}\n";
echo 'Toddling is:'; foreach(range(3, 4) as $i) echo " {$i}\n";
echo 'Childhood is:'; foreach(range(5, 12) as $i) echo " {$i}\n";

// @@PLEAC@@_2.6
// PHP offers no native support for Roman Numerals. However, a 'Numbers_Roman' class
// is available for download from PEAR: [http://pear.php.net/package/Numbers_Roman].
// Note the following 'include' directives are required:
//
//   include_once('Numbers/Roman.php');

$roman = Numbers_Roman::toNumeral($arabic);
$arabic = Numbers_Roman::toNumber($roman);

// ----------------------------

$roman_fifteen = Numbers_Roman::toNumeral(15);

$arabic_fifteen = Numbers_Roman::toNumber($roman_fifteen);

printf("Roman for fifteen is: %s\n", $roman_fifteen);
printf("Arabic for fifteen is: %d\n", $arabic_fifteen);

// @@PLEAC@@_2.7
// Techniques used here simply mirror Perl examples, and are not an endorsement
// of any particular RNG technique

// In PHP do this ...
$random = rand($lowerbound, $upperbound);
$random = rand($x, $y);

// ----------------------------

function make_password($chars, $reqlen)
{
	$len = strlen($chars);
	for ($i = 0; $i < $reqlen; $i++) $password .= substr($chars, rand(0, $len), 1);
	return $password;
}

$chars = 'ABCDEfghijKLMNOpqrstUVWXYz'; $reqlen = 8;

$password = make_password($chars, $reqlen);

// @@PLEAC@@_2.8
// PHP sports a large number of C Standard Library routines including the 'srand'
// function, used to re-seed the RNG used with calls to the 'rand' function. Thus,
// as per Perl example:

while (TRUE)
{
	$seed = (int) fgets(STDIN);
	if (!empty($seed)) break;
}

srand($seed);

// @@PLEAC@@_2.9
// The above is considered - for many reasons - a poor way of seeding the RNG. PHP
// also offers alternate versions of the functions, 'mt_srand' and 'mt_rand',
// which are described as faster, and more 'random', though key to obtaining a
// more 'random' distribution of generated numbers seems to be through using
// a combination of a previously saved random value in combination with an
// unrepeatable value [like the current time in microseconds] that is multiplied
// by a large prime number, or perhaps as part of a hash [examples available in
// PHP documentation for 'srand' and 'mt_srand']

mt_srand($saved_random_value + microtime() * 1000003);

// or

mt_srand(($saved_random_value + hexdec(substr(md5(microtime()), -8))) & 0x7fffffff);

// Use of 'mt_rand' together with an appropriate seeding approach should help better
// approximate the generation of a 'truly random value'
$truly_random_value = mt_rand();

// @@PLEAC@@_2.10
function random() { return (float) rand() / (float) getrandmax(); }

function gaussian_rand()
{
	$u1 = 0.0; $u2 = 0.0; $g1 = 0.0; $g2 = 0.0; $w = 0.0;
	
	do
	{
		$u1 = 2.0 * random() - 1.0; $u2 = 2.0 * random() - 1.0;
		$w = $u1 * $u1 + $u2 * $u2;
	} while ($w > 1.0);
	
	$w = sqrt((-2.0 * log($w)) / $w); $g2 = $u1 * $w; $g1 = $u2 * $w;

	return $g1;
}

// ------------

$mean = 25.0; $sdev = 2.0;
$salary = gaussian_rand() * $mean + $sdev;

printf("You have been hired at: %.2f\n", $salary);

// @@PLEAC@@_2.11
// 'deg2rad' and 'rad2deg' are actually PHP built-ins, but here is how you might implement
/  them if needed
function deg2rad_($deg) { return ($deg / 180.0) * M_PI; }
function rad2deg_($rad) { return ($rad / M_PI) * 180.0; }

// ------------

printf("%f\n", deg2rad_(180.0));
printf("%f\n", deg2rad(180.0));

// ----------------------------

function degree_sin($deg) { return sin(deg2rad($deg)); }

// ------------

$rad = deg2rad(380.0);

printf("%f\n", sin($rad));
printf("%f\n", degree_sin(380.0));

// @@PLEAC@@_2.12
function my_tan($theta) { return sin($theta) / cos($theta); }

// ------------

$theta = 3.7;

printf("%f\n", my_tan($theta));
printf("%f\n", tan($theta));

// @@PLEAC@@_2.13
$value = 100.0;

$log_e = log($value);
$log_10 = log10($value);

// ----------------------------

function log_base($base, $value) { return log($value) / log($base); }

// ------------

$answer = log_base(10.0, 10000.0);

printf("log(10, 10,000) = %f\n", $answer);

// @@PLEAC@@_2.14
// PHP offers no native support for matrices. However, a 'Math_Matrix' class
// is available for download from PEAR: [http://pear.php.net/package/Math_Matrix].
// Note the following 'include' directives are required:
//
//  include_once('Math/Matrix.php');

$a = new Math_Matrix(array(array(3, 2, 3), array(5, 9, 8)));
$b = new Math_Matrix(array(array(4, 7), array(9, 3), array(8, 1)));

echo $a->toString() . "\n";
echo $b->toString() . "\n";

// NOTE: When I installed this package I had to rename the 'clone' method else
// it would not load, so I chose to rename it to 'clone_', and this usage is
// shown below. This bug may well be fixed by the time you obtain this package

$c = $a->clone_();
$c->multiply($b);

echo $c->toString() . "\n";

// @@PLEAC@@_2.15
// PHP offers no native support for complex numbers. However, a 'Math_Complex' class
// is available for download from PEAR: [http://pear.php.net/package/Math_Complex].
// Note the following 'include' directives are required:
//
//   include_once('Math/Complex.php');
//   include_once('Math/TrigOp.php');
//   include_once('Math/ComplexOp.php');

$a = new Math_Complex(3, 5);
$b = new Math_Complex(2, -2);

$c = Math_ComplexOp::mult($a, $b);

echo $c->toString() . "\n";

// ----------------------------

$d = new Math_Complex(3, 4);
$r = Math_ComplexOp::sqrt($d);

echo $r->toString() . "\n";

// @@PLEAC@@_2.16
// Like C, PHP supports decimal-alternate notations. Thus, for example, the integer
// value, 867, is expressable in literal form as:
//
//   Hexadecimal -> 0x363
//   Octal       -> 01543
//
// For effecting such conversions using strings there is 'sprintf' and 'sscanf'.

$dec = 867;
$hex = sprintf('%x', $dec);
$oct = sprintf('%o', $dec);

// ------------

$dec = 0;
$hex = '363';

sscanf($hex, '%x', $dec);

// ------------

$dec = 0;
$oct = '1543';

sscanf($oct, '%o', $dec);

// ----------------------------

$number = 0;

printf('Gimme a number in decimal, octal, or hex: ');
sscanf(fgets(STDIN), '%D', $number);

printf("%d %x %o\n", $number, $number, $number);

// @@PLEAC@@_2.17
// PHP offers the 'number_format' built-in function to, among many other format tasks, 
// commify numbers. Perl-compatible [as well as extended] regexes are also available

function commify_series($s) { return number_format($s, 0, '', ','); }

// ------------

$hits = 3456789;

printf("Your website received %s accesses last month\n", commify_series($hits));

// ----------------------------

function commify($s)
{
	return strrev(preg_replace('/(\d\d\d)(?=\d)(?!\d*\.)/', '${1},', strrev($s)));
}

// ------------

$hits = 3456789;

echo commify(sprintf("Your website received %d accesses last month\n", $hits));

// @@PLEAC@@_2.18
function pluralise($value, $root, $singular='' , $plural='s')
{
	return $root . (($value > 1) ? $plural : $singular);
}

// ------------

$duration = 1;
printf("It took %d %s\n", $duration, pluralise($duration, 'hour'));
printf("%d %s %s enough.\n", $duration, pluralise($duration, 'hour'),
			pluralise($duration, '', 'is', 'are'));

$duration = 5;
printf("It took %d %s\n", $duration, pluralise($duration, 'hour'));
printf("%d %s %s enough.\n", $duration, pluralise($duration, 'hour'),
			pluralise($duration, '', 'is', 'are'));

// ----------------------------

function plural($singular)
{
	$s2p = array('/ss$/' => 'sses', '/([psc]h)$/' => '${1}es', '/z$/' => 'zes',
							 '/ff$/' => 'ffs', '/f$/' => 'ves', '/ey$/' => 'eys',
							 '/y$/' => 'ies', '/ix$/' => 'ices', '/([sx])$/' => '$1es',
							 '$' => 's');

	foreach($s2p as $s => $p)
	{
		if (preg_match($s, $singular)) return preg_replace($s, $p, $singular);
	}
}

// ------------

foreach(array('mess', 'index', 'leaf', 'puppy') as $word)
{
	printf("%6s -> %s\n", $word, plural($word));
}

// @@PLEAC@@_2.19
// @@INCOMPLETE@@
// @@INCOMPLETE@@

// @@PLEAC@@_3.0
// PHP's date / time suport is quite extensive, and appears grouped into three areas of
// functionality:
//
// * UNIX / C Library [libc]-based routines, which include [among others]:
//   - localtime, gmtime
//   - strftime, strptime, mktime
//   - time, getdate, gettimeofday, 
//
// * PHP 'native' functions, those date / time routines released in earlier versions,
//   and which otherwise provide 'convenience' functionality; these include:
//   - date
//   - strtotime
//
// * 'DateTime' class-based. This facility appears [according to the PHP documentation]
//   to be extremely new / experimental, so whilst usage examples will be provided, they
//   should not be taken to be 'official' examples, and obviously, subject to change.
//   My own impression is that this facility is currently only partially implemented,
//   so there is limited use for these functions. The functions included in this group
//   are some of the 'date_'-prefixed functions; they are, however, not used standalone,
//   but as methods in conjunction with an object. Typical usage:
//
//     $today = new DateTime();             // actually calls: date_create($today, ...);
//     echo $today->format('U') . "\n";     // actually calls: date_format($today, ...);
//
// Also worth mentioning is the PEAR [PHP Extension and Repository] package, 'Calendar',
// which offers a rich set of date / time manipulation facilities. However, since it is
// not currently shipped with PHP, no examples appear

// Helper functions for performing date arithmetic 

function dateOffset()
{
	static $tbl = array('sec' => 1, 'min' => 60, 'hou' => 3600, 'day' => 86400, 'wee' => 604800);
	$delta = 0;

	foreach (func_get_args() as $arg)
	{
		$kv = explode('=', $arg);
		$delta += $kv[1] * $tbl[strtolower(substr($kv[0], 0, 3))];
	}

	return $delta;
}

function dateInterval($intvltype, $timevalue)
{
	static $tbl = array('sec' => 1, 'min' => 60, 'hou' => 3600, 'day' => 86400, 'wee' => 604800);
	return (int) round($timevalue / $tbl[strtolower(substr($intvltype, 0, 3))]);
}

// ----------------------------

// Extract indexed array from 'getdate'
$today = getdate();
printf("Today is day %d of the current year\n", $today['yday']);

// Extract indexed, and associative arrays, respectively, from 'localtime'
$today = localtime();
printf("Today is day %d of the current year\n", $today[7]);

$today = localtime(time(), TRUE);
printf("Today is day %d of the current year\n", $today['tm_yday']);

// @@PLEAC@@_3.1
define(SEP, '-');

// ------------

$today = getdate();

$day = $today['mday'];
$month = $today['mon'];
$year = $today['year'];

// Either do this to use interpolation:
$sep = SEP;
echo "Current date is: {$year}{$sep}{$month}{$sep}{$day}\n";

// or simply concatenate:
echo 'Current date is: ' . $year . SEP . $month . SEP . $day . "\n";

// ------------

$today = localtime(time(), TRUE);

$day = $today['tm_mday'];
$month = $today['tm_mon'] + 1;
$year = $today['tm_year'] + 1900;

printf("Current date is: %4d%s%2d%s%2d\n", $year, SEP, $month, SEP, $day);

// ------------

$format = 'Y' . SEP . 'n' . SEP . 'd';

$today = date($format);

echo "Current date is: {$today}\n";

// ------------

$sep = SEP;

$today = strftime("%Y$sep%m$sep%d");

echo "Current date is: {$today}\n";

// @@PLEAC@@_3.2
$timestamp = mktime($hour, $min, $sec, $month, $day, $year);

$timestamp = gmmktime($hour, $min, $sec, $month, $day, $year);

// @@PLEAC@@_3.3
$dmyhms = getdate();            // timestamp: current date / time

$dmyhms = getdate($timestamp);  // timestamp: arbitrary

$day = $dmyhms['mday'];
$month = $dmyhms['mon'];
$year = $dmyhms['year'];

$hours = $dmyhms['hours'];
$minutes = $dmyhms['minutes'];
$seconds = $dmyhms['seconds'];

// @@PLEAC@@_3.4
// Date arithmetic is probably most easily performed using timestamps [i.e. *NIX Epoch
// Seconds]. Dates - in whatever form - are converted to timestamps, these are
// arithmetically manipulated, and the result converted to whatever form required.
// Note: use 'mktime' to create timestamps properly adjusted for daylight saving; whilst
// 'strtotime' is more convenient to use, it does not, AFAIK, include this adjustment

$when = $now + $difference;
$then = $now - $difference;

// ------------

$now = mktime(0, 0, 0, 8, 6, 2003);

$diff1 = dateOffset('day=1'); $diff2 = dateOffset('weeks=2');

echo 'Today is:                 ' . date('Y-m-d', $now) . "\n";
echo 'One day in the future is: ' . date('Y-m-d', $now + $diff1) . "\n";
echo 'Two weeks in the past is: ' . date('Y-m-d', $now - $diff2) . "\n";

// ----------------------------

// Date arithmetic performed using a custom function, 'dateOffset'. Internally, offset may
// be computed in one of several ways:
// * Direct timestamp manipulation - fastest, but no daylight saving adjustment 
// * Via 'date' built-in function - slower [?], needs a base time from which to
//   compute values, but has daylight saving adjustment 
// * Via 'strtotime' built-in function - as for 'date'
// * Via 'DateTime' class
//
// Approach used here is to utilise direct timestamp manipulation in 'dateOffset' [it's
// performance can also be improved by replacing $tbl with a global definition etc],
// and to illustrate how the other approaches might be used 

// 1. 'dateOffset'

$birthtime = mktime(3, 45, 50, 1, 18, 1973);

$interval = dateOffset('day=55', 'hours=2', 'min=17', 'sec=5');

$then = $birthtime + $interval;

printf("Birthtime is: %s\nthen is:      %s\n", date(DATE_RFC1123, $birthtime), date(DATE_RFC1123, $then));

// ------------

// 2. 'date'

// Base values, and offsets, respectively
$hr = 3; $min = 45; $sec = 50; $mon = 1; $day = 18; $year = 1973;

$yroff = 0; $monoff = 0; $dayoff = 55; $hroff = 2; $minoff = 17; $secoff = 5;

// Base date
$birthtime = mktime($hr, $min, $sec, $mon, $day, $year, TRUE);

$year = date('Y', $birthtime) + $yroff;
$mon = date('m', $birthtime) + $monoff;
$day = date('d', $birthtime) + $dayoff;

$hr = date('H', $birthtime) + $hroff;
$min = date('i', $birthtime) + $minoff;
$sec = date('s', $birthtime) + $secoff;

// Offset date
$then = mktime($hr, $min, $sec, $mon, $day, $year, TRUE);

printf("Birthtime is: %s\nthen is:      %s\n", date(DATE_RFC1123, $birthtime), date(DATE_RFC1123, $then));

// ------------

// 3. 'strtotime'

// Generate timestamp whatever way is preferable
$birthtime = mktime(3, 45, 50, 1, 18, 1973);
$birthtime = strtotime('1/18/1973 03:45:50');

$then = strtotime('+55 days 2 hours 17 minutes 2 seconds', $birthtime);

printf("Birthtime is: %s\nthen is:      %s\n", date(DATE_RFC1123, $birthtime), date(DATE_RFC1123, $then));

// ------------

// 4. 'DateTime' class

$birthtime = new DateTime('1/18/1973 03:45:50');
$then = new DateTime('1/18/1973 03:45:50');
$then->modify('+55 days 2 hours 17 minutes 2 seconds');

printf("Birthtime is: %s\nthen is:      %s\n", $birthtime->format(DATE_RFC1123), $then->format(DATE_RFC1123));

// @@PLEAC@@_3.5
// Date intervals are most easily computed using timestamps [i.e. *NIX Epoch
// Seconds] which, of course, gives the interval result is seconds from which
// all other interval measures [days, weeks, months, years] may be derived.
// Refer to previous section for discussion of daylight saving and other related
// problems

$interval_seconds = $recent - $earlier;

// ----------------------------

// Conventional approach ...
$bree = strtotime('16 Jun 1981, 4:35:25');
$nat = strtotime('18 Jan 1973, 3:45:50');

// ... or, with daylight saving adjustment
$bree = mktime(4, 35, 25, 6, 16, 1981, TRUE);
$nat = mktime(3, 45, 50, 1, 18, 1973, TRUE);

$difference = $bree - $nat;

// 'dateInterval' custom function computes intervals in several measures given an
// interval in seconds. Note, 'month' and 'year' measures not provided
printf("There were %d seconds between Nat and Bree\n", $difference);
printf("There were %d weeks between Nat and Bree\n", dateInterval('weeks', $difference));
printf("There were %d days between Nat and Bree\n", dateInterval('days', $difference));
printf("There were %d hours between Nat and Bree\n", dateInterval('hours', $difference));
printf("There were %d minutes between Nat and Bree\n", dateInterval('mins', $difference));

// @@PLEAC@@_3.6
// 'getdate' accepts a timestamp [or implicitly calls 'time'] and returns an array of
// date components. It returns much the same information as 'strptime' except that
// the component names are different

$today = getdate();

$weekday = $today['wday'];
$monthday = $today['mday'];
$yearday = $today['yday'];

$weeknumber = (int) round($yearday / 7.0);

// Safter method of obtaining week number
$weeknumber = strftime('%U') + 1;

// ----------------------------

define(SEP, '/');

$day = 16;
$month = 6;
$year = 1981;

$timestamp = mktime(0, 0, 0, $month, $day, $year);

$date = getdate($timestamp);

$weekday = $date['wday'];
$monthday = $date['mday'];
$yearday = $date['yday'];

$weeknumber = (int) round($yearday / 7.0);

$weeknumber = strftime('%U', $timestamp) + 1;

// Interpolate ...
$sep = SEP;
echo "{$month}{$sep}{$day}{$sep}{$year} was a {$date['weekday']} in week {$weeknumber}\n";

// ... or, concatenate
echo $month . SEP . $day . SEP . $year . ' was a ' . $date['weekday']
		 . ' in week ' . $weeknumber . "\n";

// @@PLEAC@@_3.7
// 'strtotime' parses a textual date expression by attempting a 'best guess' at
// the format, and either fails, or generates a timestamp. Timestamp could be fed
// into any one of the various functions; example:
$timestamp = strtotime('1998-06-03'); echo strftime('%Y-%m-%d', $timestamp) . "\n";

// 'strptime' parses a textual date expression according to a specified format,
// and returns an array of date components; components can be easily dumped
print_r(strptime('1998-06-03', '%Y-%m-%d'));

// ----------------------------

// Parse date string according to format
$darr = strptime('1998-06-03', '%Y-%m-%d');

if (!empty($darr))
{
	// Show date components in 'debug' form
	print_r($darr);

	// Check whether there was a parse error i.e. one or more components could not
	// be extracted from the string
	if (empty($darr['unparsed']))
	{
		// Properly parsed date, so validate required components using, 'checkdate'
		if (checkdate($darr['tm_mon'] + 1, $darr['tm_mday'], $darr['tm_year'] + 1900))
			echo "Parsed date verified as correct\n";
		else
			echo "Parsed date failed verification\n";
	}
	else
	{
		echo "Date string parse not complete; failed components: {$darr['unparsed']}\n";
	}
}
else
{
	echo "Date string could not be parsed\n";
}

// @@PLEAC@@_3.8
// 'date' and 'strftime' both print a date string based on:
// * Format String, describing layout of date components
// * Timestamp [*NIX Epoch Seconds], either given explicitly, or implictly
//   via a call to 'time' which retrieves current time value

$ts = 1234567890;

date('Y/m/d', $ts); 
date('Y/m/d', mktime($h, $m, $s, $mth, $d, $y, $is_dst)); 

date('Y/m/d');         // same as: date('Y/m/d', time());

// ------------

$ts = 1234567890;

strftime('%Y/%m/%d', $ts);
strftime('%Y/%m/%d', mktime($h, $m, $s, $mth, $d, $y, $is_dst));

strftime('%Y/%m/%d');  // same as: strftime('%Y/%m/%d', time());

// ----------------------------

// 'mktime' creates a local time timestamp
$t = strftime('%a %b %e %H:%M:%S %z %Y', mktime(3, 45, 50, 1, 18, 73, TRUE));
echo "{$t}\n";

// 'gmmktime' creates a GMT time timestamp
$t = strftime('%a %b %e %H:%M:%S %z %Y', gmmktime(3, 45, 50, 1, 18, 73));
echo "{$t}\n";

// ----------------------------

// 'strtotime' parses a textual date expression, and generates a timestamp 
$t = strftime('%A %D', strtotime('18 Jan 1973, 3:45:50'));
echo "{$t}\n";

// This should generate output identical to previous example
$t = strftime('%A %D', mktime(3, 45, 50, 1, 18, 73, TRUE));
echo "{$t}\n";

// @@PLEAC@@_3.9
// PHP 5 and above can use the built-in, 'microtime'. Crude implementation for ealier versions:
// function microtime() { $t = gettimeofday(); return (float) ($t['sec'] + $t['usec'] / 1000000.0); } 

// ------------

$before = microtime();

$line = fgets(STDIN);

$elapsed = microtime() - $before;

printf("You took %.3f seconds\n", $elapsed);

// ------------

define(NUMBER_OF_TIMES, 100);
define(SIZE, 500);

for($i = 0; $i < NUMBER_OF_TIMES; $i++)
{
	$arr = array();
	for($j = 0; $j < SIZE; $j++) $arr[] = rand();

	$begin = microtime();
	sort($arr);
	$elapsed = microtime() - $begin;

	$total_time += $elapsed;
}

printf("On average, sorting %d random numbers takes %.5f seconds\n", SIZE, $total_time / (float) NUMBER_OF_TIMES);

// @@PLEAC@@_3.10
// Low-resolution: sleep time specified in seconds
sleep(1);

// High-resolution: sleep time specified in microseconds [not reliable under Windows]
usleep(250000);

// @@PLEAC@@_3.11
// @@INCOMPLETE@@
// @@INCOMPLETE@@

// @@PLEAC@@_4.0
// Nested arrays are supported, and may be easily printed using 'print_r'

$nested = array('this', 'that', 'the', 'other');

$nested = array('this', 'that', array('the', 'other')); print_r($nested);

$tune = array('The', 'Star-Spangled', 'Banner');

// @@PLEAC@@_4.1
// PHP offers only the 'array' type which is actually an associative array, though
// may be numerically indexed, to mimic vectors and matrices; there is no separate
// 'list' type

$a = array('quick', 'brown', 'fox');

// ------------

$a = escapeshellarg('Why are you teasing me?');

// ------------

$lines = <<<END_OF_HERE_DOC
		The boy stood on the burning deck,
		it was as hot as glass.
END_OF_HERE_DOC;

// ------------

$bigarray = array_map('rtrim', file('mydatafile'));

// ------------

$banner = 'The mines of Moria';

$banner = escapeshellarg('The mines of Moria');

// ------------

$name = 'Gandalf';

$banner = "Speak {$name}, and enter!";

$banner = 'Speak ' . escapeshellarg($name) . ' and welcome!';

// ------------

$his_host = 'www.perl.com';

$host_info = `nslookup $his_host`;

$cmd = 'ps ' . posix_getpid(); $perl_info = `$cmd`;

$shell_info = `ps $$`;

// ------------

$banner = array('Costs', 'only', '$4.95');

$banner = array_map('escapeshellarg', split(' ', 'Costs only $4.95'));

// ------------

// AFAIK PHP doesn't support non-quoted strings ala Perl's 'q', 'qq' and 'qw', so arrays
// created from strings must use quoted strings, and make use of 'split' [or equivalent].
// A slew of functions exist for performing string quoting, including 'escapeshellarg',
// 'quotemeta', and 'preg_quote'

$brax = split(' ', '( ) < > { } [ ]');

// Do this to quote each element within '..'
// $brax = array_map('escapeshellarg', split(' ', '( ) < > { } [ ]'));

$rings = split(' ', 'Nenya Narya Vilya');

$tags = split(' ', 'LI TABLE TR TD A IMG H1 P');

$sample = split(' ', 'The vertical bar | looks and behaves like a pipe.');

// @@PLEAC@@_4.2
function commify_series($list)
{
	$n = str_word_count($list); $series = str_word_count($list, 1);

	if ($n == 0) return NULL;
	if ($n == 1) return $series[0];
	if ($n == 2) return $series[0] . ' and ' . $series[1];
	
	return join(', ', array_slice($series, 0, -1)) . ', and ' . $series[$n - 1];
}

// ------------

echo commify_series('red') . "\n";
echo commify_series('red yellow') . "\n";
echo commify_series('red yellow green') . "\n";

$mylist = 'red yellow green';
echo 'I have ' . commify_series($mylist) . " marbles.\n";

// ----------------------------

function commify_series($arr)
{
	$n = count($arr); $sepchar = ',';

	foreach($arr as $str)
	{
		if (strpos($str, ',') === false) continue;
		$sepchar = ';'; break; 
	}

	if ($n == 0) return NULL;
	if ($n == 1) return $arr[0];
	if ($n == 2) return $arr[0] . ' and ' . $arr[1];
	
	return join("{$sepchar} ", array_slice($arr, 0, -1)) . "{$sepchar} and " . $arr[$n - 1];
}

// ------------

$lists = array(
	array('just one thing'),
	split(' ', 'Mutt Jeff'),
	split(' ', 'Peter Paul Mary'),
	array('To our parents', 'Mother Theresa', 'God'),
	array('pastrami', 'ham and cheese', 'peanut butter and jelly', 'tuna'),
	array('recycle tired, old phrases', 'ponder big, happy thoughts'),
	array('recycle tired, old phrases', 'ponder big, happy thoughts', 'sleep and dream peacefully'));

foreach($lists as $arr)
{
	echo 'The list is: ' . commify_series($arr) . ".\n";
}

// @@PLEAC@@_4.3
// AFAICT you cannot grow / shrink an array to an arbitrary size. However, you can:
// * Grow an array by appending an element using subscrip notation, or using
//   either 'array_unshift' or 'array_push' to add one or more elements

$arr[] = 'one';
array_unshift($arr, 'one', 'two', 'three');
array_push($arr, 'one', 'two', 'three');

// * Shrink an array by using 'unset' to remove one or more specific elements, or
//   either 'array_shift' or 'array_pop' to remove an element from the ends

unset($arr[$idx1], $arr[$idx2], $arr[$idx3]);
$item = array_shift($arr);
$item = array_pop($arr);

// ----------------------------

function what_about_the_array()
{
	global $people;

	echo 'The array now has ' . count($people) . " elements\n";
	echo 'The index value of the last element is ' . (count($people) - 1) . "\n";
	echo 'Element #3 is ' . $people[3] . "\n";
}

$people = array('Crosby', 'Stills', 'Nash', 'Young');
what_about_the_array();

array_pop($people);
what_about_the_array();

// Cannot, AFAICT, resize the array to an arbitrary size

# @@PLEAC@@_4.4
foreach ($list as $item) {
		// do something with $item
}

// Environment listing example

// PHP defines a superglobal $_ENV to provide access to environment
// variables.

// Beware, array assignment means copying in PHP. You need to use
// the reference operator to avoid copying. But we want a copy here.
$env = $_ENV;

// PHP can sort an array by key, so you don't need to get keys,
// and then sort.
ksort($env);

foreach ($env as $key => $value) {
		echo "{$key}={$value}\n";
}

// Literal translation of Perl example would be:
$keys = array_keys($_ENV);
sort($keys);
foreach ($keys as $key) {
		echo "{$key}={$_ENV[$key]}\n";
}

// This assumes that MAX_QUOTA is a named constant.
foreach ($all_users as $user) {
		$disk_space = get_usage($user);
		if ($disk_space > MAX_QUOTA) {
				complain($user);
		}
}

// You can't modify array's elements in-place.
$array = array(1, 2, 3);
$newarray = array();
foreach ($array as $item) {
		$newarray[] = $item - 1;
}
print_r($newarray);

// Before PHP 5, that is. You can precede the reference operator
// before $item to get reference instead of copy.
$array = array(1, 2, 3);
foreach ($array as &$item) {
		$item--;
}
print_r($array);

// TODO: explain the old each() and list() iteration construct.
// foreach is new in PHP 4, and there are subtle differences.

// @@PLEAC@@_4.5
// Conventional 'read-only' access
foreach($array as $item)
{
	; // Can access, but not update, array element referred to by '$item'
}

// ----

// '&' makes '$item' a reference
foreach($array as &$item)
{
	; // Update array element referred to by '$item'
}

// ------------

$arraylen = count($array);

for($i = 0; $i < $arraylen; $i++)
{
	; // '$array' is updateable via subscript notation
}

// ----------------------------

$fruits = array('Apple', 'Raspberry');

foreach($fruits as &$fruit)
{
	echo "{$fruit} tastes good in a pie.\n";
}

$fruitlen = count($fruits);

for($i = 0; $i < $fruitlen; $i++)
{
	echo "{$fruits[$i]} tastes good in a pie.\n";
}

// ----------------------------

$rogue_cats = array('Blackie', 'Goldie', 'Silkie');

// Take care to assign reference to '$rogue_cats' array via '=&'
$namelist['felines'] =& $rogue_cats;

// Take care to make '$cat' a reference via '&$' to allow updating
foreach($namelist['felines'] as &$cat)
{
	$cat .= ' [meow]';
}

// Via array reference
foreach($namelist['felines'] as $cat)
{
	echo "{$cat} purrs hypnotically.\n";
}

echo "---\n";

// Original array
foreach($rogue_cats as $cat)
{
	echo "{$cat} purrs hypnotically.\n";
}

// @@PLEAC@@_4.6
// PHP offers the 'array_unique' function to perform this task. It works with both keyed,
// and numerically-indexed arrays; keys / indexes are preserved; use of 'array_values' 
// is recommended to reindex numerically-indexed arrays since there will likely be missing
// indexes

// Remove duplicate values
$unique = array_unique($array);

// Remove duplicates, and reindex [for numerically-indexed arrays only]
$unique = array_values(array_unique($array));

// or use:
$unique = array_keys(array_flip($array));

// ----------------------------

// Selected Perl 'seen' examples
foreach($list as $item)
{
	if (!isset($seen[$item]))
	{
		$seen[$item] = TRUE;
		$unique[] = $item;
	}
}

// ------------

foreach($list as $item)
{
	$seen[$item] || (++$seen[$item] && ($unique[] = $item));
}

// ------------

function some_func($item)
{
	; // Do something with '$item'
}

foreach($list as $item)
{
	$seen[$item] || (++$seen[$item] && some_func($item));
}

// ----------------------------

foreach(array_slice(preg_split('/\n/', `who`), 0, -1) as $user_entry)
{
	$user = preg_split('/\s/', $user_entry);
	$ucnt[$user[0]]++;
}

ksort($ucnt);

echo "users logged in:\n";

foreach($ucnt as $user => $cnt)
{
	echo "\t{$user} => {$cnt}\n";
}

// @@PLEAC@@_4.7
// PHP offers the 'array_diff' and 'array_diff_assoc' functions to perform this task. Same
// points as made about 'array_unique' apply here also

$a = array('c', 'a', 'b', 'd');
$b = array('c', 'a', 'b', 'e');

$diff = array_diff($a, $b);                 // $diff -> [3] 'd'
$diff = array_diff($b, $a);                 // $diff -> [3] 'e'

// Numerically-indexed array, reindexed
$diff = array_values(array_diff($a, $b));   // $diff -> [0] 'd'
$diff = array_values(array_diff($b, $a));   // $diff -> [0] 'e'

// ----------------------------

// 1st Perl 'seen' example only

$a = array('k1' => 11, 'k2' => 12, 'k4' => 14);
$b = array('k1' => 11, 'k2' => 12, 'k3' => 13);

foreach($b as $item => $value) { $seen[$item] = 1; }

// Stores key only e.g. $aonly[0] contains 'k4', same as Perl example
foreach($a as $item => $value) { if (!$seen[$item]) $aonly[] = $item; }

// Stores key and value e.g. $aonly['k4'] contains 14, same entry as in $a
foreach($a as $item => $value) { if (!$seen[$item]) $aonly[$item] = $value; }

// ----------------------------

// Conventional way: $hash = array('key1' => 1, 'key2' => 2);

$hash['key1'] = 1;
$hash['key2'] = 2;

$hash = array_combine(array('key1', 'key2'), array(1, 2));

// ------------

$seen = array_slice($b, 0);

$seen = array_combine(array_keys($b), array_fill(0, count($b), 1));

// @@PLEAC@@_4.8
// PHP offers a number of array-based 'set operation' functions:
// * union:        array_unique(array_merge(...))
// * intersection: array_intersect and family
// * difference:   array_diff and family
// which may be used for this type of task. Also, if returned arrays need to be
// reindexed, 'array_slice($array, 0)', or 'array_values($array)' are useful

$a = array(1, 3, 5, 6, 7, 8);
$b = array(2, 3, 5, 7, 9);

$union = array_values(array_unique(array_merge($a, $b))); // 1, 2, 3, 5, 6, 7, 8, 9
$isect = array_values(array_intersect($a, $b));           // 3, 5, 7
$diff = array_values(array_diff($a, $b));                 // 1, 8

// @@PLEAC@@_4.9
// PHP offers the 'array_merge' function to perform this task. Duplicate values are retained,
// but if arrays are numerically-indexed, resulting array is reindexed

$arr1 = array('c', 'a', 'b', 'd');
$arr2 = array('c', 'a', 'b', 'e');

$new = array_merge($arr1, $arr2);     // $new -> 'c', 'a', 'b', 'd', 'c', 'a', 'b', 'd'

// ----------------------------

$members = array('Time', 'Flies');
$initiates = array('An', 'Arrow');

$members = array_merge($members, $initiates);

// ------------

$members = array('Time', 'Flies');
$initiates = array('An', 'Arrow');

// 'array_splice' is the PHP equivalent to Perl's 'splice'
array_splice($members, 2, 0, array_merge(array('Like'), $initiates));
echo join(' ', $members) . "\n";

array_splice($members, 0, 1, array('Fruit'));
array_splice($members, -2, 2, array('A', 'Banana'));
echo join(' ', $members) . "\n";

// @@PLEAC@@_4.10
$reversed = array_reverse($array);

// ----------------------------

foreach(array_reverse($array) as $item)
{
	; // ... do something with '$item' ...
}

// ------------

for($i = count($array) - 1; $i >= 0; $i--)
{
	; // ... do something with '$array[$i]' ...
}

// ----------------------------

sort($array);
$array = array_reverse($array);

// ------------

rsort($array);

// @@PLEAC@@_4.11
// Array elements can be deleted using 'unset'; removing several elements would require applying
// 'unset' several times, probably in a loop. However, they would most likely also need to be
// reindexed, so a better approach would be to use 'array_slice' which avoids explicit looping.
// Where elements need to be removed, and those elements also returned, it is probably best to
// combine both operations in a function. This is the approach taken here in implementing both
// 'shiftN' and 'popN', and it is these functions that are used in the examples

function popN(&$arr, $n)
{
	$ret = array_slice($arr, -($n), $n);
	$arr = array_slice($arr, 0, count($arr) - $n);
	return $ret;
}

function shiftN(&$arr, $n)
{
	$ret = array_slice($arr, 0, $n);
	$arr = array_slice($arr, $n);
	return $ret;
}

// ------------

// Remove $n elements from the front of $array; return them in $fron
$front = shiftN($array, $n);

// Remove $n elements from the end of $array; return them in $end
$end = popN($array, $n);

// ------------

$friends = array('Peter', 'Paul', 'Mary', 'Jim', 'Tim');

list($this_, $that) = shiftN($friends, 2);

echo "{$this_} {$that}\n";

// ------------

$beverages = array('Dew', 'Jolt', 'Cola', 'Sprite', 'Fresca');

$pair = popN($beverages, 2);

echo join(' ', $pair) . "\n";

// @@PLEAC@@_4.12
// This section illustrates various 'find first' techniques. The Perl examples all use an
// explicit loop and condition testing [also repeated here]. This is the simplest, and
// [potentially] most efficient approach because the search can be terminated as soon as a
// match is found. However, it is worth mentioning a few alternatives:
// * 'array_search' performs a 'find first' using the element value rather than a condition
//    check, so isn't really applicable here
// * 'array_filter', whilst using a condition check, actually performs a 'find all', though
//   all but the first returned element can be discarded. This approach is actually less error
//   prone than using a loop, but the disadvantage is that each element is visited: there is no
//   means of terminating the search once a match has been found. It would be nice if this
//   function were to have a third parameter, a Boolean flag indicating whether to traverse
//   the whole array, or quit after first match [next version, maybe :) ?]

$found = FALSE;

foreach($array as $item)
{
	// Not found - skip to next item
	if (!$criterion) continue;

	// Found - save and leave
	$match = $item;
	$found = TRUE;
	break;  
}

if ($found)
{
	; // do something with $match
}
else
{
	; // not found
}

// ------------

function predicate($element)
{
	if (criterion) return TRUE;
	return FALSE;
}

$match = array_slice(array_filter($array, 'predicate'), 0, 1);

if ($match)
{
	; // do something with $match[0]
}
else
{
	; // $match is empty - not found
}

// ----------------------------

class Employee
{
	public $name, $age, $ssn, $salary;

	public function __construct($name, $age, $ssn, $salary, $category)
	{
		$this->name = $name;
		$this->age = $age;
		$this->ssn = $ssn;
		$this->salary = $salary;
		$this->category = $category;
	}
}

// ------------

$employees = array(
	new Employee('sdf', 27, 12345, 47000, 'Engineer'),
	new Employee('ajb', 32, 12376, 51000, 'Programmer'),
	new Employee('dgh', 31, 12355, 45000, 'Engineer'));

// ------------

function array_update($arr, $lambda, $updarr)
{
	foreach($arr as $key) $lambda($updarr, $key);
	return $updarr;
}

function highest_salaried_engineer(&$arr, $employee)
{
	static $highest_salary = 0;
	
	if ($employee->category == 'Engineer')
	{
		if ($employee->salary > $highest_salary)
		{
			$highest_salary = $employee->salary;
			$arr[0] = $employee;
		}
	}
}

// ------------

// 'array_update' custom function is modelled on 'array_reduce' except that it allows the
// return of an array, contents and length of which are entirely dependant on what the
// callback function does. Here, it is logically working in a 'find first' capacity
$highest_salaried_engineer = array_update($employees, 'highest_salaried_engineer', array());

echo 'Highest paid engineer is: ' . $highest_salaried_engineer[0]->name . "\n";

// @@PLEAC@@_4.13
// PHP implements 'grep' functionality [as embodied in the current section] in the 'array_filter'
// function

function predicate($element)
{
	if (criterion) return TRUE;
	return FALSE;
}

$matching = array_filter($list, 'predicate');

// ------------

$bigs = array_filter($nums, create_function('$n', 'return $n > 1000000;'));

// ------------

function is_pig($user)
{
	$user_details = preg_split('/(\s)+/', $user);
	// Assuming field 5 is the resource being compared
	return $user_details[5] > 1e7;  
}

$pigs = array_filter(array_slice(preg_split('/\n/', `who -u`), 0, -1), 'is_pig');

// ------------

$matching = array_filter(array_slice(preg_split('/\n/', `who`), 0, -1),
												 create_function('$user', 'return preg_match(\'/^gnat /\', $user);'));

// ------------

class Employee
{
	public $name, $age, $ssn, $salary;

	public function __construct($name, $age, $ssn, $salary, $category)
	{
		$this->name = $name;
		$this->age = $age;
		$this->ssn = $ssn;
		$this->salary = $salary;
		$this->category = $category;
	}
}

// ------------

$employees = array(
	new Employee('sdf', 27, 12345, 47000, 'Engineer'),
	new Employee('ajb', 32, 12376, 51000, 'Programmer'),
	new Employee('dgh', 31, 12355, 45000, 'Engineer'));

// ------------

$engineers = array_filter($employees,
													create_function('$employee', 'return $employee->category == "Engineer";'));

// @@PLEAC@@_4.14
// PHP offers a rich set of sorting functions. Key features:
// * Inplace sorts; the original array, not a a copy, is sorted
// * Separate functions exist for sorting [both ascending and descending order]:
//   - By value, assign new keys / indices [sort, rsort]
//   - By key   [ksort, krsort] (for non-numerically indexed arrays)
//   - By value [asort, arsort]
//   - As above, but using a user-defined comparator [i.e. callback function]
//     [usort, uasort, uksort]
//   - Natural order sort [natsort]
// * Significantly, if sorting digit-only elements, whether strings or numbers,
//   'natural order' [i.e. 1 before 10 before 100 (ascending)] is retained. If
//   the elements are alphanumeric e.g. 'z1', 'z10' then 'natsort' should be
//   used [note: beware of 'natsort' with negative numbers; prefer 'sort' or 'asort']

$unsorted = array(7, 12, -13, 2, 100, 5, 1, -2, 23, 3, 6, 4);

sort($unsorted);                 // -13, -2, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100
rsort($unsorted);                // 100, 23, 12, 7, 6, 5, 4, 3, 2, 1, -2, -13

asort($unsorted);                // -13, -2, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100
arsort($unsorted);               // 100, 23, 12, 7, 6, 5, 4, 3, 2, 1, -2, -13

natsort($unsorted);              // -2, -13, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100

// ------------

function ascend($left, $right) { return $left > $right; }
function descend($left, $right) { return $left < $right; }

// ------------

usort($unsorted, 'ascend');      // -13, -2, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100
usort($unsorted, 'descend');     // 100, 23, 12, 7, 6, 5, 4, 3, 2, 1, -2, -13

uasort($unsorted, 'ascend');     // -13, -2, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100
uasort($unsorted, 'descend');    // 100, 23, 12, 7, 6, 5, 4, 3, 2, 1, -2, -13

// ----------------------------

function kill_process($pid)
{
	// Is 'killable' ?
	if (!posix_kill($pid, 0)) return;

	// Ok, so kill in two stages
	posix_kill($pid, 15); // SIGTERM
	sleep(1);
	posix_kill($pid, 9);  // SIGKILL
}

function pid($pentry)
{
	$p = preg_split('/\s/', trim($pentry));
	return $p[0];
}

$processes = array_map('pid', array_slice(preg_split('/\n/', `ps ax`), 1, -1));
sort($processes);

echo join(' ,', $processes) . "\n";

echo 'Enter a pid to kill: ';
if (($pid = trim(fgets(STDIN))))
	kill_process($pid);

// @@PLEAC@@_4.15
// Tasks in this section would typically use the PHP 'usort' family of functions
// which are used with a comparator function so as to perform custom comparisions.
// A significant difference from the Perl examples is that these functions are
// inplace sorters, so it is the original array that is modified. Where this must
// be prevented a copy of the array can be made and sorted

function comparator($left, $right)
{
	; // Compare '$left' with '$right' returning result
}

// ------------

$ordered = array_slice($unordered);
usort($ordered, 'comparator');

// ----------------------------

// The Perl example looks like it is creating a hash using computed values as the key,
// array values as the value, sorting on the computed key, then extracting the sorted
// values and placing them back into an array

function compute($value)
{
	; // Return computed value utilising '$value'
}

// ------------

// Original numerically-indexed array [sample data used]
$unordered = array(5, 3, 7, 1, 4, 2, 6);

// Create hash using 'compute' function to generate the keys. This example assumes that
// each value in the '$unordered' array is used in generating the corresponding '$key'
foreach($unordered as $value)
{
	$precomputed[compute($value)] = $value;
}

// Copy the hash, and sort it by key
$ordered_precomputed = array_slice($precomputed, 0); ksort($ordered_precomputed);

// Extract the values of the hash in current order placing them in a new numerically-indexed
// array
$ordered = array_values($ordered_precomputed);

// ----------------------------

// As above, except uses 'array_update' and 'accum' to help create hash

function array_update($arr, $lambda, $updarr)
{
	foreach($arr as $key) $lambda($updarr, $key);
	return $updarr;
}

function accum(&$arr, $value)
{
	$arr[compute($value)] = $value;
}

// ------------

function compute($value)
{
	; // Return computed value utilising '$value'
}

// ------------

// Original numerically-indexed array [sample data used]
$unordered = array(5, 3, 7, 1, 4, 2, 6);

// Create hash
$precomputed = array_update($unordered, 'accum', array());

// Copy the hash, and sort it by key
$ordered_precomputed = array_slice($precomputed, 0); ksort($ordered_precomputed);

// Extract the values of the hash in current order placing them in a new numerically-indexed
// array
$ordered = array_values($ordered_precomputed);

// ----------------------------

class Employee
{
	public $name, $age, $ssn, $salary;

	public function __construct($name, $age, $ssn, $salary)
	{
		$this->name = $name;
		$this->age = $age;
		$this->ssn = $ssn;
		$this->salary = $salary;
	}
}

// ------------

$employees = array(
	new Employee('sdf', 27, 12345, 47000),
	new Employee('ajb', 32, 12376, 51000),
	new Employee('dgh', 31, 12355, 45000));

// ------------

$ordered = array_slice($employees, 0);
usort($ordered, create_function('$left, $right', 'return $left->name > $right->name;'));

// ------------

$sorted_employees = array_slice($employees, 0);
usort($sorted_employees, create_function('$left, $right', 'return $left->name > $right->name;'));

$bonus = array(12376 => 5000, 12345 => 6000, 12355 => 0);

foreach($sorted_employees as $employee)
{
	echo "{$employee->name} earns \${$employee->salary}\n";
}

foreach($sorted_employees as $employee)
{
	if (($amount = $bonus[$employee->ssn]))
		echo "{$employee->name} got a bonus of: \${$amount}\n";
}

// ------------

$sorted = array_slice($employees, 0);
usort($sorted, create_function('$left, $right', 'return $left->name > $right->name || $left->age != $right->age;'));

// ----------------------------

// PHP offers a swag of POSIX functions for obtaining user information [i.e. they all read
// the '/etc/passwd' file for the relevant infroamtion], and it is these that should rightly
// be used for this purpose. However, since the intent of this section is to illustrate array
// manipulation, these functions won't be used. Instead a custom function mimicing Perl's
// 'getpwent' function will be implemented so the code presented here can more faithfully match
// the Perl code

function get_pw_entries()
{
	function normal_users_only($e)
	{
		$entry = split(':', $e); return $entry[2] > 100 && $entry[2] < 32768;
	}

	foreach(array_filter(file('/etc/passwd'), 'normal_users_only') as $entry)
		$users[] = split(':', trim($entry));

	return $users;
}

// ------------

$users = get_pw_entries();

usort($users, create_function('$left, $right', 'return $left[0] > $right[0];'));
foreach($users as $user) echo "{$user[0]}\n";

// ----------------------------

$names = array('sdf', 'ajb', 'dgh');

$sorted = array_slice($names, 0);
usort($sorted, create_function('$left, $right', 'return substr($left, 1, 1) > substr($right, 1, 1);'));

// ------------

$strings = array('bbb', 'aa', 'c');

$sorted = array_slice($strings, 0);
usort($sorted, create_function('$left, $right', 'return strlen($left) > strlen($right);'));

// ----------------------------

function array_update($arr, $lambda, $updarr)
{
	foreach($arr as $key) $lambda($updarr, $key);
	return $updarr;
}

function accum(&$arr, $value)
{
	$arr[strlen($value)] = $value;
}

// ----

$strings = array('bbb', 'aa', 'c');

$temp = array_update($strings, 'accum', array());
ksort($temp);
$sorted = array_values($temp);

// ----------------------------

function array_update($arr, $lambda, $updarr)
{
	foreach($arr as $key) $lambda($updarr, $key);
	return $updarr;
}

function accum(&$arr, $value)
{
	if (preg_match('/(\d+)/', $value, $matches))
		$arr[$matches[1]] = $value;
}

// ----

$fields = array('b1b2b', 'a4a', 'c9', 'ddd', 'a');

$temp = array_update($fields, 'accum', array());
ksort($temp);
$sorted_fields = array_values($temp);

// @@PLEAC@@_4.16
array_unshift($a1, array_pop($a1));  // last -> first
array_push($a1, array_shift($a1));   // first -> last

// ----------------------------

function grab_and_rotate(&$arr)
{
	$item = $arr[0];
	array_push($arr, array_shift($arr));
	return $item;
}

// ------------

$processes = array(1, 2, 3, 4, 5);

while (TRUE)
{
	$process = grab_and_rotate($processes);
	echo "Handling process {$process}\n";
	sleep(1);
}

// @@PLEAC@@_4.17
// PHP offers the 'shuffle' function to perform this task

$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);

shuffle($arr);

echo join(' ', $arr) . "\n";

// ----------------------------

// Perl example equivalents
function fisher_yates_shuffle(&$a)
{
	$size = count($a) - 1;

	for($i = $size; $i >= 0; $i--)
	{
		if (($j = rand(0, $i)) != $i)
			list($a[$i], $a[$j]) = array($a[$j], $a[$i]);
	}
}

function naive_shuffle(&$a)
{
	$size = count($a);

	for($i = 0; $i < $size; $i++)
	{
		$j = rand(0, $size - 1);
		list($a[$i], $a[$j]) = array($a[$j], $a[$i]);
	}
}

// ------------

$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);

fisher_yates_shuffle($arr);
echo join(' ', $arr) . "\n";

naive_shuffle($arr);
echo join(' ', $arr) . "\n";

// @@PLEAC@@_4.18
// @@INCOMPLETE@@
// @@INCOMPLETE@@

// @@PLEAC@@_4.19
// @@INCOMPLETE@@
// @@INCOMPLETE@@

// @@PLEAC@@_5.0
// PHP uses the term 'array' to refer to associative arrays - referred to in Perl
// as 'hashes' - and for the sake of avoiding confusion, the Perl terminology will
// be used. As a matter of interest, PHP does not sport a vector, matrix, or list
// type: the 'array' [Perl 'hash'] serves all these roles

$age = array('Nat' => 24, 'Jules' => 25, 'Josh' => 17);

$age['Nat'] = 24;
$age['Jules'] = 25;
$age['Josh'] = 17;

$age = array_combine(array('Nat', 'Jules', 'Josh'), array(24, 25, 17));

// ------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

$food_colour['Apple'] = 'red'; $food_colour['Banana'] = 'yellow';
$food_colour['Lemon'] = 'yellow'; $food_colour['Carrot'] = 'orange';

$food_colour = array_combine(array('Apple', 'Banana', 'Lemon', 'Carrot'),
														 array('red', 'yellow', 'yellow', 'orange'));

// @@PLEAC@@_5.1
$hash[$key] = $value;

// ------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

$food_colour['Raspberry'] = 'pink';

echo "Known foods:\n";
foreach($food_colour as $food => $colour) echo "{$food}\n";

// @@PLEAC@@_5.2
// Returns TRUE on all existing entries with non-NULL values
if (isset($hash[$key]))
	; // entry exists  
else
	; // no such entry 

// ------------

// Returns TRUE on all existing entries regardless of attached value
if (array_key_exists($key, $hash))
	; // entry exists  
else
	; // no such entry 

// ----------------------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

foreach(array('Banana', 'Martini') as $name)
{
	if (isset($food_colour[$name]))
		echo "{$name} is a food.\n";
	else
		echo "{$name} is a drink.\n";
}

// ----------------------------

$age = array('Toddler' => 3, 'Unborn' => 0, 'Phantasm' => NULL);

foreach(array('Toddler', 'Unborn', 'Phantasm', 'Relic') as $thing)
{
	echo "{$thing}:";
	if (array_key_exists($thing, $age)) echo ' exists';
	if (isset($age[$thing])) echo ' non-NULL';
	if ($age[$thing]) echo ' TRUE';
	echo "\n";
}

// @@PLEAC@@_5.3
// Remove one, or more, hash entries
unset($hash[$key]);

unset($hash[$key1], $hash[$key2], $hash[$key3]);

// Remove entire hash
unset($hash);

// ----------------------------

function print_foods()
{
	// Perl example uses a global variable
	global $food_colour;

	$foods = array_keys($food_colour);

	echo 'Foods:';
	foreach($foods as $food) echo " {$food}";

	echo "\nValues:\n";
	foreach($foods as $food)
	{
		$colour = $food_colour[$food];

		if (isset($colour))
			echo "  {$colour}\n";
		else
			echo "  nullified or removed\n";
	}
}

// ------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

echo "Initially:\n"; print_foods();

// Nullify an entry
$food_colour['Banana'] = NULL;
echo "\nWith 'Banana' nullified\n";
print_foods();

// Remove an entry
unset($food_colour['Banana']);
echo "\nWith 'Banana' removed\n";
print_foods();

// Destroy the hash
unset($food_colour);

// @@PLEAC@@_5.4
// Access keys and values
foreach($hash as $key => $value)
{
	; // ...
}

// Access keys only
foreach(array_keys($hash) as $key)
{
	; // ...
}

// Access values only
foreach($hash as $value)
{
	; // ...
}

// ----------------------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

foreach($food_colour as $food => $colour)
{
	echo "{$food} is {$colour}\n";
}

foreach(array_keys($food_colour) as $food)
{
	echo "{$food} is {$food_colour[$food]}\n";
}

// ----------------------------

// 'countfrom' - count number of messages from each sender

$line = fgets(STDIN);

while (!feof(STDIN))
{
	if (preg_match('/^From: (.*)/', $line, $matches))
	{
		if (isset($from[$matches[1]]))
			$from[$matches[1]] += 1;
		else
			$from[$matches[1]] = 1;
	}

	$line = fgets(STDIN);
}

if (isset($from))
{
	echo "Senders:\n";  
	foreach($from as $sender => $count) echo "{$sender} : {$count}\n";
}
else
{
	echo "No valid data entered\n";
}

// @@PLEAC@@_5.5
// PHP offers, 'print_r', which prints hash contents in 'debug' form; it also
// works recursively, printing any contained arrays in similar form
//     Array
//     (
//         [key1] => value1 
//         [key2] => value2
//         ...
//     )

print_r($hash);

// ------------

// Based on Perl example; non-recursive, so contained arrays not printed correctly
foreach($hash as $key => $value)
{
	echo "{$key} => $value\n";
}

// ----------------------------

// Sorted by keys

// 1. Sort the original hash
ksort($hash);

// 2. Extract keys, sort, traverse original in key order
$keys = array_keys($hash); sort($keys);

foreach($keys as $key)
{
	echo "{$key} => {$hash[$key]}\n";
}

// Sorted by values

// 1. Sort the original hash
asort($hash);

// 2. Extract values, sort, traverse original in value order [warning: finds 
//    only first matching key in the case where duplicate values exist]
$values = array_values($hash); sort($values);

foreach($values as $value)
{
	echo $value . ' <= ' . array_search($value, $hash) . "\n";
}

// @@PLEAC@@_5.6
// Unless sorted, hash elements remain in the order of insertion. If care is taken to
// always add a new element to the end of the hash, then element order is the order
// of insertion. The following function, 'array_push_associative' [modified from original
// found at 'array_push' section of PHP documentation], does just that
function array_push_associative(&$arr)
{
	foreach (func_get_args() as $arg)
	{
		if (is_array($arg))
			foreach ($arg as $key => $value) { $arr[$key] = $value; $ret++; }
		else
			$arr[$arg] = '';
	}

	return $ret;
}

// ------------

$food_colour = array();

// Individual calls, or ...
array_push_associative($food_colour, array('Banana' => 'Yellow'));
array_push_associative($food_colour, array('Apple' => 'Green'));
array_push_associative($food_colour, array('Lemon' => 'Yellow'));

// ... one call, one array; physical order retained
// array_push_associative($food_colour, array('Banana' => 'Yellow', 'Apple' => 'Green', 'Lemon' => 'Yellow'));

print_r($food_colour);

echo "\nIn insertion order:\n";
foreach($food_colour as $food => $colour) echo "  {$food} => {$colour}\n";

$foods = array_keys($food_colour);

echo "\nStill in insertion order:\n";
foreach($foods as $food) echo "  {$food} => {$food_colour[$food]}\n";

// @@PLEAC@@_5.7
foreach(array_slice(preg_split('/\n/', `who`), 0, -1) as $entry)
{
	list($user, $tty) = preg_split('/\s/', $entry);
	$ttys[$user][] = $tty;

	// Could instead do this:
	// $user = array_slice(preg_split('/\s/', $entry), 0, 2);
	// $ttys[$user[0]][] = $user[1];
}

ksort($ttys);

// ------------

foreach($ttys as $user => $all_ttys)
{
	echo "{$user}: " . join(' ', $all_ttys) . "\n";
}

// ------------

foreach($ttys as $user => $all_ttys)
{
	echo "{$user}: " . join(' ', $all_ttys) . "\n";

	foreach($all_ttys as $tty)
	{
		$stat = stat('/dev/$tty');
		$pwent = posix_getpwuid($stat['uid']);
		$user = isset($pwent['name']) ? $pwent['name'] : 'Not available';
		echo "{$tty} owned by: {$user}\n";
	}
}

// @@PLEAC@@_5.8
// PHP offers the 'array_flip' function to perform the task of exchanging the keys / values
// of a hash i.e. invert or 'flip' a hash

$reverse = array_flip($hash);

// ----------------------------

$surname = array('Babe' => 'Ruth', 'Mickey' => 'Mantle'); 
$first_name = array_flip($surname);

echo "{$first_name['Mantle']}\n";

// ----------------------------

$argc == 2 || die("usage: {$argv[0]} food|colour\n");

$given = $argv[1];

$colour = array('Apple' => 'red', 'Banana' => 'yellow',
								'Lemon' => 'yellow', 'Carrot' => 'orange');

$food = array_flip($colour);

if (isset($colour[$given]))
	echo "{$given} is a food with colour: {$colour[$given]}\n";

if (isset($food[$given]))
	echo "{$food[$given]} is a food with colour: {$given}\n";

// ----------------------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

foreach($food_colour as $food => $colour)
{
	$foods_with_colour[$colour][] = $food;
}

$colour = 'yellow';
echo "foods with colour {$colour} were: " . join(' ', $foods_with_colour[$colour]) . "\n";

// @@PLEAC@@_5.9
// PHP implements a swag of sorting functions, most designed to work with numerically-indexed
// arrays. For sorting hashes, the 'key' sorting functions are required:
// * 'ksort', 'krsort', 'uksort'

// Ascending order
ksort($hash);

// Descending order [i.e. reverse sort]
krsort($hash);

// Comparator-based sort

function comparator($left, $right)
{
	// Compare left key with right key
	return $left > $right;
}

uksort($hash, 'comparator');

// ----------------------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

// ------------

ksort($food_colour);

foreach($food_colour as $food => $colour)
{
	echo "{$food} is {$colour}\n";
}

// ------------

uksort($food_colour, create_function('$left, $right', 'return $left > $right;'));

foreach($food_colour as $food => $colour)
{
	echo "{$food} is {$colour}\n";
}

// @@PLEAC@@_5.10
// PHP offers the 'array_merge' function for this task [a related function, 'array_combine',
// may be used to create a hash from an array of keys, and one of values, respectively]

// Merge two, or more, arrays
$merged = array_merge($a, $b, $c);

// Create a hash from array of keys, and of values, respectively
$hash = array_combine($keys, $values);

// ------------

// Can always merge arrays manually 
foreach(array($h1, $h2, $h3) as $hash)
{
	foreach($hash as $key => $value)
	{
		// If same-key values differ, only latest retained
		$merged[$key] = $value;

		// Do this to append values for that key
		// $merged[$key][] = $value;
	}
}

// ----------------------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

$drink_colour = array('Galliano' => 'yellow', 'Mai Tai' => 'blue');

// ------------

$ingested_colour = array_merge($food_colour, $drink_colour);

// ------------

$substance_colour = array();

foreach(array($food_colour, $drink_colour) as $hash)
{
	foreach($hash as $substance => $colour)
	{
		if (array_key_exists($substance, $substance_colour))
		{
			echo "Warning {$substance_colour[$substance]} seen twice. Using first definition.\n";
			continue;
		}
		$substance_colour[$substance] = $colour;
	}
}

// @@PLEAC@@_5.11
// PHP offers a number of array-based 'set operation' functions:
// * union:        array_merge
// * intersection: array_intersect and family
// * difference:   array_diff and family
// which may be used for this type of task

// Keys occurring in both hashes
$common = array_intersect_key($h1, $h2);

// Keys occurring in the first hash [left side], but not in the second hash
$this_not_that = array_diff_key($h1, $h2);

// ----------------------------

$food_colour = array('Apple' => 'red', 'Banana' => 'yellow',
										 'Lemon' => 'yellow', 'Carrot' => 'orange');

$citrus_colour = array('Lemon' => 'yellow', 'Orange' => 'orange', 'Lime' => 'green');

$non_citrus = array_diff_key($food_colour, $citrus_colour);

// @@PLEAC@@_5.12
// PHP implements a special type known as a 'resource' that encompasses things like file handles,
// sockets, database connections, and many others. The 'resource' type is, essentially, a
// reference variable that is not readily serialisable. That is to say:
// * A 'resource' may be converted to a string representation via the 'var_export' function
// * That same string cannot be converted back into a 'resource'
// So, in terms of array handling, 'resource' types may be stored as array reference values,
// but cannot be used as keys. 
//
// I suspect it is this type of problem that the Perl::Tie package helps resolve. However, since
// PHP doesn't, AFAIK, sport a similar facility, the examples in this section cannot be
// implemented using file handles as keys

$filenames = array('/etc/termcap', '/vmlinux', '/bin/cat');

foreach($filenames as $filename)
{
	if (!($fh = fopen($filename, 'r'))) continue;

	// Cannot do this as required by the Perl code:
	// $name[$fh] = $filename;

	// Ok
	$name[$filename] = $fh;
}

// Would traverse array via:
//
// foreach(array_keys($name) as $fh)
// ...
// or
//
// foreach($name as $fh => $filename)
// ...
// but since '$fh' cannot be a key, either of these will work:
//
// foreach($name as $filename => $fh)
// or
foreach(array_values($name) as $fh)
{
	fclose($fh);
}

// @@PLEAC@@_5.13
// PHP hashes are dynamic expanding and contracting as entries are added, and removed,
// respectively. Thus, there is no need to presize a hash, nor is there, AFAIK, any
// means of doing so except by the number of datums used when defining the hash

// zero elements
$hash = array();            

// ------------

// three elements
$hash = array('Apple' => 'red', 'Lemon' => 'yellow', 'Carrot' => 'orange');

// @@PLEAC@@_5.14
foreach($array as $element) $count[$element] += 1;

// @@PLEAC@@_5.15
$father = array('Cain' => 'Adam', 'Abel' => 'Adam', 'Seth' => 'Adam', 'Enoch' => 'Cain',
								'Irad' => 'Enoch', 'Mehujael' => 'Irad', 'Methusael'=> 'Mehujael',
								'Lamech' => 'Methusael', 'Jabal' => 'Lamech', 'Jubal' => 'Lamech',
								'Tubalcain' => 'Lamech', 'Enos' => 'Seth');

// ------------

$name = trim(fgets(STDIN));

while (!feof(STDIN))
{
	while (TRUE)
	{
		echo "$name\n";

		// Can use either:
		if (!isset($father[$name])) break;
		$name = $father[$name];

		// or:
		// if (!key_exists($name, $father)) break;
		// $name = $father[$name];

		// or combine the two lines:
		// if (!($name = $father[$name])) break;
	}

	echo "\n";
	$name = trim(fgets(STDIN));
}

// ----------------------------

define(SEP, ' ');

foreach($father as $child => $parent)
{
	if (!$children[$parent])
		$children[$parent] = $child;
	else
		$children[$parent] .= SEP . $child;
}

$name = trim(fgets(STDIN));

while (!feof(STDIN))
{
	echo $name . ' begat ';

	if (!$children[$name])
		echo "Nothing\n"
	else
		echo str_replace(SEP, ', ', $children[$name]) . "\n";

	$name = trim(fgets(STDIN));
}

// ----------------------------

define(SEP, ' ');

$files = array('/tmp/a', '/tmp/b', '/tmp/c');

foreach($files as $file)
{
	if (!is_file($file)) { echo "Skipping {$file}\n"; continue; }
	if (!($fh = fopen($file, 'r'))) { echo "Skipping {$file}\n"; continue; }

	$line = fgets($fh);

	while (!feof($fh))
	{
		if (preg_match('/^\s*#\s*include\s*<([^>]+)>/', $line, $matches))
		{
			if (isset($includes[$matches[1]]))
				$includes[$matches[1]] .= SEP . $file;
			else
				$includes[$matches[1]] = $file;
		}

		$line = fgets($fh);
	}

	fclose($fh);
}

print_r($includes);

// @@PLEAC@@_5.16
// @@INCOMPLETE@@
// @@INCOMPLETE@@

// @@PLEAC@@_9.0
$entry = stat('/bin/vi');
$entry = stat('/usr/bin');
$entry = stat($argv[1]);

// ------------

$entry = stat('/bin/vi');

$ctime = $entry['ctime'];
$size = $entry['size'];

// ----------------------------

// For the simple task of determining whether a file contains, text', a simple
// function that searches for a newline could be implemented. Not exactly
// foolproof, but very simple, low overhead, no installation headaches ...
function containsText($file)
{
	$status = FALSE;

	if (($fp = fopen($file, 'r')))
	{
		while (FALSE !== ($char = fgetc($fp)))
		{
			if ($char == "\n") { $status = TRUE; break; }
		}

		fclose($fp);
	}

	return $status;
}

// PHP offers the [currently experimental] Fileinfo group of functions to
// determine file types based on their contents / 'magic numbers'. This
// is functionality similar to the *NIX, 'file' utility. Note that it must
// first be installed using the PEAR utility [see PHP documentation] 
function isTextFile($file)
{
	// Note: untested code, but I believe this is how it is supposed to work
	$finfo = finfo_open(FILEINFO_NONE);
	$status = (finfo_file($finfo, $file) == 'ASCII text');
	finfo_close($finfo);
	return $status;
}

// Alternatively, use the *NIX utility, 'file', directly
function isTextFile($file)
{
	return exec(trim('file -bN ' . escapeshellarg($file))) == 'ASCII text';
}

// ----

containsText($argv[1]) || die("File {$argv[1]} doesn't have any text in it\n");

isTextFile($argv[1]) || die("File {$argv[1]} doesn't have any text in it\n");

// ----------------------------

$dirname = '/usr/bin/';

($dirhdl = opendir($dirname)) || die("Couldn't open {$dirname}\n");

while (($file = readdir($dirhdl)) !== FALSE)
{
	printf("Inside %s is something called: %s\n", $dirname, $file);
}

closedir($dirhdl);

// @@PLEAC@@_9.1
$filename = 'example.txt';

// Get the file's current access and modification time, respectively
$fs = stat($filename);

$readtime = $fs['atime'];
$writetime = $fs['mtime'];

// Alter $writetime, and $readtime ...

// Update file timestamp
touch($filename, $writetime, $readtime);

// ----------------------------

$filename = 'example.txt';

// Get the file's current access and modification time, respectively
$fs = stat($filename);

$atime = $fs['atime'];
$mtime = $fs['mtime'];

// Dedicated functions also exist to retrieve this information:
//
// $atime = $fileatime($filename);
// $mtime = $filemtime($filename);
//

// Perform date arithmetic. Traditional approach where arithmetic is performed
// directly with Epoch Seconds [i.e. the *NIX time stamp value] will work ...

define('SECONDS_PER_DAY', 60 * 60 * 24);

// Set file's access and modification times to 1 week ago
$atime -= 7 * SECONDS_PER_DAY;
$mtime -= 7 * SECONDS_PER_DAY;

// ... but care must be taken to account for daylight saving. Therefore, the
// recommended approach is to use library functions to perform such tasks:

$atime = strtotime('-7 days', $atime);
$mtime = strtotime('-7 days', $mtime);

// Update file timestamp
touch($filename, $mtime, $atime);

// Good idea to clear the cache after such updates have occurred so fresh
// values will be retrieved on next access
clearstatcache();

// ----------------------------

$argc == 2 || die("usage: {$argv[0]} filename\n");

$filename = $argv[1];
$fs = stat($filename);

$atime = $fs['atime'];
$mtime = $fs['mtime'];

// Careful here: since interactive, use, 'system', not 'exec', to launch [latter
// does not work under *NIX - at least, not for me :)]
system(trim(getenv('EDITOR') . ' vi ' . escapeshellarg($filename)), $retcode);

touch($filename, $mtime, $atime) || die("Error updating timestamp on file, {$filename}!\n");

// @@PLEAC@@_9.2
// The 'unlink' function is used to delete regular files, whilst the 'rmdir' function
// does the same on non-empty directories. AFAIK, no recursive-deletion facility
// exists, and must be manually programmed

$filename = '...';

@unlink($filename) || die("Can't delete, {$filename}!\n");

// ------------

$files = glob('...');
$problem = FALSE;

// Could simply use a foreach loop
foreach($files as $filename) { @unlink($filename) || $problem = TRUE; }

//
// Alternatively, an applicative approach could be used, one closer in spirit to
// largely-functional languages like Scheme
//
// function is_all_deleted($deleted, $filename) { return @unlink($filename) && $deleted; }
// $problem = !array_reduce($files, 'is_all_deleted', TRUE);
//

if ($problem)
{
	fwrite(STDERR, 'Could not delete all of:');
	foreach($files as $filename) { fwrite(STDERR, ' ' . $filename); }
	fwrite(STDERR, "\n"); exit(1);
} 

// ------------

function rmAll($files)
{
	$count = 0;

	foreach($files as $filename) { @unlink($filename) && $count++; };

	return $count;

// An applicative alternative using 'create_function', PHP's rough equivalent of 'lambda' ...
//
//  return array_reduce($files,
//    create_function('$count, $filename', 'return @unlink($filename) && $count++;'), 0);
}

// ----

$files = glob('...');
$toBeDeleted = sizeof($files);
$count = rmAll($files);

($count == $toBeDeleted) || die("Could only delete {$count} of {$toBeDeleted} files\n");

// @@PLEAC@@_9.3
$oldfile = '/tmp/old'; $newfile = '/tmp/new';

copy($oldfile, $newfile) || die("Error copying file\n");

// ----------------------------

// All the following copy a file by copying its contents. Examples do so in a single
// operation, but it is also possible to copy arbitrary blocks, or, line-by-line in 
// the case of 'text' files
$oldfile = '/tmp/old'; $newfile = '/tmp/new';

if (is_file($oldfile))
	file_put_contents($newfile, file_get_contents($oldfile));
else
	die("Problem copying file {$oldfile} to file {$newfile}\n");

// ------------

$oldfile = '/tmp/old'; $newfile = '/tmp/new';

fwrite(($nh = fopen($newfile, 'wb')), fread(($oh = fopen($oldfile, 'rb')), filesize($oldfile)));
fclose($oh);
fclose($nh);

// ------------

// As above, but with some error checking / handling
$oldfile = '/tmp/old'; $newfile = '/tmp/new';

($oh = fopen($oldfile, 'rb')) || die("Problem opening input file {$oldfile}\n");
($nh = fopen($newfile, 'wb')) || die("Problem opening output file {$newfile}\n");

if (($filesize = filesize($oldfile)) > 0)
{
	fwrite($nh, fread($oh, $filesize)) || die("Problem reading / writing file data\n");
}

fclose($oh);
fclose($nh);

// ----------------------------

// Should there be platform-specfic problems copying 'very large' files, it is
// a simple matter to call a system command utility via, 'exec'

// *NIX-specific example. Could check whether, 'exec', succeeded, but checking whether
// a file exists after the operation might be a better approach
$oldfile = '/tmp/old'; $newfile = '/tmp/new';

is_file($newfile) && unlink($newfile);

exec(trim('cp --force ' . escapeshellarg($oldfile) . ' ' . escapeshellarg($newfile)));

is_file($newfile) || die("Problem copying file {$oldfile} to file {$newfile}\n");

// For other operating systems just change:
// * filenames
// * command being 'exec'ed
// as the rest of the code is platform independant

// @@PLEAC@@_9.4
function makeDevInodePair($filename)
{
	if (!($fs = @stat($filename))) return FALSE;
	return strval($fs['dev'] . $fs['ino']);
}

// ------------

function do_my_thing($filename)
{
	// Using a global variable to mimic Perl example, but could easily have passed
	// '$seen' as an argument
	global $seen;

	$devino = makeDevInodePair($filename);

	// Process $filename if it has not previously been seen, else just increment
	if (!isset($seen[$devino]))
	{
		// ... process $filename ...

		// Set initial count
		$seen[$devino] = 1;
	}
	else
	{
		// Otherwise, just increment the count
		$seen[$devino] += 1;
	}
}

// ----

// Simple example
$seen = array();

do_my_thing('/tmp/old');
do_my_thing('/tmp/old');
do_my_thing('/tmp/old');
do_my_thing('/tmp/new');

foreach($seen as $devino => $count)
{
	echo "{$devino} -> {$count}\n";
}

// ------------

// A variation on the above avoiding use of global variables, and illustrating use of
// easily-implemented 'higher order' techniques

// Helper function loosely modelled on, 'array_reduce', but using an array as
// 'accumulator', which is returned on completion
function array_update($arr, $lambda, $updarr)
{
	foreach($arr as $key) $lambda($updarr, $key);
	return $updarr;
}

function do_my_thing(&$seen, $filename)
{
	if (!array_key_exists(($devino = makeDevInodePair($filename)), $seen))
	{
		// ... processing $filename ...

		// Update $seen
		$seen[$devino] = 1;
	}
	else
	{
		// Update $seen
		$seen[$devino] += 1;
	}
}

// ----

// Simple example
$files = array('/tmp/old', '/tmp/old', '/tmp/old', '/tmp/new');

// Could do this ...
$seen = array();
array_update($files, 'do_my_thing', &$seen);

// or this:
$seen = array_update($files, 'do_my_thing', array());

// or a 'lambda' could be used:
array_update($files,
						 create_function('$seen, $filename', '... code not shown ...'),
						 &$seen);

foreach($seen as $devino => $count)
{
	echo "{$devino} -> {$count}\n";
}

// ----------------------------

$files = glob('/tmp/*');

define(SEP, ';');
$seen = array();

foreach($files as $filename)
{
	if (!array_key_exists(($devino = makeDevInodePair($filename)), $seen))
		$seen[$devino] = $filename;
	else
		$seen[$devino] = $seen[$devino] . SEP . $filename;
}

$devino = array_keys($seen);
sort($devino);

foreach($devino as $key)
{
	echo $key . ':';
	foreach(split(SEP, $seen[$key]) as $filename) echo ' ' . $filename;
	echo "\n";
}

// @@PLEAC@@_9.5
// Conventional POSIX-like approach to directory traversal
$dirname = '/usr/bin/';

($dirhdl = opendir($dirname)) || die("Couldn't open {$dirname}\n");

while (($file = readdir($dirhdl)) !== FALSE)
{
	; // ... do something with $dirname/$file
		// ...
}

closedir($dirhdl);

// ------------

// Newer [post PHP 4], 'applicative' approach - an array of filenames is
// generated that may be processed via external loop ...

$dirname = '/usr/bin/';

foreach(scandir($dirname) as $file)
{
	; // ... do something with $dirname/$file
		// ...
}

// .. or, via callback application, perhaps after massaging by one of the
// 'array' family of functions [also uses, 'array_update', from earlier section]

$newlist = array_update(array_reverse(scandir($dirname)),
												create_function('$filelist, $file',  ' ; '),
												array());

// And don't forget that the old standby, 'glob', that returns an array of
// paths filtered using the Bourne Shell-based wildcards, '?' and '*', is
// also available

foreach(glob($dirname . '*') as $path)
{
	; // ... do something with $path
		// ...
}

// ----------------------------

// Uses, 'isTextFile', from an earlier section
$dirname = '/usr/bin/';

echo "Text files in {$dirname}:\n";

foreach(scandir($dirname) as $file)
{
	// Take care when constructing paths to ensure cross-platform operability 
	$path = $dirname . $file;

	if (is_file($path) && isTextFile($path)) echo $path . "\n";
}

// ----------------------------

function plain_files($dirname)
{
	($dirlist = glob($dirname . '*')) || die("Couldn't glob {$dirname}\n");

	// Pass function name directly if only a single function performs filter test
	return array_filter($dirlist, 'is_file');

	// Use, 'create_function', if a multi-function test is needed
	//
	// return array_filter($dirlist, create_function('$path', 'return is_file($path);'));
	//
}

// ------------

foreach(plain_files('/tmp/') as $path)
{
	echo $path . "\n";
}

// @@PLEAC@@_9.6
$dirname = '/tmp/';

// Full paths
$pathlist = glob($dirname . '*.c');

// File names only - glob-based matching
$filelist = array_filter(scandir($dirname),
												 create_function('$file', 'return fnmatch("*.c", $file);'));

// ----------------------------

$dirname = '/tmp/';

// File names only - regex-based matching [case-insensitive]
$filelist = array_filter(scandir($dirname),
												 create_function('$file', 'return eregi("\.[ch]$", $file);'));

// ----------------------------

$dirname = '/tmp/';

// Directory names - all-digit names
$dirs = array_filter(glob($dirname . '*', GLOB_ONLYDIR),
										 create_function('$path', 'return ereg("^[0-9]+$", basename($path));'));

// @@PLEAC@@_9.7
// Recursive directory traversal function and helper: traverses a directory tree
// applying a function [and a variable number of accompanying arguments] to each
// file

class Accumulator
{
	public $value;
	public function __construct($start_value) { $this->value = $start_value; }
}

// ------------

function process_directory_($op, $func_args)
{
	if (is_dir($func_args[0]))
	{
		$current = $func_args[0];
		foreach(scandir($current) as $entry)
		{
			if ($entry == '.' || $entry == '..') continue;
			$func_args[0] = $current . '/' . $entry;
			process_directory_($op, $func_args);
		}
	}
	else
	{
		call_user_func_array($op, $func_args);
	}
}

function process_directory($op, $dir)
{
	if (!is_dir($dir)) return FALSE;
	$func_args = array_slice(func_get_args(), 1);
	process_directory_($op, $func_args);
	return TRUE;
}

// ----------------------------

$dirlist = array('/tmp/d1', '/tmp/d2', '/tmp/d3');

// Do something with each directory in the list
foreach($dirlist as $dir)
{
	;
	// Delete directory [if empty]     -> rmdir($dir); 
	// Make it the 'current directory' -> chdir($dir);
	// Get list of files it contains   -> $filelist = scandir($dir);
	// Get directory metadata          -> $ds = stat($dir);
}

// ------------

$dirlist = array('/tmp/d1', '/tmp/d2', '/tmp/d3');

function pf($path)
{
	// ... do something to the file or directory ...
	printf("%s\n", $path);
}

// For each directory in the list ...
foreach($dirlist as $dir)
{
	// Is this a valid directory ?
	if (!is_dir($dir)) { printf("%s does not exist\n", $dir); continue; }

	// Ok, so get all the directory's entries
	$filelist = scandir($dir);

	// An 'empty' directory will contain at least two entries: '..' and '.'
	if (count($filelist) == 2) { printf("%s is empty\n", $dir); continue; }

	// For each file / directory in the directory ...
	foreach($filelist as $file)
	{
		// Ignore '..' and '.' entries
		if ($file == '.' || $file == '..') continue;

		// Apply function to process the file / directory
		pf($dir . '/' . $file);
	}
}

// ----------------------------

function accum_filesize($file, $accum)
{
	is_file($file) && ($accum->value += filesize($file));
}

// ------------

// Verify arguments ...
$argc == 2 || die("usage: {$argv[0]} dir\n");
$dir = $argv[1];

is_dir($dir) || die("{$dir} does not exist / not a directory\n");

// Collect data [use an object to accumulate results]
$dirsize = new Accumulator(0);
process_directory('accum_filesize', $dir, $dirsize); 

// Report results
printf("%s contains %d bytes\n", $dir, $dirsize->value);

// ----------------------------

function biggest_file($file, $accum)
{
	if (is_file($file))
	{
		$fs = filesize($file);
		if ($accum->value[1] < $fs) { $accum->value[0] = $file; $accum->value[1] = $fs; }
	}
}

// ------------

// Verify arguments ...
$argc == 2 || die("usage: {$argv[0]} dir\n");
$dir = $argv[1];

is_dir($dir) || die("{$dir} does not exist / not a directory\n");

// Collect data [use an object to accumulate results]
$biggest = new Accumulator(array('', 0));
process_directory('biggest_file', $dir, $biggest); 

// Report results
printf("Biggest file is %s containing %d bytes\n", $biggest->value[0], $biggest->value[1]);

// ----------------------------

function youngest_file($file, $accum)
{
	if (is_file($file))
	{
		$fct = filectime($file);
		if ($accum->value[1] > $fct) { $accum->value[0] = $file; $accum->value[1] = $fct; }
	}
}

// ------------

// Verify arguments ...
$argc == 2 || die("usage: {$argv[0]} dir\n");
$dir = $argv[1];

is_dir($dir) || die("{$dir} does not exist / not a directory\n");

// Collect data [use an object to accumulate results]
$youngest = new Accumulator(array('', 2147483647));
process_directory('youngest_file', $dir, $youngest); 

// Report results
printf("Youngest file is %s dating %s\n", $youngest->value[0], date(DATE_ATOM, $youngest->value[1]));

// @@PLEAC@@_9.8
// AFAICT, there is currently no library function that recursively removes a
// directory tree [i.e. a directory, it's subdirectories, and any other files]
// with a single call. Such a function needs to be custom built. PHP tools
// with which to do this:
// * 'unlink', 'rmdir', 'is_dir', and 'is_file' functions, will all take care
//   of the file testing and deletion
// * Actual directory traversal requires obtaining directory / subdirectory
//   lists, and here there is much choice available, though care must be taken
//   as each has it's own quirks
//   - 'opendir', 'readdir', 'closedir'
//   - 'scandir'
//   - 'glob'
//   - SPL 'directory iterator' classes [newish / experimental - not shown here]
//
// The PHP documentation for 'rmdir' contains several examples, each illustrating
// one of each approach; the example shown here is loosely based on one of these
// examples

// Recursor - recursively traverses directory tree
function rmtree_($dir)
{
	$dir = "$dir";

	if ($dh = opendir($dir))
	{
		while (FALSE !== ($item = readdir($dh)))
		{
			if ($item != '.' && $item != '..')
			{
				$subdir = $dir . '/' . "$item";

				if (is_dir($subdir)) rmtree_($subdir);
				else @unlink($subdir);
			}
		}

		closedir($dh); @rmdir($dir);
	}
}

// Launcher - performs validation then starts recursive routine
function rmtree($dir)
{
	if (is_dir($dir))
	{
		(substr($dir, -1, 1) == '/') && ($dir = substr($dir, 0, -1));
		rmtree_($dir); return !is_dir($dir);
	}

	return FALSE;
}

// ------------

$argc == 2 || die("usage: rmtree dir\n");

rmtree($argv[1]) || die("Could not remove directory {$argv[1]}\n");

// @@PLEAC@@_9.9
$filepairs = array('x.txt' => 'x2.txt', 'y.txt' => 'y.doc', 'zxc.txt' => 'cxz.txt');

foreach($filepairs as $oldfile => $newfile)
{
	@rename($oldfile, $newfile) || fwrite(STDERR, sprintf("Could not rename %s to %s\n", $oldfile, $newfile));
}

// ----------------------------

// Call a system command utility via, 'exec'. *NIX-specific example. Could check whether,
// 'exec', succeeded, but checking whether a renamed file exists after the operation might
// be a better approach

$oldfile = '/tmp/old'; $newfile = '/tmp/new';

is_file($newfile) && unlink($newfile);

exec(trim('mv --force ' . escapeshellarg($oldfile) . ' ' . escapeshellarg($newfile)));

is_file($oldfile) || die("Problem renaming file {$oldfile} to file {$newfile}\n");

// For other operating systems just change:
// * filenames
// * command being 'exec'ed
// as the rest of the code is platform independant

// ----------------------------

// A modified implementation of Larry's Filename Fixer. Rather than passing
// a single expression, a 'from' regexp is passed; each match in the file
// name(s) is changed to the value of 'to'. It otherwise behaves the same
//

$argc > 2 || die("usage: rename from to [file ...]\n");

$from = $argv[1];
$to = $argv[2]; 

if (count(($argv = array_slice($argv, 3))) < 1)
	while (!feof(STDIN)) $argv[] = substr(fgets(STDIN), 0, -1);

foreach($argv as $file)
{
	$was = $file;
	$file = ereg_replace($from, $to, $file);

	if (strcmp($was, $file) != 0)
		@rename($was, $file) || fwrite(STDERR, sprintf("Could not rename %s to %s\n", $was, $file));
}

// @@PLEAC@@_9.10
$base = basename($path);
$dir = dirname($path);

// PHP's equivalent to Perl's 'fileparse'
$pathinfo = pathinfo($path);

$base = $pathinfo['basename'];
$dir = $pathinfo['dirname'];
$ext = $pathinfo['extension'];

// ----------------------------

$path = '/usr/lib/libc.a';

printf("dir is %s, file is %s\n", dirname($path), basename($path));

// ------------

$path = '/usr/lib/libc.a';

$pathinfo = pathinfo($path);

printf("dir is %s, name is %s, extension is %s\n", $pathinfo['dirname'], $pathinfo['basename'], $pathinfo['extension']);

// ----------------------------

// Handle Mac example as a simple parse task. However, AFAIK, 'pathinfo' is cross-platform,
// so should handle file path format differences transparently
$path = 'Hard%20Drive:System%20Folder:README.txt';

$macp = array_combine(array('drive', 'folder', 'filename'), split("\:", str_replace('%20', ' ', $path)));
$macf = array_combine(array('name', 'extension'), split("\.", $macp['filename'])); 

printf("dir is %s, name is %s, extension is %s\n", ($macp['drive'] . ':' . $macp['folder']), $macf['name'], ('.' . $macf['extension']));

// ----------------------------

// Not really necessary since we have, 'pathinfo', but better matches Perl example
function file_extension($filename, $separator = '.')
{
	return end(split(("\\" . $separator), $filename));
}

// ----

echo file_extension('readme.txt') . "\n";

// @@PLEAC@@_9.11
// @@INCOMPLETE@@
// @@INCOMPLETE@@

// @@PLEAC@@_9.12
// @@INCOMPLETE@@
// @@INCOMPLETE@@

// @@PLEAC@@_10.0
// Since defined at outermost scope, $greeted may be considered a global variable
$greeted = 0;

// ------------

// Must use, 'global', keyword to inform functions that $greeted already exists as
// a global variable. If this is not done, a local variable of that name is implicitly
// defined
function howManyGreetings()
{
	global $greeted;
	return $greeted;
}

function hello()
{
	global $greeted;
	$greeted++;
	echo "high there!, this procedure has been called {$greeted} times\n";
}

// ------------

hello();
$greetings = howManyGreetings();
echo "bye there!, there have been {$greetings} greetings so far\n";

// @@PLEAC@@_10.1
// Conventionally-defined function together with parameter list
function hypotenuse($side1, $side2)
{
	return sqrt(pow($side1, 2) + pow($side2, 2));
}

// ----

// Alternative is to define the function without parameter list, then use
// 'func_get_arg' to extract arguments
function hypotenuse()
{
	// Could check number of arguments passed with: 'func_num_args', which
	// would be the approach used if dealing with variable number of arguments
	$side1 = func_get_arg(0); $side2 = func_get_arg(1);

	return sqrt(pow($side1, 2) + pow($side2, 2));
}

// ------------

// 1. Conventional function call
$diag = hypotenuse(3, 4);

// ------------

// 2. Function call using, 'call_user_func' library routines
$funcname = 'hypotenuse';

// a. Pass function name, and variable number of arguments
$diag = call_user_func($funcname, 3, 4);

// b. Package arguments as array, pass together with function name
$args = array(3, 4); 
$diag = call_user_func_array($funcname, $args);

// ----------------------------

$nums = array(1.4, 3.5, 6.7);

// ------------

// Pass-by-value
function int_all($arr)
{
	return array_map(create_function('$n', 'return (int) $n;'), $arr);
}

// Pass-by-reference
function trunc_em(&$n)
{
	foreach ($n as &$value) $value = (int) $value;
}

// ------------

// $nums untouched; $ints is new array
$ints = int_all($nums);

// $nums updated
trunc_em($nums);

// @@PLEAC@@_10.2
// Strictly-speaking, PHP is neither lexically [no environment capture] nor
// dynamically [no variable shadowing] scoped. A script in which several
// functions have been defined has two, entirely separate, scopes:
//
// * A 'top-level' scope i.e. everything outside each function
//
// * A 'local scope' within each function; each function is a self-contained
//   entity and cannot [via conventional means] access variables outside its
//   local scope. Accessing a variable that has not been locally defined
//   serves to define it i.e. accessing a variable assumed to be global
//   sees a local variable of that name defined
//
// The way 'global' variables are provided is via a predefined array of
// variable names, $GLOBALS [it is one of a special set of variables known
// as 'superglobals'; such variables *are* accessable in all scopes]. Each
// entry in this array is a 'global' variable name, and may be freely
// accessed / updated. A more convenient means of accessing such variables
// is via the 'global' keyword: one or more variables within a function is
// declared 'global', and those names are then taken to refer to entries
// in the $GLOBALS array rather than seeing local variables of that name
// accessed or defined

function some_func()
{
	// Variables declared within a function are local to that function
	$variable = 'something';
}

// ----------------------------

// Top-level declared variables
$name = $argv[1]; $age = $argv[2];

$c = fetch_time();

$condition = 0;

// ------------

function run_check()
{
	// The globally-declared variable, '$condition', is not accessable within
	// the function unless it declared as 'global. Had this not been done then
	// attempts to access, '$condition', would have seen a local variable
	// of that name declared and updated. Same applies to other variables
	global $condition, $name, $age, $c;

	$condition = 1;
	// ...
}

function check_x($x)
{
	$y = 'whatever';

	// This function only has access to the parameter, '$x', and the locally
	// declared variable, '$y'.

	// Whilst 'run_check' has access to several global variables, the current
	// function does not. For it to access the global variable, '$condition',
	// it must be declared 'global'
	run_check();

	global $condition;

	// 'run_check' will have updated, '$condition', and since it has been
	// declared 'global' here, it is accessable

	if ($condition)
	{
		; // ...
	}
}

// @@PLEAC@@_10.3
// Local scopes are not created in the same way as in Perl [by simply enclosing
// within braces]: only via the creation of functions are local scopes created

// Doesn't create a local scope; '$myvariable' is created at top-level
{
	$myvariable = 7;
}

// '$myvariable' is accessable here
echo $myvariable . "\n";

// ------------

{
	$counter = 0;

	// Local scope created within function, but not within surrounding braces
	// so:
	// * '$counter' is actually a top-level variable, so globally accessable
	// * 'next_counter' has no implict access to '$counter'; must be granted
	//   via 'global' keyword

	function next_counter() { global $counter; $counter++; }
}

// ----------------------------

// PHP doesn't, AFAIK, offer an equivalent to Perl's BEGIN block. Similar
// behaviour may be obtained by defining a class, and including such code
// in its constructor

class BEGIN
{
	private $myvariable;

	function __construct()
	{
		$this->myvariable = 5;
	}

	function othersub()
	{
		echo $this->myvariable . "\n";
	}
}

// ------------

$b = new BEGIN();

$b->othersub();

// ----------------------------

// PHP, like C, supports 'static' local variables, that is, those that upon
// first access are initialised, and thence retain their value between function
// calls. However, the 'counter' example is better implemented as a class

class Counter
{
	private $counter;

	function __construct($counter_init)
	{
		$this->counter = $counter_init;
	}

	function next_counter() { $this->counter++; return $this->counter; }
	function prev_counter() { $this->counter; return $this->counter; }
}

// ------------

$counter = new Counter(42);
echo $counter->next_counter() . "\n";
echo $counter->next_counter() . "\n";
echo $counter->prev_counter() . "\n";

// @@PLEAC@@_10.4
// AFAICT there is no means of obtaining the name of the currently executing
// function, or, for that matter, perform any stack / activation record,
// inspection. It *is* possible to:
//
// * Obtain a list of the currently-defined functions ['get_defined_functions']
// * Check whether a specific function exists ['function_exists']
// * Use the 'Reflection API'
//
// So, to solve this problem would seem to require adopting a convention where
// a string representing the function name is passed as an argument, or a local
// variable [perhaps called, '$name'] is so set [contrived, and of limited use]

function whoami()
{
	$name = 'whoami';
	echo "I am: {$name}\n";
}

// ------------

whoami();

// @@PLEAC@@_10.5
// In PHP all items exist as 'memory references' [i.e. non-modifiable pointers],
// so when passing an item as a function argument, or returning an item from
// a function, it is this 'memory reference' that is passed, and *not* the
// contents of that item. Should several references to an item exist [e.g. if
// passed to a function then at least two such references would exist in
// different scopes] they would all be refering to the same copy of the item.
// However, if an attempt is made to alter the item is made, a copy is made
// and it is the copy that is altered, leaving the original intact.
// 
// The PHP reference mechanism is used to selectively prevent this behaviour,
// and ensure that if a change is made to an item that no copy is made, and that
// it is the original item that is changed. Importantly, there is no efficiency
// gain from passing function parameters using references if the parameter item
// is not altered.

// A copy of the item referred to by, '$arr', is made, and altered; original
// remains intact
function array_by_value($arr)
{
	$arr[0] = 7;
	echo $arr[0] . "\n"; 
}

// No copy is made; original item referred to by, '$arr', is altered
function array_by_ref(&$arr)
{
	$arr[0] = 7;
	echo $arr[0] . "\n"; 
}

// ------------

$arr = array(1, 2, 3);

echo $arr[0] . "\n";         // output: 1 
array_by_value($arr);        // output: 7
echo $arr[0] . "\n";         // output: 1 

$arr = array(1, 2, 3);

echo $arr[0] . "\n";         // output: 1 
array_by_ref($arr);          // output: 7
echo $arr[0] . "\n";         // output: 7 

// ----------------------------

// Since, 'add_vecpair', does not attempt to alter either, '$x' or '$y', it makes
// no difference whether they are 'passed by value', or 'passed by reference'
function add_vecpair($x, $y)
{
	$r = array();
	$length = count($x);
	for($i = 0; $i < $length; $i++) $r[$i] = $x[$i] + $y[$i];
	return $r;
}

// ...
count($arr1) == count($arr2) || die("usage: add_vecpair ARR1 ARR2\n");

// 'passed by value'
$arr3 = add_vecpair($arr1, $arr2);

// 'passed by reference' [also possible to override default 'passed by value'
// if required]
$arr3 = add_vecpair(&$arr1, &$arr2);

// @@PLEAC@@_10.6
// PHP can be described as a dynamically typed language because variables serve
// as identifiers, and the same variable may refer to data of various types.
// As such, the set of arguments passed to a function may vary in type between
// calls, as can the type of return value. Where this is likely to occur type
// checking should be performed either / both within the function body, and
// when obtaining it's return value. As for Perl-style 'return context', I
// don't believe it is supported by PHP

// Can return any type
function mysub()
{
	// ...
	return 5;
	// ...
	return array(5);
	// ...
	return '5';
}

// Throw away return type [i.e. returns a 'void' type ?]
mysub();

// Check return type. Can do via:
// * gettype($var)
// * is_xxx e.g. is_array($var), is_muneric($var), ...
$ret = mysub();

if (is_numeric($ret))
{
	; // ...
}

if (is_array($ret))
{
	; // ...
}

if (is_string($ret))
{
	; // ...
}

// @@PLEAC@@_10.7
// PHP doesn't directly support named / keyword parameters, but these can be
// easily mimiced using a class of key / value pairs, and passing a variable
// number of arguments

class KeyedValue
{
	public $key, $value;
	public function __construct($key, $value) { $this->key = $key; $this->value = $value; }
}

function the_func()
{
	foreach (func_get_args() as $arg)
	{
		printf("Key: %10s|Value:%10s\n", $arg->key, $arg->value);
	}
}

// ----

the_func(new KeyedValue('name', 'Bob'),
				 new KeyedValue('age', 36),
				 new KeyedValue('income', 51000));

// ----------------------------

// Alternatively, an associative array of key / value pairs may be constructed.
// With the aid of the 'extract' built-in function, the key part of this array
// may be intsntiated to a variable name, thus more closely approximating the
// behaviour of true named parameters

function the_func($var_array)
{
	extract($var_array);

	if (isset($name)) printf("Name:   %s\n", $name);
	if (isset($age)) printf("Age:    %s\n", $age);
	if (isset($income)) printf("Income: %s\n", $income);
}

// ----

the_func(array('name' => 'Bob', 'age' => 36, 'income' => 51000));

// ----------------------------

class RaceTime
{
	public $time, $dim;
	public function __construct($time, $dim) { $this->time = $time; $this->dim = $dim; }
}

function the_func($var_array)
{
	extract($var_array);

	if (isset($start_time)) printf("start:  %d - %s\n", $start_time->time, $start_time->dim);
	if (isset($finish_time)) printf("finish: %d - %s\n", $finish_time->time, $finish_time->dim);
	if (isset($incr_time)) printf("incr:   %d - %s\n", $incr_time->time, $incr_time->dim);
}

// ----

the_func(array('start_time' => new RaceTime(20, 's'),
							 'finish_time' => new RaceTime(5, 'm'),
							 'incr_time' => new RaceTime(3, 'm')));

the_func(array('start_time' => new RaceTime(5, 'm'),
							 'finish_time' => new RaceTime(30, 'm')));

the_func(array('start_time' => new RaceTime(30, 'm')));

// @@PLEAC@@_10.8
// The 'list' keyword [looks like a function but is actually a special language
// construct] may be used to perform multiple assignments from a numerically
// indexed array of values, and offers the added bonus of being able to skip
// assignment of one, or more, of those values

function func() { return array(3, 6, 9); }

// ------------

list($a, $b, $c) = array(6, 7, 8);

// Provided 'func' returns an numerically-indexed array, the following
// multiple assignment will work
list($a, $b, $c) = func();

// Any existing variables no longer wanted would need to be 'unset'
unset($b);

// As above, but second element of return array discarded
list($a,,$c) = func();

// ----------------------------

// Care needed to ensure returned array is numerically-indexed
list($dev, $ino,,,$uid) = array_slice(array_values(stat($filename)), 0, 13);

// @@PLEAC@@_10.9
// Multiple return values are possible via packing a set of values within a
// numerically-indexed array and using 'list' to extract them

function some_func() { return array(array(1, 2, 3), array('a' => 1, 'b' => 2)); }

// ------------

list($arr, $hash) = some_func();

// ----------------------------

function some_func(&$arr, &$hash) { return array($arr, $hash); }

// ------------

$arrin = array(1, 2, 3); $hashin = array('a' => 1, 'b' => 2);

list($arr, $hash) = some_func($arrin, $hashin);

// @@PLEAC@@_10.10
// AFAICT, most of the PHP library functions are designed to return some required 
// value on success, and FALSE on exit. Whilst it is possible to return NULL, or
// one of the recognised 'empty' values [e.g. '' or 0 or an empty array etc],
// FALSE actually seems to be the preferred means of indicating failure

function a_func() { return FALSE; }

a_func() || die("Function failed\n");

if (!a_func()) die("Function failed\n");

// @@PLEAC@@_10.11
// Whether PHP is seen to support prototyping depends on the accepted
// definition of this term:
//
// * Prototyping along the lines used in Ada, Modula X, and even C / C++,
//   in which a function's interface is declared separately from its
//   implementation, is *not* supported
//
// * Prototyping in which, as part of the function definition, parameter
//   information must be supplied. In PHP a function definition neither
//   parameter, nor return type, information needs to be supplied, though
//   it is usual to see a parameter list supplied [indicates the number,
//   positional order, and optionally, whether a parameter is passed by
//   reference; no type information is present]. In short, prototyping in
//   PHP is optional, and limited

function func_with_one_arg($arg1)
{
	; // ...
}

function func_with_two_arg($arg1, $arg2)
{
	; // ...
}

function func_with_three_arg($arg1, $arg2, $arg3)
{
	; // ...
}

// The following may be interpreted as meaning a function accepting no
// arguments:
function func_with_no_arg()
{
	; // ...
}

// whilst the following may mean a function taking zero or more arguments
function func_with_no_arg_information()
{
	; // ...
}

// @@PLEAC@@_10.12
// Unlike in Perl, PHP's 'die' [actually an alias for 'exit'] doesn't throw
// an exception, but instead terminates the script, optionally either
// returning an integer value to the operating system, or printing a message.
// So, the following, does not exhibit the same behaviour as the Perl example

die("some message\n"); 

// Instead, like so many modern languages, PHP implements exception handling
// via the 'catch' and 'throw' keywords. Furthermore, a C++ or Java programmer
// would find PHP's exception handling facility remarkably similar to those
// of their respective languages. A simple, canonical example follows:

// Usual to derive new exception classes from the built-in, 'Exception',
// class
class MyException extends Exception
{
	// ...
}

// ...

try
{
	// ...
	if ($some_problem_detected) throw new MyException('some message', $some_error_code);
	// ..
}

catch (MyException $e)
{
	; // ... handle the problem ...
}

// ----------------------------

class FullMoonException extends Exception
{
	// ...
}

// ...

try
{
	// ...
	if ($some_problem_detected) throw new FullMoonException('...', $full_moon_error_code);
	// ..
}

catch (FullMoonException $e)
{
	// ... rethrow the exception - will propagate to higher level ...
	throw $e;
}

// @@PLEAC@@_10.13
// Please refer to discussion about PHP scope in section two of this chapter.
// Briefly, PHP assumes a variable name within a function to be local unless
// it has been specifically declared with the, 'global', keyword, in which
// case it refers to a variable in the 'superglobal' array, '$GLOBALS'. Thus,
// inadvertant variable name shadowing cannot occur since it is it not possible 
// to use the same name to refer to both a local and a global variable. If
// accessing a global variable care should be taken to not accidentally update
// it. The techniques used in this section are simply not required.

// *** NOT TRANSLATED ***

// @@PLEAC@@_10.14
// In PHP once a function has been defined it remains defined. In other words,
// it cannot be undefined / deleted, nor can that particular function name be
// reused to reference another function body. Even the lambda-like functions
// created via the 'create_function' built-in, cannot be undefined [they exist
// until script termination, thus creating too many of these can actually
// exhaust memory !]. However, since the latter can be assigned to variables,
// the same variable name can be used to reference difference functions [and
// when this is done the reference to the previous function is lost (unless
// deliberately saved), though the function itself continues to exist].
//
// If, however, all that is needed is a simple function aliasing facility,
// then just assign the function name to a variable, and execute using the
// variable name

// Original function
function expand() { echo "expand\n"; }

// Prove that function exists
echo (function_exists('expand') ? 'yes' : 'no') . "\n";

// Use a variable to alias it
$grow = 'expand';

// Call function via original name, and variable, respectively
expand();

$grow(); 

// Remove alias variable
unset($grow);

// ----------------------------

function fred() { echo "fred\n"; }

$barney = 'fred';

$barney();

unset($barney);

fred();

// ------------

$fred = create_function('', 'echo "fred\n";');

$barney = $fred;

$barney();

unset($barney);

$fred();

// ----------------------------

function red($text) { return "<FONT COLOR='red'>$text</FONT>"; }

echo red('careful here') . "\n";

// ------------

$colour = 'red';

$$colour = create_function('$text', 'global $colour;
return "<FONT COLOR=\'$colour\'>$text</FONT>";');

echo $$colour('careful here') . "\n";

unset($$colour);

// ----

$colours = split(' ', 'red blue green yellow orange purple violet');

foreach ($colours as $colour)
{
	$$colour = create_function('$text', 'global $colour;
	return "<FONT COLOR=\'$colour\'>$text</FONT>";');
}

foreach ($colours as $colour) { echo $$colour("Careful with this $colour, James") . "\n"; }

foreach ($colours as $colour) { unset($$colour); }

// @@PLEAC@@_10.15
// PHP sports an AUTOLOAD facility that is quite easy to use, but, AFAICT, is geared
// towards the detection of unavailable classes rather than for individual functions.
// Here is a rudimentary example:

function __autoload($classname)
{
	if (!file_exists($classname))
	{
		// Class file does not exist, so handle situation; in this case,
		// issue error message, and exit program
		die("File for class: {$classname} not found - aborting\n");
	}
	else
	{
		// Class file exists, so load it
		require_once $classname;
	}
}

// ------------

// Attempt to instantiate object of undefined class 
new UnknownClassObject();

// Execution continues here if class exists
// ...

// ----------------------------

// It is also possible to perform [quite extensive] introspection on functions,
// variables etc, so it is possible to check whether a function exists before
// executing it, thus allowing a non-existent functions to be searched for and
// loaded from a source file, or perhaps dynamically defined. An example of what
// could be described as a custom autoload facility appears below.

$colours = array('red', 'blue', 'green', 'yellow', 'orange', 'purple', 'violet');

foreach ($colours as $colour)
{
	$$colour = create_function('$text', 'global $colour;
	return "<FONT COLOR=\'$colour\'>$text</FONT>";');
}

// Let's add a new colour to the list
array_push($colours, 'chartreuse'); 

foreach ($colours as $colour)
{
	// Checking whether function is defined
	if (!function_exists($$colour))
	{
		// Doesn't exist, so dynamically define it
		$$colour = create_function('$text', 'global $colour;
		return "<FONT COLOR=\'$colour\'>$text</FONT>";');

		// Alternatively, if it exists in a source file, 'include' the file:
		// include 'newcolours.php'
	}

	echo $$colour("Careful with this $colour, James") . "\n";
}

foreach ($colours as $colour) unset($$colour); 

// @@PLEAC@@_10.16
// *** Warning *** Whilst PHP *does* allow functions to be defined within other
// functions it needs to be clearly understood that these 'inner' functions:
// * Do not exist until the outer function is called a first time, at which time
//   they then remain defined
// * Are global in scope, so are accessable outside the function by their name;
//   the fact that they are nested within another function has, AFAICT, no bearing
//   on name resolution
// * Do not form a closure: the inner function is merely 'parked' within the
//   outer function, and has no implicit access to the outer function's variables
//   or other inner functions

function outer($arg)
{
	$x = $arg + 35;
	function inner() { return $x * 19; }

	// *** wrong *** 'inner' returns 0 * 19, not ($arg + 35) * 19
	return $x + inner();
}

// ----------------------------

function outer($arg)
{
	$x = $arg + 35;

	// No implicit access to outer function scope; any required data must be
	// explicity passed
	function inner($x) { return $x * 19; }

	return $x + inner($x);
}

// ------------ 

// Equivalent to previously-shown code
function inner($x)
{
	return $x * 19;
}

function outer($arg)
{
	$x = $arg + 35;
	return $x + inner($x);
}

// @@PLEAC@@_10.17
// @@INCOMPLETE@@
// @@INCOMPLETE@@

// @@PLEAC@@_16.1
// Run a command and return its results as a string.
$output_string = shell_exec('program args');

// Same as above, using backtick operator.
$output_string = `program args`;

// Run a command and return its results as a list of strings,
// one per line.
$output_lines = array();
exec('program args', $output_lines);

// -----------------------------

// The only way to execute a program without using the shell is to
// use pcntl_exec(). However, there is no way to do redirection, so
// you can't capture its output.

$pid = pcntl_fork();
if ($pid == -1) {
		die('cannot fork');
} elseif ($pid) {
		pcntl_waitpid($pid, $status);
} else {
		// Note that pcntl_exec() automatically prepends the program name
		// to the array of arguments; the program name cannot be spoofed.
		pcntl_exec($program, array($arg1, $arg2));
}

// @@PLEAC@@_16.2
// Run a simple command and retrieve its result code.
exec("vi $myfile", $output, $result_code);

// -----------------------------

// Use the shell to perform redirection.
exec('cmd1 args | cmd2 | cmd3 >outfile');
exec('cmd args <infile >outfile 2>errfile');

// -----------------------------

// Run a command, handling its result code or signal.
$pid = pcntl_fork();
if ($pid == -1) {
		die('cannot fork');
} elseif ($pid) {
		pcntl_waitpid($pid, $status);
		if (pcntl_wifexited($status)) {
				$status = pcntl_wexitstatus($status);
				echo "program exited with status $status\n";
		} elseif (pcntl_wifsignaled($status)) {
				$signal = pcntl_wtermsig($status);
				echo "program killed by signal $signal\n";
		} elseif (pcntl_wifstopped($status)) {
				$signal = pcntl_wstopsig($status);
				echo "program stopped by signal $signal\n";
		}
} else {
		pcntl_exec($program, $args);
}

// -----------------------------

// Run a command while blocking interrupt signals.
$pid = pcntl_fork();
if ($pid == -1) {
		die('cannot fork');
} elseif ($pid) {
		// parent catches INT and berates user
		declare(ticks = 1);
		function handle_sigint($signal) {
				echo "Tsk tsk, no process interruptus\n";
		}
		pcntl_signal(SIGINT, 'handle_sigint');
		while (!pcntl_waitpid($pid, $status, WNOHANG)) {}
} else {
		// child ignores INT and does its thing
		pcntl_signal(SIGINT, SIG_IGN);
		pcntl_exec('/bin/sleep', array('10'));
}

// -----------------------------

// Since there is no direct access to execv() and friends, and
// pcntl_exec() won't let us supply an alternate program name
// in the argument list, there is no way to run a command with
// a different name in the process table.

// @@PLEAC@@_16.3
// Transfer control to the shell to run another program.
pcntl_exec('/bin/sh', array('-c', 'archive *.data'));
// Transfer control directly to another program.
pcntl_exec('/path/to/archive', array('accounting.data'));

// @@PLEAC@@_16.4
// Handle each line in the output of a process.
$readme = popen('program arguments', 'r');
while (!feof($readme)) {
		$line = fgets($readme);
		if ($line === false) break;
		// ...
}
pclose($readme);

// -----------------------------

// Write to the input of a process.
$writeme = popen('program arguments', 'w');
fwrite($writeme, 'data');
pclose($writeme);

// -----------------------------

// Wait for a process to complete.
$f = popen('sleep 1000000', 'r');  // child goes to sleep
pclose($f);                        // and parent goes to lala land

// -----------------------------

$writeme = popen('program arguments', 'w');
fwrite($writeme, "hello\n");  // program will get hello\n on STDIN
pclose($writeme);             // program will get EOF on STDIN

// -----------------------------

// Output buffering callback that sends output to the pager.
function ob_pager($output, $mode) {
		static $pipe;
		if ($mode & PHP_OUTPUT_HANDLER_START) {
				$pager = getenv('PAGER');
				if (!$pager) $pager = '/usr/bin/less';  // XXX: might not exist
				$pipe = popen($pager, 'w');
		}
		fwrite($pipe, $output);
		if ($mode & PHP_OUTPUT_HANDLER_END) {
				pclose($pipe);
		}
}

// Redirect standard output to the pager.
ob_start('ob_pager');

// Do something useful that writes to standard output, then
// close the output buffer.
// ...
ob_end_flush();

// @@PLEAC@@_16.5
// Output buffering: Only display a certain number of lines of output.
class Head {
		function Head($lines=20) {
				$this->lines = $lines;
		}

		function filter($output, $mode) {
				$result = array();
				$newline = '';
				if (strlen($output) > 0 && $output[strlen($output) - 1] == "\n") {
						$newline = "\n";
						$output = substr($output, 0, -1);
				}
				foreach (explode("\n", $output) as $i => $line) {
						if ($this->lines > 0) {
								$this->lines--;
								$result[] = $line;
						}
				}
				return $result ? implode("\n", $result) . $newline : '';
		}
}

// Output buffering: Prepend line numbers to each line of output.
class Number {
		function Number() {
				$this->line_number = 0;
		}

		function filter($output, $mode) {
				$result = array();
				$newline = '';
				if (strlen($output) > 0 && $output[strlen($output) - 1] == "\n") {
						$newline = "\n";
						$output = substr($output, 0, -1);
				}
				foreach (explode("\n", $output) as $i => $line) {
						$this->line_number++;
						$result[] = $this->line_number . ': ' . $line;
				}
				return implode("\n", $result) . $newline;
		}
}

// Output buffering: Prepend "> " to each line of output.
class Quote {
		function Quote() {
		}

		function filter($output, $mode) {
				$result = array();
				$newline = '';
				if (strlen($output) > 0 && $output[strlen($output) - 1] == "\n") {
						$newline = "\n";
						$output = substr($output, 0, -1);
				}
				foreach (explode("\n", $output) as $i => $line) {
						$result[] = "> $line";
				}
				return implode("\n", $result) . $newline;
		}
}

// Use arrays as callbacks to register filter methods.
ob_start(array(new Head(100), 'filter'));
ob_start(array(new Number(), 'filter'));
ob_start(array(new Quote(), 'filter'));

// Act like /bin/cat.
while (!feof(STDIN)) {
		$line = fgets(STDIN);
		if ($line === false) break;
		echo $line;
}

// Should match number of calls to ob_start().
ob_end_flush();
ob_end_flush();
ob_end_flush();

// @@PLEAC@@_16.6
// Process command-line arguments using fopen(). PHP supports URLs for
// filenames as long as the "allow_url_fopen" configuration option is set.
//
// Valid URL protocols include:
//   - http://www.myserver.com/myfile.html
//   - ftp://ftp.myserver.com/myfile.txt
//   - compress.zlib://myfile.gz
//   - php://stdin
//
// See http://www.php.net/manual/en/wrappers.php for details.
//
$filenames = array_slice($argv, 1);
if (!$filenames) $filenames = array('php://stdin');
foreach ($filenames as $filename) {
		$handle = @fopen($filename, 'r');
		if ($handle) {
				while (!feof($handle)) {
						$line = fgets($handle);
						if ($line === false) break;
						// ...
				}
				fclose($handle);
		} else {
				die("can't open $filename\n");
		}
}

// @@PLEAC@@_16.7
$output = `cmd 2>&1`;                          // with backticks
// or
$ph = popen('cmd 2>&1');                       // with an open pipe
while (!feof($ph)) { $line = fgets($ph); }     // plus a read
// -----------------------------
$output = `cmd 2>/dev/null`;                   // with backticks
// or
$ph = popen('cmd 2>/dev/null');                // with an open pipe
while (!feof($ph)) { $line = fgets($ph); }     // plus a read
// -----------------------------
$output = `cmd 2>&1 1>/dev/null`;              // with backticks
// or
$ph = popen('cmd 2>&1 1>/dev/null');           // with an open pipe
while (!feof($ph)) { $line = fgets($ph); }     // plus a read
// -----------------------------
$output = `cmd 3>&1 1>&2 2>&3 3>&-`;           // with backticks
// or
$ph = popen('cmd 3>&1 1>&2 2>&3 3>&-|');       // with an open pipe
while (!feof($ph)) { $line = fgets($ph); }     // plus a read
// -----------------------------
exec('program args 1>/tmp/program.stdout 2>/tmp/program.stderr');
// -----------------------------
$output = `cmd 3>&1 1>&2 2>&3 3>&-`;
// -----------------------------
$fd3 = $fd1;
$fd1 = $fd2;
$fd2 = $fd3;
$fd3 = null;
// -----------------------------
exec('prog args 1>tmpfile 2>&1');
exec('prog args 2>&1 1>tmpfile');
// -----------------------------
// exec('prog args 1>tmpfile 2>&1');
$fd1 = "tmpfile";        // change stdout destination first
$fd2 = $fd1;             // now point stderr there, too
// -----------------------------
// exec('prog args 2>&1 1>tmpfile');
$fd2 = $fd1;             // stderr same destination as stdout
$fd1 = "tmpfile";        // but change stdout destination

// @@PLEAC@@_16.8
// Connect to input and output of a process.
$proc = proc_open($program,
									array(0 => array('pipe', 'r'),
												1 => array('pipe', 'w')),
									$pipes);
if (is_resource($proc)) {
		fwrite($pipes[0], "here's your input\n");
		fclose($pipes[0]);
		echo stream_get_contents($pipes[1]);
		fclose($pipes[1]);
		$result_code = proc_close($proc);
		echo "$result_code\n";
}

// -----------------------------

$all = array();
$outlines = array();
$errlines = array();
exec("( $cmd | sed -e 's/^/stdout: /' ) 2>&1", $all);
foreach ($all as $line) {
		$pos = strpos($line, 'stdout: ');
		if ($pos !== false && $pos == 0) {
				$outlines[] = substr($line, 8);
		} else {
				$errlines[] = $line;
		}
}
print("STDOUT:\n");
print_r($outlines);
print("\n");
print("STDERR:\n");
print_r($errlines);
print("\n");

// @@PLEAC@@_16.9
$proc = proc_open($cmd,
									array(0 => array('pipe', 'r'),
												1 => array('pipe', 'w'),
												2 => array('pipe', 'w')),
									$pipes);

if (is_resource($proc)) {
		// give end of file to kid, or feed him
		fclose($pipes[0]);

		// read till EOF
		$outlines = array();
		while (!feof($pipes[1])) {
				$line = fgets($pipes[1]);
				if ($line === false) break;
				$outlines[] = rtrim($line);
		}

		// XXX: block potential if massive
		$errlines = array();
		while (!feof($pipes[2])) {
				$line = fgets($pipes[2]);
				if ($line === false) break;
				$errlines[] = rtrim($line);
		}

		fclose($pipes[1]);
		fclose($pipes[2]);
		proc_close($proc);

		print("STDOUT:\n");
		print_r($outlines);
		print("\n");
		print("STDERR:\n");
		print_r($errlines);
		print("\n");
}

// -----------------------------

// cmd3sel - control all three of kids in, out, and error.
$cmd = "grep vt33 /none/such - /etc/termcap";
$proc = proc_open($cmd,
									array(0 => array('pipe', 'r'),
												1 => array('pipe', 'w'),
												2 => array('pipe', 'w')),
									$pipes);

if (is_resource($proc)) {
		fwrite($pipes[0], "This line has a vt33 lurking in it\n");
		fclose($pipes[0]);

		$readers = array($pipes[1], $pipes[2]);
		while (stream_select($read=$readers,
												 $write=null,
												 $except=null,
												 0, 200000) > 0) {
				foreach ($read as $stream) {
						$line = fgets($stream);
						if ($line !== false) {
								if ($stream === $pipes[1]) {
										print "STDOUT: $line";
								} else {
										print "STDERR: $line";
								}
						}
						if (feof($stream)) {
								$readers = array_diff($readers, array($stream));
						}
				}
		}

		fclose($pipes[1]);
		fclose($pipes[2]);
		proc_close($proc);
}

// @@PLEAC@@_16.10
// PHP supports fork/exec/wait but not pipe. However, it does
// support socketpair, which can do everything pipes can as well
// as bidirectional communication. The original recipes have been
// modified here to use socketpair only.

// -----------------------------

// pipe1 - use socketpair and fork so parent can send to child
$sockets = array();
if (!socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets)) {
		die(socket_strerror(socket_last_error()));
}
list($reader, $writer) = $sockets;

$pid = pcntl_fork();
if ($pid == -1) {
		die('cannot fork');
} elseif ($pid) {
		socket_close($reader);
		$line = sprintf("Parent Pid %d is sending this\n", getmypid());
		if (!socket_write($writer, $line, strlen($line))) {
				socket_close($writer);
				die(socket_strerror(socket_last_error()));
		}
		socket_close($writer);
		pcntl_waitpid($pid, $status);
} else {
		socket_close($writer);
		$line = socket_read($reader, 1024, PHP_NORMAL_READ);
		printf("Child Pid %d just read this: `%s'\n", getmypid(), rtrim($line));
		socket_close($reader);  // this will happen anyway
		exit(0);
}

// -----------------------------

// pipe2 - use socketpair and fork so child can send to parent
$sockets = array();
if (!socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets)) {
		die(socket_strerror(socket_last_error()));
}
list($reader, $writer) = $sockets;

$pid = pcntl_fork();
if ($pid == -1) {
		die('cannot fork');
} elseif ($pid) {
		socket_close($writer);
		$line = socket_read($reader, 1024, PHP_NORMAL_READ);
		printf("Parent Pid %d just read this: `%s'\n", getmypid(), rtrim($line));
		socket_close($reader);
		pcntl_waitpid($pid, $status);
} else {
		socket_close($reader);
		$line = sprintf("Child Pid %d is sending this\n", getmypid());
		if (!socket_write($writer, $line, strlen($line))) {
				socket_close($writer);
				die(socket_strerror(socket_last_error()));
		}
		socket_close($writer);  // this will happen anyway
		exit(0);
}

// -----------------------------

// pipe3 and pipe4 demonstrate the use of perl's "forking open"
// feature to reimplement pipe1 and pipe2. pipe5 uses two pipes
// to simulate socketpair. Since PHP supports socketpair but not
// pipe, and does not have a "forking open" feature, these
// examples are skipped here.

// -----------------------------

// pipe6 - bidirectional communication using socketpair
$sockets = array();
if (!socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets)) {
		die(socket_strerror(socket_last_error()));
}
list($child, $parent) = $sockets;

$pid = pcntl_fork();
if ($pid == -1) {
		die('cannot fork');
} elseif ($pid) {
		socket_close($parent);
		$line = sprintf("Parent Pid %d is sending this\n", getmypid());
		if (!socket_write($child, $line, strlen($line))) {
				socket_close($child);
				die(socket_strerror(socket_last_error()));
		}
		$line = socket_read($child, 1024, PHP_NORMAL_READ);
		printf("Parent Pid %d just read this: `%s'\n", getmypid(), rtrim($line));
		socket_close($child);
		pcntl_waitpid($pid, $status);
} else {
		socket_close($child);
		$line = socket_read($parent, 1024, PHP_NORMAL_READ);
		printf("Child Pid %d just read this: `%s'\n", getmypid(), rtrim($line));
		$line = sprintf("Child Pid %d is sending this\n", getmypid());
		if (!socket_write($parent, $line, strlen($line))) {
				socket_close($parent);
				die(socket_strerror(socket_last_error()));
		}
		socket_close($parent);
		exit(0);
}

// @@PLEAC@@_16.11
// -----------------------------
// % mkfifo /path/to/named.pipe
// -----------------------------

$fifo = fopen('/path/to/named.pipe', 'r');
if ($fifo !== false) {
		while (!feof($fifo)) {
				$line = fgets($fifo);
				if ($line === false) break;
				echo "Got: $line";
		}
		fclose($fifo);
} else {
		die('could not open fifo for read');
}

// -----------------------------

$fifo = fopen('/path/to/named.pipe', 'w');
if ($fifo !== false) {
		fwrite($fifo, "Smoke this.\n");
		fclose($fifo);
} else {
		die('could not open fifo for write');
}

// -----------------------------
// % mkfifo ~/.plan                    #  isn't this everywhere yet?
// % mknod  ~/.plan p                  #  in case you don't have mkfifo
// -----------------------------

// dateplan - place current date and time in .plan file
while (true) {
		$home = getenv('HOME');
		$fifo = fopen("$home/.plan", 'w');
		if ($fifo === false) {
				die("Couldn't open $home/.plan for writing.\n");
		}
		fwrite($fifo,
					 'The current time is '
					 . strftime('%a, %d %b %Y %H:%M:%S %z')
					 . "\n");
		fclose($fifo);
		sleep(1);
}

// -----------------------------

// fifolog - read and record log msgs from fifo

$fifo = null;

declare(ticks = 1);
function handle_alarm($signal) {
		global $fifo;
		if ($fifo) fclose($fifo);   // move on to the next queued process
}
pcntl_signal(SIGALRM, 'handle_alarm');

while (true) {
		pcntl_alarm(0);             // turn off alarm for blocking open
		$fifo = fopen('/tmp/log', 'r');
		if ($fifo === false) {
				die("can't open /tmp/log");
		}
		pcntl_alarm(1);             // you have 1 second to log

		$service = fgets($fifo);
		if ($service === false) continue; // interrupt or nothing logged
		$service = rtrim($service);

		$message = fgets($fifo);
		if ($message === false) continue; // interrupt or nothing logged
		$message = rtrim($message);

		pcntl_alarm(0);             // turn off alarms for message processing

		if ($service == 'http') {
				// ignoring
		} elseif ($service == 'login') {
				// log to /var/log/login
				$log = fopen('/var/log/login', 'a');
				if ($log !== false) {
						fwrite($log,
									 strftime('%a, %d %b %Y %H:%M:%S %z')
									 . " $service $message\n");
						fclose($log);
				} else {
						trigger_error("Couldn't log $service $message to /var/log/login\n",
													E_USER_WARNING);
				}
		}
}

// @@PLEAC@@_16.12
// sharetest - test shared variables across forks

$SHM_KEY = ftok(__FILE__, chr(1));
$handle = sem_get($SHM_KEY);
$buffer = shm_attach($handle, 1024);

// The original recipe has an INT signal handler here. However, it
// causes erratic behavior with PHP, and PHP seems to do the right
// thing without it.

for ($i = 0; $i < 10; $i++) {
		$child = pcntl_fork();
		if ($child == -1) {
				die('cannot fork');
		} elseif ($child) {
				$kids[] = $child; // in case we care about their pids
		} else {
				squabble();
				exit();
		}
}

while (true) {
		print 'Buffer is ' . shm_get_var($buffer, 1) . "\n";
		sleep(1);
}
die('Not reached');

function squabble() {
		global $handle;
		global $buffer;
		$i = 0;
		$pid = getmypid();
		while (true) {
				if (preg_match("/^$pid\\b/", shm_get_var($buffer, 1))) continue;
				sem_acquire($handle);
				$i++;
				shm_put_var($buffer, 1, "$pid $i");
				sem_release($handle);
		}
}

// Buffer is 14357 1
// Buffer is 14355 3
// Buffer is 14355 4
// Buffer is 14354 5
// Buffer is 14353 6
// Buffer is 14351 8
// Buffer is 14351 9
// Buffer is 14350 10
// Buffer is 14348 11
// Buffer is 14348 12
// Buffer is 14357 10
// Buffer is 14357 11
// Buffer is 14355 13
// ...

// @@PLEAC@@_16.13
// Available signal constants
% php -r 'print_r(get_defined_constants());' | grep '\[SIG' | grep -v _
		[SIGHUP] => 1
		[SIGINT] => 2
		[SIGQUIT] => 3
		[SIGILL] => 4
		[SIGTRAP] => 5
		[SIGABRT] => 6
		[SIGIOT] => 6
		[SIGBUS] => 7
		[SIGFPE] => 8
		[SIGKILL] => 9
		[SIGUSR1] => 10
		[SIGSEGV] => 11
		[SIGUSR2] => 12
		[SIGPIPE] => 13
		[SIGALRM] => 14
		[SIGTERM] => 15
		[SIGSTKFLT] => 16
		[SIGCLD] => 17
		[SIGCHLD] => 17
		[SIGCONT] => 18
		[SIGSTOP] => 19
		[SIGTSTP] => 20
		[SIGTTIN] => 21
		[SIGTTOU] => 22
		[SIGURG] => 23
		[SIGXCPU] => 24
		[SIGXFSZ] => 25
		[SIGVTALRM] => 26
		[SIGPROF] => 27
		[SIGWINCH] => 28
		[SIGPOLL] => 29
		[SIGIO] => 29
		[SIGPWR] => 30
		[SIGSYS] => 31
		[SIGBABY] => 31

// Predefined signal handler constants
% php -r 'print_r(get_defined_constants());' | grep '\[SIG' | grep _
		[SIG_IGN] => 1
		[SIG_DFL] => 0
		[SIG_ERR] => -1

// @@PLEAC@@_16.14
// send pid a signal 9
posix_kill($pid, 9);
// send whole job a signal 1
posix_kill($pgrp, -1);
// send myself a SIGUSR1
posix_kill(getmypid(), SIGUSR1);
// send a SIGHUP to processes in pids
foreach ($pids as $pid) posix_kill($pid, SIGHUP);

// -----------------------------

// Use kill with pseudo-signal 0 to see if process is alive.
if (posix_kill($minion, 0)) {
		echo "$minion is alive!\n";
} else {
		echo "$minion is deceased.\n";
}

// @@PLEAC@@_16.15
// call got_sig_quit for every SIGQUIT
pcntl_signal(SIGQUIT, 'got_sig_quit');
// call got_sig_pipe for every SIGPIPE
pcntl_signal(SIGPIPE, 'got_sig_pipe');
// increment ouch for every SIGINT
function got_sig_int($signal) { global $ouch; $ouch++; }
pcntl_signal(SIGINT, 'got_sig_int');
// ignore the signal INT
pcntl_signal(SIGINT, SIG_IGN);
// restore default STOP signal handling
pcntl_signal(SIGSTOP, SIG_DFL);

// @@PLEAC@@_16.16
// the signal handler
function ding($signal) {
		fwrite(STDERR, "\x07Enter your name!\n");
}

// prompt for name, overriding SIGINT
function get_name() {
		declare(ticks = 1);
		pcntl_signal(SIGINT, 'ding');

		echo "Kindly Stranger, please enter your name: ";
		while (!@stream_select($read=array(STDIN),
													 $write=null,
													 $except=null,
													 1)) {
				// allow signals to be observed
		}
		$name = fgets(STDIN);

		// Since pcntl_signal() doesn't return the old signal handler, the
		// best we can do here is set it back to the default behavior.
		pcntl_signal(SIGINT, SIG_DFL);

		return $name;
}

// @@PLEAC@@_16.17
function got_int($signal) {
		pcntl_signal(SIGINT, 'got_int');  // but not for SIGCHLD!
		// ...
}
pcntl_signal(SIGINT, 'got_int');

// -----------------------------

declare(ticks = 1);
$interrupted = false;

function got_int($signal) {
		global $interrupted;
		$interrupted = true;
		// The third argument to pcntl_signal() determines if system calls
		// should be restarted after a signal. It defaults to true.
		pcntl_signal(SIGINT, 'got_int', false);  // or SIG_IGN
}
pcntl_signal(SIGINT, 'got_int', false);

// ... long-running code that you don't want to restart

if ($interrupted) {
		// deal with the signal
}

// @@PLEAC@@_16.18
// ignore signal INT
pcntl_signal(SIGINT, SIG_IGN);

// install signal handler
declare(ticks = 1);
function tsktsk($signal) {
		fwrite(STDERR, "\x07The long habit of living indisposeth us for dying.");
		pcntl_signal(SIGINT, 'tsktsk');
}
pcntl_signal(SIGINT, 'tsktsk');

// @@PLEAC@@_16.19
pcntl_signal(SIGCHLD, SIG_IGN);

// -----------------------------

declare(ticks = 1);
function reaper($signal) {
		$pid = pcntl_waitpid(-1, $status, WNOHANG);
		if ($pid > 0) {
				// ...
				reaper($signal);
		}
		// install *after* calling waitpid
		pcntl_signal(SIGCHLD, 'reaper');
}
pcntl_signal(SIGCHLD, 'reaper');

// -----------------------------

declare(ticks = 1);
function reaper($signal) {
		$pid = pcntl_waitpid(-1, $status, WNOHANG);
		if ($pid == -1) {
				// No child waiting. Ignore it.
		} else {
				if (pcntl_wifexited($signal)) {
						echo "Process $pid exited.\n";
				} else {
						echo "False alarm on $pid\n";
				}
				reaper($signal);
		}
		pcntl_signal(SIGCHLD, 'reaper');
}
pcntl_signal(SIGCHLD, 'reaper');

// @@PLEAC@@_16.20
// PHP does not support sigprocmask().

// @@PLEAC@@_16.21
declare(ticks = 1);
$aborted = false;

function handle_alarm($signal) {
		global $aborted;
		$aborted = true;
}
pcntl_signal(SIGALRM, 'handle_alarm');

pcntl_alarm(3600);
// long-time operations here
pcntl_alarm(0);
if ($aborted) {
		// timed out - do what you will here
}

[end]

[Js]
[start]
"hello". substring(0, 2) === "he";
console.log("hello world");


[end]

[Csharp]
[start]
// Si le chemin est relatif à l'emplacement de l'exe, vous pouvez utiliser :
this.label1.Text = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
// Cela vous donne le répertoire de l'exe.

[end]

[Csharp]
[start]
// progressbar infinite
namespace ProgressBarInfinite
{
	using System;
	using System.IO;
	using System.Windows.Forms;

	public partial class FormMain : Form
	{
		private bool progressBarGoingForward = true;

		public FormMain()
		{
			this.InitializeComponent();
		}

		private void ButtonStartClick(object sender, EventArgs e)
		{
			this.progressBarGoingForward = true;
			this.timer1.Enabled = true;
		}

		private void ButtonStopClick(object sender, EventArgs e)
		{
			this.progressBar1.Value = this.progressBar1.Minimum;
			this.timer1.Enabled = false;
		}

		private void ProgressBarMove()
		{
			if (this.progressBar1.Value == this.progressBar1.Maximum)
			{
				this.progressBarGoingForward = false;
			}

			if (this.progressBar1.Value == this.progressBar1.Minimum)
			{
				this.progressBarGoingForward = true;
			}

			if (this.progressBarGoingForward)
			{
				this.progressBar1.Value++;
			}
			else
			{
				this.progressBar1.Value--;
			}

			this.progressBar1.Refresh();
			this.label1.Text = this.progressBar1.Value.ToString();
		}

		private void Timer1Tick(object sender, EventArgs e)
		{
			if (this.timer1.Enabled)
			{
				this.ProgressBarMove();
			}
		}

		private void FormMainLoad(object sender, EventArgs e)
		{
			this.timer1.Enabled = false;
			this.label1.Text = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
			this.progressBar1.Minimum = 1;
			this.progressBar1.Maximum = 100;
			this.timer1.Interval = 50;
		}
	}
}

[end]

[Csharp]
[start]
// function HasNoduplicate params int[] liste
		private static bool HasNoDuplicate(params int[] liste)
		{
			return liste.Distinct().Count() == liste.Count();
		}

[end]

[Vba]
[start]
ld = CDate(TextBoxDate.Text)
	If Err <> 0 And Err = 13 Then
		MsgBox "Erreur numéro : 102" & vbCrLf & "Message :" & vbCrLf & _
					 "Format attendu " & Chr(171) & "JJ/MM/AAAA" & Chr(187) & " ou " & Chr(171) & "JJ" & Chr(187) & _
					 " est le jour, " & Chr(171) & "MM" & Chr(187) & _
					 " est le mois et " & Chr(171) & "AAAA" & Chr(187) & _
					 " est l'année.", vbOKOnly + vbExclamation, "Saisie"
		TextBoxDate.SetFocus
		Exit Sub
	End If
	
[end]

[Vba]
[start]
Public objSOAPClient As New MSSOAPLib30.SoapClient30  ' objet client soap

[end]

[Vbnet]
[start]
Imports System.IO

Class MainWindow

		Private Sub ButtonSaveClick(sender As System.Object, e As System.Windows.RoutedEventArgs) Handles Button1.Click
				If ListView1.Items.Count <> 0 Then
						Dim sw As New StreamWriter("C:\temp\test.txt")
						For i As Integer = 0 To ListView1.Items.Count - 1
								sw.WriteLine(ListView1.Items(i))
						Next
						sw.Close()
				End If

		End Sub

		Private Sub ButtonLoadClick(sender As System.Object, e As System.Windows.RoutedEventArgs) Handles Button2.Click
				For i As Integer = 0 To 100
						ListView1.Items.Add(i.ToString())
				Next
		End Sub
End Class

[end]

[Csharp]
[start]
// How to: Host Controls in Windows Forms DataGridView Cells
// http://msdn.microsoft.com/en-us/library/7tas5c80.aspx#Y0

using System;
using System.Windows.Forms;

public class CalendarColumn : DataGridViewColumn
{
		public CalendarColumn() : base(new CalendarCell())
		{
		}

		public override DataGridViewCell CellTemplate
		{
				get
				{
						return base.CellTemplate;
				}
				set
				{
						// Ensure that the cell used for the template is a CalendarCell. 
						if (value != null && 
								!value.GetType().IsAssignableFrom(typeof(CalendarCell)))
						{
								throw new InvalidCastException("Must be a CalendarCell");
						}
						base.CellTemplate = value;
				}
		}
}

public class CalendarCell : DataGridViewTextBoxCell
{

		public CalendarCell()
				: base()
		{
				// Use the short date format. 
				this.Style.Format = "d";
		}

		public override void InitializeEditingControl(int rowIndex, object 
				initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle)
		{
				// Set the value of the editing control to the current cell value. 
				base.InitializeEditingControl(rowIndex, initialFormattedValue, 
						dataGridViewCellStyle);
				CalendarEditingControl ctl = 
						DataGridView.EditingControl as CalendarEditingControl;
				// Use the default row value when Value property is null. 
				if (this.Value == null)
				{
						ctl.Value = (DateTime)this.DefaultNewRowValue;
				}
				else
				{
						ctl.Value = (DateTime)this.Value;
				}
		}

		public override Type EditType
		{
				get
				{
						// Return the type of the editing control that CalendarCell uses. 
						return typeof(CalendarEditingControl);
				}
		}

		public override Type ValueType
		{
				get
				{
						// Return the type of the value that CalendarCell contains. 

						return typeof(DateTime);
				}
		}

		public override object DefaultNewRowValue
		{
				get
				{
						// Use the current date and time as the default value. 
						return DateTime.Now;
				}
		}
}

class CalendarEditingControl : DateTimePicker, IDataGridViewEditingControl
{
		DataGridView dataGridView;
		private bool valueChanged = false;
		int rowIndex;

		public CalendarEditingControl()
		{
				this.Format = DateTimePickerFormat.Short;
		}

		// Implements the IDataGridViewEditingControl.EditingControlFormattedValue  
		// property. 
		public object EditingControlFormattedValue
		{
				get
				{
						return this.Value.ToShortDateString();
				}
				set
				{            
						if (value is String)
						{
								try
								{
										// This will throw an exception of the string is  
										// null, empty, or not in the format of a date. 
										this.Value = DateTime.Parse((String)value);
								}
								catch
								{
										// In the case of an exception, just use the  
										// default value so we're not left with a null 
										// value. 
										this.Value = DateTime.Now;
								}
						}
				}
		}

		// Implements the  
		// IDataGridViewEditingControl.GetEditingControlFormattedValue method. 
		public object GetEditingControlFormattedValue(
				DataGridViewDataErrorContexts context)
		{
				return EditingControlFormattedValue;
		}

		// Implements the  
		// IDataGridViewEditingControl.ApplyCellStyleToEditingControl method. 
		public void ApplyCellStyleToEditingControl(
				DataGridViewCellStyle dataGridViewCellStyle)
		{
				this.Font = dataGridViewCellStyle.Font;
				this.CalendarForeColor = dataGridViewCellStyle.ForeColor;
				this.CalendarMonthBackground = dataGridViewCellStyle.BackColor;
		}

		// Implements the IDataGridViewEditingControl.EditingControlRowIndex  
		// property. 
		public int EditingControlRowIndex
		{
				get
				{
						return rowIndex;
				}
				set
				{
						rowIndex = value;
				}
		}

		// Implements the IDataGridViewEditingControl.EditingControlWantsInputKey  
		// method. 
		public bool EditingControlWantsInputKey(
				Keys key, bool dataGridViewWantsInputKey)
		{
				// Let the DateTimePicker handle the keys listed. 
				switch (key & Keys.KeyCode)
				{
						case Keys.Left:
						case Keys.Up:
						case Keys.Down:
						case Keys.Right:
						case Keys.Home:
						case Keys.End:
						case Keys.PageDown:
						case Keys.PageUp:
								return true;
						default:
								return !dataGridViewWantsInputKey;
				}
		}

		// Implements the IDataGridViewEditingControl.PrepareEditingControlForEdit  
		// method. 
		public void PrepareEditingControlForEdit(bool selectAll)
		{
				// No preparation needs to be done.
		}

		// Implements the IDataGridViewEditingControl 
		// .RepositionEditingControlOnValueChange property. 
		public bool RepositionEditingControlOnValueChange
		{
				get
				{
						return false;
				}
		}

		// Implements the IDataGridViewEditingControl 
		// .EditingControlDataGridView property. 
		public DataGridView EditingControlDataGridView
		{
				get
				{
						return dataGridView;
				}
				set
				{
						dataGridView = value;
				}
		}

		// Implements the IDataGridViewEditingControl 
		// .EditingControlValueChanged property. 
		public bool EditingControlValueChanged
		{
				get
				{
						return valueChanged;
				}
				set
				{
						valueChanged = value;
				}
		}

		// Implements the IDataGridViewEditingControl 
		// .EditingPanelCursor property. 
		public Cursor EditingPanelCursor
		{
				get
				{
						return base.Cursor;
				}
		}

		protected override void OnValueChanged(EventArgs eventargs)
		{
				// Notify the DataGridView that the contents of the cell 
				// have changed.
				valueChanged = true;
				this.EditingControlDataGridView.NotifyCurrentCellDirty(true);
				base.OnValueChanged(eventargs);
		}
}

public class Form1 : Form
{
		private DataGridView dataGridView1 = new DataGridView();

		[STAThreadAttribute()]
		public static void Main()
		{
				Application.Run(new Form1());
		}

		public Form1()
		{
				this.dataGridView1.Dock = DockStyle.Fill;
				this.Controls.Add(this.dataGridView1);
				this.Load += new EventHandler(Form1_Load);
				this.Text = "DataGridView calendar column demo";
		}

		private void Form1_Load(object sender, EventArgs e)
		{
				CalendarColumn col = new CalendarColumn();
				this.dataGridView1.Columns.Add(col);
				this.dataGridView1.RowCount = 5;
				foreach (DataGridViewRow row in this.dataGridView1.Rows)
				{
						row.Cells[0].Value = DateTime.Now;
				}
		}
}

[end]

[Vba]
[start]
Select Case UCase(VolPteASimuler)
Case "V", "VOL", "VOLUME"
		CAEstEnModeVol = True
Case "P", "PTE", "POINTE", "POI"
		CAEstEnModeVol = False
Case Else
		Call ErreurCritique("Impossible de simuler le mode volume ou pointe à partir du parametre '" & VolPteASimuler & "'", "ERREUR DE CODAGE")
End Select

[end]

[Csharp]
[start]
// backgrounder worker Fibonacci
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

namespace BackgroundWorkerExample
{    
		public class FibonacciForm : System.Windows.Forms.Form
		{    
				private int numberToCompute = 0;
				private int highestPercentageReached = 0;

				private System.Windows.Forms.NumericUpDown numericUpDown1;
				private System.Windows.Forms.Button startAsyncButton;
				private System.Windows.Forms.Button cancelAsyncButton;
				private System.Windows.Forms.ProgressBar progressBar1;
				private System.Windows.Forms.Label resultLabel;
				private System.ComponentModel.BackgroundWorker backgroundWorker1;

				public FibonacciForm()
				{    
						InitializeComponent();

						InitializeBackgoundWorker();
				}

				// Set up the BackgroundWorker object by 
				// attaching event handlers. 
				private void InitializeBackgoundWorker()
				{
						backgroundWorker1.DoWork += 
								new DoWorkEventHandler(backgroundWorker1_DoWork);
						backgroundWorker1.RunWorkerCompleted += 
								new RunWorkerCompletedEventHandler(
						backgroundWorker1_RunWorkerCompleted);
						backgroundWorker1.ProgressChanged += 
								new ProgressChangedEventHandler(
						backgroundWorker1_ProgressChanged);
				}
		
				private void startAsyncButton_Click(System.Object sender, 
						System.EventArgs e)
				{
						// Reset the text in the result label.
						resultLabel.Text = String.Empty;

						// Disable the UpDown control until 
						// the asynchronous operation is done.
						this.numericUpDown1.Enabled = false;

						// Disable the Start button until 
						// the asynchronous operation is done.
						this.startAsyncButton.Enabled = false;

						// Enable the Cancel button while 
						// the asynchronous operation runs.
						this.cancelAsyncButton.Enabled = true;

						// Get the value from the UpDown control.
						numberToCompute = (int)numericUpDown1.Value;

						// Reset the variable for percentage tracking.
						highestPercentageReached = 0;

						// Start the asynchronous operation.
						backgroundWorker1.RunWorkerAsync(numberToCompute);
				}

				private void cancelAsyncButton_Click(System.Object sender, 
						System.EventArgs e)
				{   
						// Cancel the asynchronous operation.
						this.backgroundWorker1.CancelAsync();

						// Disable the Cancel button.
						cancelAsyncButton.Enabled = false;
				}

				// This event handler is where the actual,
				// potentially time-consuming work is done.
				private void backgroundWorker1_DoWork(object sender, 
						DoWorkEventArgs e)
				{   
						// Get the BackgroundWorker that raised this event.
						BackgroundWorker worker = sender as BackgroundWorker;

						// Assign the result of the computation
						// to the Result property of the DoWorkEventArgs
						// object. This is will be available to the 
						// RunWorkerCompleted eventhandler.
						e.Result = ComputeFibonacci((int)e.Argument, worker, e);
				}

				// This event handler deals with the results of the
				// background operation.
				private void backgroundWorker1_RunWorkerCompleted(
						object sender, RunWorkerCompletedEventArgs e)
				{
						// First, handle the case where an exception was thrown.
						if (e.Error != null)
						{
								MessageBox.Show(e.Error.Message);
						}
						else if (e.Cancelled)
						{
								// Next, handle the case where the user canceled 
								// the operation.
								// Note that due to a race condition in 
								// the DoWork event handler, the Cancelled
								// flag may not have been set, even though
								// CancelAsync was called.
								resultLabel.Text = "Canceled";
						}
						else
						{
								// Finally, handle the case where the operation 
								// succeeded.
								resultLabel.Text = e.Result.ToString();
						}

						// Enable the UpDown control.
						this.numericUpDown1.Enabled = true;

						// Enable the Start button.
						startAsyncButton.Enabled = true;

						// Disable the Cancel button.
						cancelAsyncButton.Enabled = false;
				}

				// This event handler updates the progress bar.
				private void backgroundWorker1_ProgressChanged(object sender,
						ProgressChangedEventArgs e)
				{
						this.progressBar1.Value = e.ProgressPercentage;
				}

				// This is the method that does the actual work. For this
				// example, it computes a Fibonacci number and
				// reports progress as it does its work.
				long ComputeFibonacci(int n, BackgroundWorker worker, DoWorkEventArgs e)
				{
						// The parameter n must be >= 0 and <= 91.
						// Fib(n), with n > 91, overflows a long.
						if ((n < 0) || (n > 91))
						{
								throw new ArgumentException(
										"value must be >= 0 and <= 91", "n");
						}

						long result = 0;

						// Abort the operation if the user has canceled.
						// Note that a call to CancelAsync may have set 
						// CancellationPending to true just after the
						// last invocation of this method exits, so this 
						// code will not have the opportunity to set the 
						// DoWorkEventArgs.Cancel flag to true. This means
						// that RunWorkerCompletedEventArgs.Cancelled will
						// not be set to true in your RunWorkerCompleted
						// event handler. This is a race condition.

						if (worker.CancellationPending)
						{   
								e.Cancel = true;
						}
						else
						{   
								if (n < 2)
								{   
										result = 1;
								}
								else
								{   
										result = ComputeFibonacci(n - 1, worker, e) + 
														 ComputeFibonacci(n - 2, worker, e);
								}

								// Report progress as a percentage of the total task.
								int percentComplete = 
										(int)((float)n / (float)numberToCompute * 100);
								if (percentComplete > highestPercentageReached)
								{
										highestPercentageReached = percentComplete;
										worker.ReportProgress(percentComplete);
								}
						}

						return result;
				}


				#region Windows Form Designer generated code
				
				private void InitializeComponent()
				{
						this.numericUpDown1 = new System.Windows.Forms.NumericUpDown();
						this.startAsyncButton = new System.Windows.Forms.Button();
						this.cancelAsyncButton = new System.Windows.Forms.Button();
						this.resultLabel = new System.Windows.Forms.Label();
						this.progressBar1 = new System.Windows.Forms.ProgressBar();
						this.backgroundWorker1 = new System.ComponentModel.BackgroundWorker();
						((System.ComponentModel.ISupportInitialize)(this.numericUpDown1)).BeginInit();
						this.SuspendLayout();
						// 
						// numericUpDown1
						// 
						this.numericUpDown1.Location = new System.Drawing.Point(16, 16);
						this.numericUpDown1.Maximum = new System.Decimal(new int[] {
						91,
						0,
						0,
						0});
						this.numericUpDown1.Minimum = new System.Decimal(new int[] {
						1,
						0,
						0,
						0});
						this.numericUpDown1.Name = "numericUpDown1";
						this.numericUpDown1.Size = new System.Drawing.Size(80, 20);
						this.numericUpDown1.TabIndex = 0;
						this.numericUpDown1.Value = new System.Decimal(new int[] {
						1,
						0,
						0,
						0});
						// 
						// startAsyncButton
						// 
						this.startAsyncButton.Location = new System.Drawing.Point(16, 72);
						this.startAsyncButton.Name = "startAsyncButton";
						this.startAsyncButton.Size = new System.Drawing.Size(120, 23);
						this.startAsyncButton.TabIndex = 1;
						this.startAsyncButton.Text = "Start Async";
						this.startAsyncButton.Click += new System.EventHandler(this.startAsyncButton_Click);
						// 
						// cancelAsyncButton
						// 
						this.cancelAsyncButton.Enabled = false;
						this.cancelAsyncButton.Location = new System.Drawing.Point(153, 72);
						this.cancelAsyncButton.Name = "cancelAsyncButton";
						this.cancelAsyncButton.Size = new System.Drawing.Size(119, 23);
						this.cancelAsyncButton.TabIndex = 2;
						this.cancelAsyncButton.Text = "Cancel Async";
						this.cancelAsyncButton.Click += new System.EventHandler(this.cancelAsyncButton_Click);
						// 
						// resultLabel
						// 
						this.resultLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
						this.resultLabel.Location = new System.Drawing.Point(112, 16);
						this.resultLabel.Name = "resultLabel";
						this.resultLabel.Size = new System.Drawing.Size(160, 23);
						this.resultLabel.TabIndex = 3;
						this.resultLabel.Text = "(no result)";
						this.resultLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
						// 
						// progressBar1
						// 
						this.progressBar1.Location = new System.Drawing.Point(18, 48);
						this.progressBar1.Name = "progressBar1";
						this.progressBar1.Size = new System.Drawing.Size(256, 8);
						this.progressBar1.Step = 2;
						this.progressBar1.TabIndex = 4;
						// 
						// backgroundWorker1
						// 
						this.backgroundWorker1.WorkerReportsProgress = true;
						this.backgroundWorker1.WorkerSupportsCancellation = true;
						// 
						// FibonacciForm
						// 
						this.ClientSize = new System.Drawing.Size(292, 118);
						this.Controls.Add(this.progressBar1);
						this.Controls.Add(this.resultLabel);
						this.Controls.Add(this.cancelAsyncButton);
						this.Controls.Add(this.startAsyncButton);
						this.Controls.Add(this.numericUpDown1);
						this.Name = "FibonacciForm";
						this.Text = "Fibonacci Calculator";
						((System.ComponentModel.ISupportInitialize)(this.numericUpDown1)).EndInit();
						this.ResumeLayout(false);

				}
				#endregion

				[STAThread]
				static void Main()
				{
						Application.Run(new FibonacciForm());
				}
		}
}

[end]

[Csharp]
[start]
#region " RtbExtention "
				static public void AddRemBullets(this RichTextBox RTB)
				{
						if (RTB.SelectionBullet == false)
						{
								RTB.BulletIndent = 20;
								RTB.SelectionBullet = true;
						}
						else
						{
								RTB.BulletIndent = 0;
								RTB.SelectionBullet = false;
						}
				}
				static public object CurrentColumn(this RichTextBox RTB)
				{
						return RTB.SelectionStart - RTB.GetFirstCharIndexOfCurrentLine() + 1;
				}
				static public object CurrentLine(this RichTextBox RTB)
				{
						return RTB.GetLineFromCharIndex(RTB.SelectionStart) + 1;
				}
				static public void MakeBold(this RichTextBox RTB)
				{
						NewFont = new Font(RTB.SelectionFont, (RTB.SelectionFont.Bold ? RTB.SelectionFont.Style & ~FontStyle.Bold : RTB.SelectionFont.Style | FontStyle.Bold));
						RTB.SelectionFont = NewFont;
				}
				static public void MakeItalic(this RichTextBox RTB)
				{
						NewFont = new Font(RTB.SelectionFont, (RTB.SelectionFont.Italic ? RTB.SelectionFont.Style & ~FontStyle.Italic : RTB.SelectionFont.Style | FontStyle.Italic));
						RTB.SelectionFont = NewFont;
				}
				static public void MakeUnderline(this RichTextBox RTB)
				{
						NewFont = new Font(RTB.SelectionFont, (RTB.SelectionFont.Underline ? RTB.SelectionFont.Style & ~FontStyle.Underline : RTB.SelectionFont.Style | FontStyle.Underline));
						RTB.SelectionFont = NewFont;
				}
				static public int FindMyText(this RichTextBox RTB, string text, int start)
				{
						// Initialize the return value to false by default.
						int returnValue = -1;
						// Ensure that a search string has been specified and a valid start point.
						if (text.Length > 0 && start >= 0)
						{
								// Obtain the location of the search string in richTextBox1.
								int indexToText = RTB.Find(text, start, RichTextBoxFinds.MatchCase);
								// Determine whether the text was found in richTextBox1.
								if (indexToText >= 0)
								{
										returnValue = indexToText;
								}
								else
								{
										MessageBox.Show(null, "Je n'ai pas trouvé [" + text + "]", "Rechercher", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
								}
						}
						return returnValue;
				}
				static public int FindNext(this RichTextBox RTB, string text, int start)
				{
						int StartPosition = RTB.SelectionStart + 2;
						StartPosition = RTB.Find(text, StartPosition, RichTextBoxFinds.MatchCase);
						if (StartPosition == 0)
						{
								return 0;
						}
						else if (StartPosition != -1)
						{
								RTB.Select(StartPosition, text.Length);
								RTB.ScrollToCaret();
								RTB.Focus();
						}
						else { MessageBox.Show("je trouve plus rien dans ce texte.", Application.ProductName + "Rechercher suivante", MessageBoxButtons.OK, MessageBoxIcon.Information); }
						return StartPosition;
				}
				static public int AddDate(this RichTextBox RTB, string text, int start)
				{
						// Initialize the return value to false by default.
						int returnValue = -1;
						// Ensure that a search string has been specified and a valid start point.
						if (text.Length > 0 && start >= 0)
						{
								// Obtain the location of the search string in richTextBox1.
								int indexToText = RTB.Find(text, start, RichTextBoxFinds.MatchCase);
								// Determine whether the text was found in richTextBox1.
								if (indexToText >= 0)
								{
										returnValue = indexToText;
										RTB.SelectionStart = RTB.TextLength;
										RTB.SelectedText = "\r\n";
										RTB.Select();
								}
								else
								{
										RTB.SelectionStart = RTB.TextLength;
										RTB.SelectedText = "\r\n";
										RTB.SelectedText = "\r\n";
										RTB.SelectionFont = new Font("Microsoft Sans serif", 14, FontStyle.Bold);
										RTB.SelectedText = DateTime.Now.ToString("dddd, dd MMM yyyy");
										RTB.SelectedText = "\r\n";
										RTB.SelectionFont = new Font("Microsoft Sans serif", RTB.SelectionFont.Size, FontStyle.Regular);
										RTB.SelectedText = "\r\n";
										RTB.SelectionStart = RTB.TextLength;
										RTB.Select();
										RTB.Focus();
								}
						}
						return returnValue;
				}
				#endregion
				
private void rtfFontStyle()
				{
						if (rtf.SelectionFont != null)
						{
								if (rtf.SelectionFont.Bold == true)
								{
										tbBold.Checked = true;
								}
								else
								{
										tbBold.Checked = false;
								}
								if (rtf.SelectionFont.Italic == true)
								{
										tbItalic.Checked = true;
								}
								else
								{
										tbItalic.Checked = false;
								}
								if (rtf.SelectionFont.Underline == true)
								{
										tbUnderline.Checked = true;
								}
								else
								{
										tbUnderline.Checked = false;
								}
						}
				}
				private void rtfAlignment()
				{
						if (this.rtf.SelectionAlignment == HorizontalAlignment.Left)
						{
								tbAlignLeft.Checked = true;
								tbAlignCenter.Checked = false;
								tbAlignRight.Checked = false;
								mnuToolsOpAlignLeft.Checked = true;
								mnuToolsOpAlignCenter.Checked = false;
								mnuToolsOpAlignRight.Checked = false;
						}
						else if (this.rtf.SelectionAlignment == HorizontalAlignment.Center)
						{
								tbAlignLeft.Checked = false;
								tbAlignCenter.Checked = true;
								tbAlignRight.Checked = false;
								mnuToolsOpAlignLeft.Checked = false;
								mnuToolsOpAlignCenter.Checked = true;
								mnuToolsOpAlignRight.Checked = false;
						}
						else if (this.rtf.SelectionAlignment == HorizontalAlignment.Right)
						{
								tbAlignLeft.Checked = false;
								tbAlignCenter.Checked = false;
								tbAlignRight.Checked = true;
								mnuToolsOpAlignLeft.Checked = false;
								mnuToolsOpAlignCenter.Checked = false;
								mnuToolsOpAlignRight.Checked = true;
						}
				}
				
[end]
